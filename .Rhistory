download.file(url, "PharmGKB pathways/antipsychotics-pw-pharmgkb.tsv")
?sprintf
?download.file
?httr
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
download.file(url, sprintf("PharmGKB pathways/%s.tsv",pgkb_name))
importNetworkFromFile(file = pgkb_name)
}
pgkb.import("PA166170742","Antipsychotics pathway")
?paste0
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
download.file(url, sprintf("PharmGKB pathways/%s.tsv",pgkb_name))
importNetworkFromFile(file = pgkb_name,".tsv")
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
download.file(url, sprintf("PharmGKB pathways/%s.tsv",pgkb_name))
importNetworkFromFile(file = (pgkb_name,".tsv"))
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
download.file(url, sprintf("PharmGKB pathways/%s.tsv",pgkb_name))
importNetworkFromFile(file = paste0(pgkb_name,"tsv"))
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
download.file(url, sprintf("PharmGKB pathways/%s.tsv",pgkb_name))
importNetworkFromFile(file = paste0(pgkb_name,".tsv"))
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
download.file(url, sprintf("PharmGKB pathways/%s.tsv",pgkb_name))
importNetworkFromFile(file = paste0(sprintf("PharmGKB pathways/%s.tsv",pgkb_name)))
}
pgkb.import("PA166170742","Antipsychotics pathway")
?importNetworkFromFile
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
pgkb_name <- paste0(pgbk_name,".tsv")
download.file(url, sprintf("PharmGKB pathways/%s",pgkb_name))
commandsRun(sprintf("network import file file='PharmGKB pathways/%s' indexColumnSourceInteraction=From indexColumnTargetInteraction=To"),pgbk_name)
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
pgkb_name <- paste0(pgkb_name,".tsv")
download.file(url, sprintf("PharmGKB pathways/%s",pgkb_name))
commandsRun(sprintf("network import file file='PharmGKB pathways/%s' indexColumnSourceInteraction=From indexColumnTargetInteraction=To"),pgkb_name)
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
pgkb_name <- paste0(pgkb_name,".tsv")
download.file(url, sprintf("PharmGKB pathways/%s",pgkb_name))
commandsRun(sprintf("network import file file=PharmGKB pathways/%s indexColumnSourceInteraction=From indexColumnTargetInteraction=To"),pgkb_name)
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
pgkb_name <- paste0(pgkb_name,".tsv")
download.file(url, sprintf("PharmGKB pathways/%s",pgkb_name))
commandsRun(sprintf("network import file indexColumnSourceInteraction=From indexColumnTargetInteraction=To file=PharmGKB pathways/%s"),pgkb_name)
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
pgkb_name <- paste0(pgkb_name,".tsv")
download.file(url, sprintf("PharmGKB pathways/%s",pgkb_name))
commandsRun(sprintf("network import file indexColumnSourceInteraction=From indexColumnTargetInteraction=To file=PharmGKB pathways/%s",pgkb_name))
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
pgkb_name <- paste0(pgkb_name,".tsv")
download.file(url, sprintf("PharmGKB pathways/%s",pgkb_name))
commandsRun(sprintf("network import file indexColumnSourceInteraction=From indexColumnTargetInteraction=To file=PharmGKB pathways\%s",pgkb_name))
}
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
pgkb_name <- paste0(pgkb_name,".tsv")
download.file(url, sprintf("PharmGKB pathways/%s",pgkb_name))
commandsRun(sprintf("network import file indexColumnSourceInteraction=From indexColumnTargetInteraction=To file=PharmGKB pathways\%s",pgkb_name))
}
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
pgkb_name <- paste0(pgkb_name,".tsv")
download.file(url, sprintf("PharmGKB pathways/%s",pgkb_name))
commandsRun(sprintf("network import file indexColumnSourceInteraction=From indexColumnTargetInteraction=To file=PharmGKB pathways/%s",pgkb_name))
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
pgkb_name <- paste0(pgkb_name,".tsv")
download.file(url, sprintf("PharmGKB pathways/%s",pgkb_name))
commandsRun(sprintf("network import file indexColumnSourceInteraction=From indexColumnTargetInteraction=To file=PharmGKB pathways/%s",pgkb_name))
commandsRUn(paste('network import file indexColumnSourceInteraction=From indexColumnTargetInteraction=To file=PharmGKB pathways/"', pgkb_name,sep=""))
}
pgkb.import("PA166170742","Antipsychotics pathway")
# WIP ==================================================================================================================================
pgkb.import <- function(pgkb_id,pgkb_name) {
url = sprintf("https://api.pharmgkb.org/v1/download/pathway/%s?format=.tsv", pgkb_id)
pgkb_name <- paste0(pgkb_name,".tsv")
download.file(url, sprintf("PharmGKB pathways/%s",pgkb_name))
commandsRun(sprintf("network import file indexColumnSourceInteraction=From indexColumnTargetInteraction=To file=PharmGKB pathways/%s",pgkb_name))
}
pgkb.import("PA166170742","Antipsychotics pathway")
# SETUP -----------------------------------------------------------------------------------------------------------------------
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
#dplyr 1.1.2; httr 1.4.7;jsonlite 1.8.4; BiocManager 1.30.22; rWikiPathways 1.14.0; RCy3 2.14.2
#Cytoscape 3.10.1
setwd("~/GitHub/SCZ-CNV")
packages <- c("dplyr","httr","jsonlite")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
invisible(lapply(c(packages,"rWikiPathways","RCy3"), require, character.only = TRUE))
cytoscapePing()
cytoscapeVersionInfo()
#Checking if Cytoscape is running and version info
installApp('WikiPathways')
#v. 3.3.10
installApp('DisGeNET-app')
#Using DisGeNET app for the first time requires the user to define the directory for the database file
#v. 7.3.0
installApp('CyTargetLinker')
#v. 4.1.0
installApp('stringApp')
getpathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% c("Homo sapiens","Rattus norvegicus","Mus musculus"))
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
getpathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% c("Homo sapiens","Rattus norvegicus","Mus musculus"))
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
}
createNodeSource <- function(sources,source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=%1$s table=%2$s type=string",sources[[i]],nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=%3$s",source,nodetable,"1"))
#Filling the new "NodeSource" column with the source
}
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
}
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
url<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (url)
}
disgenetRestUrl(netType = "gene-disease-net")
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
url<-disgenetRestUrl(netType)
restCall<-POST(url, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
genedisparams_scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
createNodeSource <- function(source) {
sources <- c("WikiPathways","DisGeNET","PharmGKB")
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=%1$s table=%2$s type=string",sources[[i]],nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=%3$s",source,nodetable,"1"))
#Filling the new "NodeSource" column with the source
}
genedisparams_scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
sources <- c("WikiPathways","DisGeNET","PharmGKB")
sources[[1]]
sources[[2]]
sources[[3]]
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
sources <- c("WikiPathways","DisGeNET","PharmGKB")
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=%1$s table=%2$s type=string",sources[[i]],nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=%3$s",source,nodetable,"1"))
#Filling the new "NodeSource" column with the source
}
genedisparams_scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
sources[[1]]
class(sources[[1]])
sources[1]
createNodeSource <- function(source) {
sources <- c("WikiPathways","DisGeNET","PharmGKB")
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=%1$s table=%2$s type=string",sources[i],nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=%3$s",source,nodetable,"1"))
#Filling the new "NodeSource" column with the source
}
genedisparams_scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
class(sources[1])
View(genedisparams_scz_df)
createNodeSource <- function(source) {
sources <- c("WikiPathways","DisGeNET","PharmGKB")
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=%1$s table=%2$s type=string",sources,nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=%3$s",source,nodetable,"1"))
#Filling the new "NodeSource" column with the source
}
genedisparams_scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=%1$s table=%2$s type=string","WikiPathways",nodetable))
commandsRun(sprintf("table create column columnName=%1$s table=%2$s type=string","DisGeNET",nodetable))
commandsRun(sprintf("table create column columnName=%1$s table=%2$s type=string","PharmGKB",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=%3$s",source,nodetable,"1"))
#Filling the new "NodeSource" column with the source
}
genedisparams_scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=PharmGKB table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=%3$s",source,nodetable,"1"))
#Filling the new "NodeSource" column with the source
}
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=PharmGKB table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new "NodeSource" column with the source
}
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=PharmGKB table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new "NodeSource" column with the source
}
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
getpathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% c("Homo sapiens","Rattus norvegicus","Mus musculus"))
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=PharmGKB table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=PharmGKB table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
}
genedisparams.scz.df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
genedisparams.scz.df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams.scz.df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
#Importing networks from DisGeNET
wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
sczcnv <- sapply(wpids, function(k) paste0("WP",k))
getPathways.wp("Schizophrenia")
getPathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% c("Homo sapiens","Rattus norvegicus","Mus musculus"))
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
getPathways.wp("Schizophrenia")
lapply(c(Schizophrenia_wpids,sczcnv), import)
networklist.dup <- getNetworkList()
dup.filter <- function(input,suffix) {
filtered_list <- input[substr(input, nchar(input) - 1,nchar(input))==suffix]
}
duplicates <- dup.filter(networklist.dup,"_1")
#Getting duplicate networks (Cytoscape marks duplicate networks with a "_1" suffix to the network name)
delete.dupes <- function(nw) {
setCurrentNetwork(nw)
deleteNetwork()
}
lapply(duplicates,delete.dupes)
networklist <- getNetworkList()
setCurrentNetwork(networklist[[1]])
for(i in 1:length(networklist)) {
current <- getNetworkName()
mergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union")
}
#Looping through the network list to merge all currently open networks with each other, creating one large unified network
renameNetwork("Schizophrenia supernetwork")
networklist <- getNetworkList()
snw_scz <- getNetworkName()
#Getting the name of the unified network to preserve it from deletion
lapply(networklist[networklist != snw_scz],deleteNetwork)
