scz_snw_string_go_aop <- getNetworkName()
commandsRun(sprintf('table export options=CSV outputFile=%s table="SCZ_SNW_STRING_clustered_GO_AOP default  node"',paste0(other_savepath,"SCZ_SNW_STRING_GO_AOP default node","_",tag)))
#Exporting the network table
scz_snw_string_go_aop_node <- read.csv(file=paste0(other_savepath,"SCZ_SNW_STRING_GO_AOP default node","_",tag,".csv"),header=TRUE)
#Reading the exported table as Cytoscape object
aop_associated_genes <- scz_snw_string_go_aop_node[!(scz_snw_string_go_aop_node$KEid == ""), , drop=FALSE]
#Getting which rows (=gene nodes) have info from AOP-Wiki associated to them
renameNetwork(paste0(getNetworkName(),"_",tag))
summary_go_terms <- read.delim(paste0(getwd(),"/Data/summary_go_terms.txt"),header=TRUE,sep="\t",quote="")
#Loading cluster titles based on GO terms
aop_associated_genes <- merge(aop_associated_genes,summary_go_terms,"gLayCluster")
separate_aoptitles <- separate_rows(aop_associated_genes,AOPtitle,sep="; ")
aop_freq_table <- table(separate_aoptitles$AOPtitle)
aop_freq_df <- as.data.frame(aop_freq_table)
add_attributes <- separate_aoptitles %>%
group_by(AOPtitle) %>%
summarise (AOPEnsembl = paste(Ensembl,collapse="; "),
AOPgenename = paste(Name2, collapse="; "),
AOPsummary_go_term = paste(summary_term, collapse="; "))
names(aop_freq_df) <- c("AOP_title","AOP_frequency")
aop_freq_df_full <- merge(aop_freq_df, add_attributes,"AOPtitle")
#Counting how often which AOPs are associated with all genes
separate_aotitles <- separate_rows(aop_associated_genes,AOtitle,sep="; ")
ao_freq_table <- table(separate_aotitles$AOtitle)
ao_freq_df <- as.data.frame(ao_freq_table)
add_attributes <- separate_aotitles %>%
group_by(AOtitle) %>%
summarise (AOEnsembl = paste(Ensembl,collapse="; "),
AOgenename = paste(Name2, collapse="; "),
AOsummary_go_term = paste(summary_term, collapse="; "))
names(ao_freq_df) <- c("AO_title","AO_frequency")
ao_freq_df_full <- merge(ao_freq_df, add_attributes,"AOtitle")
#Counting how often which AOs are associated with all genes
separate_ketitles <- separate_rows(aop_associated_genes,KEtitle,sep="; ")
ke_freq_table <- table(separate_ketitles$KEtitle)
ke_freq_df <- as.data.frame(ke_freq_table)
add_attributes <- separate_ketitles %>%
group_by(KEtitle) %>%
summarise (KEEnsembl = paste(Ensembl,collapse="; "),
KEgenename = paste(Name2, collapse="; "),
KEsummary_go_term = paste(summary_term, collapse="; "))
names(ke_freq_df) <- c("KE_title","KE_frequency")
ke_freq_df_full <- merge(ke_freq_df, add_attributes,"KEtitle")
#Counting how often which KEs are associated with all genes
aop_associated_genes_freq <- bind_rows(aop_freq_df_full,ao_freq_df_full,ke_freq_df_full)
aop_link <- list()
variables <- ls()
#Getting a list of variables defined within the aopprocess function
#append_suffix <- function(variable, suffix) {
#assign(paste0(variable,"_",suffix), get(variable), envir = .GlobalEnv)
#}
#Defining a function to add a suffix to the variables created within the aopprocess function
for (variable in variables) {
aop_link[[variable]] <- get(variable)
}
return(aop_link)
#Appending the given tag to every produced variable within the aopprocess function
#Saving the resulting network
}
aoplink_selected <- aopprocess("AO_KE_Ensembl_query.txt","selected")
aoplink_selected <- aopprocess("AO_KE_Ensembl_query.txt","selected")
aoplink_selected <- aopprocess("AO_KE_Ensembl_query.txt","selected")
aopprocess <- function(input,tag) {
if (!"SCZ_SNW_STRING_clustered_GO" %in% getNetworkList()) {
importNetworkFromFile(file=paste0(nw_savepath,"SCZ_SNW_STRING_clustered_GO.cx"))
commandsRun('table delete column column="gLayCluster.2" table="SCZ_SNW_STRING_clustered_GO default node')
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
#N_nodes is only generated for 'valid' clusters, so good column to filter by
invertNodeSelection()
deleteSelectedNodes()
#Inverting the selection and deleting these nodes: now, the network contains only the nodes that make up the clusters fed into the GO analysis
#Nodes not associated to a large enough cluster/GO term are likely not involved in any significant SCZ-contributing way
#The idea is to link GO terms (formed by clusters/genes) to risk factors, so it wouldn't make sense to also link non-cluster/GO associated nodes
}
else {
commandsRun('table delete column column="gLayCluster.2" table="SCZ_SNW_STRING_clustered_GO default node')
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
#N_nodes is only generated for 'valid' clusters, so good column to filter by
invertNodeSelection()
deleteSelectedNodes()
#Inverting the selection and deleting these nodes: now, the network contains only the nodes that make up the clusters fed into the GO analysis
#Nodes not associated to a large enough cluster/GO term are likely not involved in any significant SCZ-contributing way
#The idea is to link GO terms (formed by clusters/genes) to risk factors, so it wouldn't make sense to also link non-cluster/GO associated nodes
}
#Reimporting the network with GO information back to Cytoscape if needed
#Running aopprocess causes all changes to be applied to the GO network
#Running aopprocess a second time with other parameters would thus compound changes into the same network which is undesired
sparqlquery("AOP-Wiki",input,"keensgpairs")
#Querying AOP-Wiki for a list of all KEs and associated genes. KEs must be contained in an AOP that has an AO from a list of selected AOs
#Explicity listing keensgpairs so that it is caught by ls()
for (i in 1:ncol(keensgpairs)) {
for (j in 1:nrow(keensgpairs)) {
keensgpairs[j, i] <- gsub('"', '', keensgpairs[j, i])
}
}
#Removing quotation marks from the df
separate_keensgpairs <- separate_rows(keensgpairs,Ensembl,sep="; ")
#Dividing comma-separated Ensembl IDs into distinct rows
keensgpairs_byensg <- separate_keensgpairs %>%
group_by(Ensembl) %>%
summarise(KEid = paste(KEid, collapse="; "),
KEtitle = paste(KEtitle, collapse="; "),
AOid = paste(AOid, collapse="; "),
AOtitle = paste(AOtitle, collapse = "; "),
AOPid = paste(AOPid, collapse="; "),
AOPtitle =paste(AOPtitle, collapse="; "))
#Concateinating other variables based on unique Ensembl ID to get list of associated KEs, AOs, and AOPs per gene
keensgpairs_byensg_save <- paste0(getwd(),sprintf("/Data/AOP-Wiki/keensgpairs_byensg_%s.tsv",tag))
#Defining savepath for newly generated df
write.table(keensgpairs_byensg, file=keensgpairs_byensg_save,quote=FALSE, sep="\t", row.names=FALSE)
#Saving df containing gene-KE-AO-AOP associations to file as tsv for Cytoscape import
commandsRun(sprintf('table import file dataTypeTargetforNetworkCollection="Node Table Columns" delimiters=\\t file=%s firstRowAsColumnNames=true keyColumnForMapping="Ensembl" keyColumnIndex=1 startLoadRow=1',keensgpairs_byensg_save))
#Importing the gene-KE-AO-AOP table to Cytoscape as table add AOP-Wiki info as node attributes
renameNetwork(paste0(getNetworkName(),"_AOP"))
scz_snw_string_go_aop <- getNetworkName()
commandsRun(sprintf('table export options=CSV outputFile=%s table="SCZ_SNW_STRING_clustered_GO_AOP default  node"',paste0(other_savepath,"SCZ_SNW_STRING_GO_AOP default node","_",tag)))
#Exporting the network table
scz_snw_string_go_aop_node <- read.csv(file=paste0(other_savepath,"SCZ_SNW_STRING_GO_AOP default node","_",tag,".csv"),header=TRUE)
#Reading the exported table as Cytoscape object
aop_associated_genes <- scz_snw_string_go_aop_node[!(scz_snw_string_go_aop_node$KEid == ""), , drop=FALSE]
#Getting which rows (=gene nodes) have info from AOP-Wiki associated to them
renameNetwork(paste0(getNetworkName(),"_",tag))
summary_go_terms <- read.delim(paste0(getwd(),"/Data/summary_go_terms.txt"),header=TRUE,sep="\t",quote="")
#Loading cluster titles based on GO terms
aop_associated_genes <- merge(aop_associated_genes,summary_go_terms,"gLayCluster")
separate_aoptitles <- separate_rows(aop_associated_genes,AOPtitle,sep="; ")
aop_freq_table <- table(separate_aoptitles$AOPtitle)
aop_freq_df <- as.data.frame(aop_freq_table)
add_attributes <- separate_aoptitles %>%
group_by(AOPtitle) %>%
summarise (AOPEnsembl = paste(Ensembl,collapse="; "),
AOPgenename = paste(Name2, collapse="; "),
AOPsummary_go_term = paste(summary_term, collapse="; "))
names(aop_freq_df) <- c("AOP_title","AOP_frequency")
aop_freq_df_full <- merge(aop_freq_df, add_attributes,"AOP_title")
#Counting how often which AOPs are associated with all genes
separate_aotitles <- separate_rows(aop_associated_genes,AOtitle,sep="; ")
ao_freq_table <- table(separate_aotitles$AOtitle)
ao_freq_df <- as.data.frame(ao_freq_table)
add_attributes <- separate_aotitles %>%
group_by(AOtitle) %>%
summarise (AOEnsembl = paste(Ensembl,collapse="; "),
AOgenename = paste(Name2, collapse="; "),
AOsummary_go_term = paste(summary_term, collapse="; "))
names(ao_freq_df) <- c("AO_title","AO_frequency")
ao_freq_df_full <- merge(ao_freq_df, add_attributes,"AO_title")
#Counting how often which AOs are associated with all genes
separate_ketitles <- separate_rows(aop_associated_genes,KEtitle,sep="; ")
ke_freq_table <- table(separate_ketitles$KEtitle)
ke_freq_df <- as.data.frame(ke_freq_table)
add_attributes <- separate_ketitles %>%
group_by(KEtitle) %>%
summarise (KEEnsembl = paste(Ensembl,collapse="; "),
KEgenename = paste(Name2, collapse="; "),
KEsummary_go_term = paste(summary_term, collapse="; "))
names(ke_freq_df) <- c("KE_title","KE_frequency")
ke_freq_df_full <- merge(ke_freq_df, add_attributes,"KE_title")
#Counting how often which KEs are associated with all genes
aop_associated_genes_freq <- bind_rows(aop_freq_df_full,ao_freq_df_full,ke_freq_df_full)
aop_link <- list()
variables <- ls()
#Getting a list of variables defined within the aopprocess function
#append_suffix <- function(variable, suffix) {
#assign(paste0(variable,"_",suffix), get(variable), envir = .GlobalEnv)
#}
#Defining a function to add a suffix to the variables created within the aopprocess function
for (variable in variables) {
aop_link[[variable]] <- get(variable)
}
return(aop_link)
#Appending the given tag to every produced variable within the aopprocess function
#Saving the resulting network
}
aoplink_selected <- aopprocess("AO_KE_Ensembl_query.txt","selected")
aopprocess <- function(input,tag) {
if (!"SCZ_SNW_STRING_clustered_GO" %in% getNetworkList()) {
importNetworkFromFile(file=paste0(nw_savepath,"SCZ_SNW_STRING_clustered_GO.cx"))
commandsRun('table delete column column="gLayCluster.2" table="SCZ_SNW_STRING_clustered_GO default node')
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
#N_nodes is only generated for 'valid' clusters, so good column to filter by
invertNodeSelection()
deleteSelectedNodes()
#Inverting the selection and deleting these nodes: now, the network contains only the nodes that make up the clusters fed into the GO analysis
#Nodes not associated to a large enough cluster/GO term are likely not involved in any significant SCZ-contributing way
#The idea is to link GO terms (formed by clusters/genes) to risk factors, so it wouldn't make sense to also link non-cluster/GO associated nodes
}
else {
commandsRun('table delete column column="gLayCluster.2" table="SCZ_SNW_STRING_clustered_GO default node')
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
#N_nodes is only generated for 'valid' clusters, so good column to filter by
invertNodeSelection()
deleteSelectedNodes()
#Inverting the selection and deleting these nodes: now, the network contains only the nodes that make up the clusters fed into the GO analysis
#Nodes not associated to a large enough cluster/GO term are likely not involved in any significant SCZ-contributing way
#The idea is to link GO terms (formed by clusters/genes) to risk factors, so it wouldn't make sense to also link non-cluster/GO associated nodes
}
#Reimporting the network with GO information back to Cytoscape if needed
#Running aopprocess causes all changes to be applied to the GO network
#Running aopprocess a second time with other parameters would thus compound changes into the same network which is undesired
sparqlquery("AOP-Wiki",input,"keensgpairs")
#Querying AOP-Wiki for a list of all KEs and associated genes. KEs must be contained in an AOP that has an AO from a list of selected AOs
#Explicity listing keensgpairs so that it is caught by ls()
for (i in 1:ncol(keensgpairs)) {
for (j in 1:nrow(keensgpairs)) {
keensgpairs[j, i] <- gsub('"', '', keensgpairs[j, i])
}
}
#Removing quotation marks from the df
separate_keensgpairs <- separate_rows(keensgpairs,Ensembl,sep="; ")
#Dividing comma-separated Ensembl IDs into distinct rows
keensgpairs_byensg <- separate_keensgpairs %>%
group_by(Ensembl) %>%
summarise(KEid = paste(KEid, collapse="; "),
KE_title = paste(KEtitle, collapse="; "),
AOid = paste(AOid, collapse="; "),
AO_title = paste(AOtitle, collapse = "; "),
AOPid = paste(AOPid, collapse="; "),
AOP_title =paste(AOPtitle, collapse="; "))
#Concateinating other variables based on unique Ensembl ID to get list of associated KEs, AOs, and AOPs per gene
keensgpairs_byensg_save <- paste0(getwd(),sprintf("/Data/AOP-Wiki/keensgpairs_byensg_%s.tsv",tag))
#Defining savepath for newly generated df
write.table(keensgpairs_byensg, file=keensgpairs_byensg_save,quote=FALSE, sep="\t", row.names=FALSE)
#Saving df containing gene-KE-AO-AOP associations to file as tsv for Cytoscape import
commandsRun(sprintf('table import file dataTypeTargetforNetworkCollection="Node Table Columns" delimiters=\\t file=%s firstRowAsColumnNames=true keyColumnForMapping="Ensembl" keyColumnIndex=1 startLoadRow=1',keensgpairs_byensg_save))
#Importing the gene-KE-AO-AOP table to Cytoscape as table add AOP-Wiki info as node attributes
renameNetwork(paste0(getNetworkName(),"_AOP"))
scz_snw_string_go_aop <- getNetworkName()
commandsRun(sprintf('table export options=CSV outputFile=%s table="SCZ_SNW_STRING_clustered_GO_AOP default  node"',paste0(other_savepath,"SCZ_SNW_STRING_GO_AOP default node","_",tag)))
#Exporting the network table
scz_snw_string_go_aop_node <- read.csv(file=paste0(other_savepath,"SCZ_SNW_STRING_GO_AOP default node","_",tag,".csv"),header=TRUE)
#Reading the exported table as Cytoscape object
aop_associated_genes <- scz_snw_string_go_aop_node[!(scz_snw_string_go_aop_node$KEid == ""), , drop=FALSE]
#Getting which rows (=gene nodes) have info from AOP-Wiki associated to them
renameNetwork(paste0(getNetworkName(),"_",tag))
summary_go_terms <- read.delim(paste0(getwd(),"/Data/summary_go_terms.txt"),header=TRUE,sep="\t",quote="")
#Loading cluster titles based on GO terms
aop_associated_genes <- merge(aop_associated_genes,summary_go_terms,"gLayCluster")
separate_aoptitles <- separate_rows(aop_associated_genes,AOP_title,sep="; ")
aop_freq_table <- table(separate_aoptitles$AOP_title)
aop_freq_df <- as.data.frame(aop_freq_table)
add_attributes <- separate_aoptitles %>%
group_by(AOPtitle) %>%
summarise (AOPEnsembl = paste(Ensembl,collapse="; "),
AOPgenename = paste(Name2, collapse="; "),
AOPsummary_go_term = paste(summary_term, collapse="; "))
names(aop_freq_df) <- c("AOP_title","AOP_frequency")
aop_freq_df_full <- merge(aop_freq_df, add_attributes,"AOP_title")
#Counting how often which AOPs are associated with all genes
separate_aotitles <- separate_rows(aop_associated_genes,AO_title,sep="; ")
ao_freq_table <- table(separate_aotitles$AO_title)
ao_freq_df <- as.data.frame(ao_freq_table)
add_attributes <- separate_aotitles %>%
group_by(AOtitle) %>%
summarise (AOEnsembl = paste(Ensembl,collapse="; "),
AOgenename = paste(Name2, collapse="; "),
AOsummary_go_term = paste(summary_term, collapse="; "))
names(ao_freq_df) <- c("AO_title","AO_frequency")
ao_freq_df_full <- merge(ao_freq_df, add_attributes,"AO_title")
#Counting how often which AOs are associated with all genes
separate_ketitles <- separate_rows(aop_associated_genes,KE_title,sep="; ")
ke_freq_table <- table(separate_ketitles$KE_title)
ke_freq_df <- as.data.frame(ke_freq_table)
add_attributes <- separate_ketitles %>%
group_by(KEtitle) %>%
summarise (KEEnsembl = paste(Ensembl,collapse="; "),
KEgenename = paste(Name2, collapse="; "),
KEsummary_go_term = paste(summary_term, collapse="; "))
names(ke_freq_df) <- c("KE_title","KE_frequency")
ke_freq_df_full <- merge(ke_freq_df, add_attributes,"KE_title")
#Counting how often which KEs are associated with all genes
aop_associated_genes_freq <- bind_rows(aop_freq_df_full,ao_freq_df_full,ke_freq_df_full)
aop_link <- list()
variables <- ls()
#Getting a list of variables defined within the aopprocess function
#append_suffix <- function(variable, suffix) {
#assign(paste0(variable,"_",suffix), get(variable), envir = .GlobalEnv)
#}
#Defining a function to add a suffix to the variables created within the aopprocess function
for (variable in variables) {
aop_link[[variable]] <- get(variable)
}
return(aop_link)
#Appending the given tag to every produced variable within the aopprocess function
#Saving the resulting network
}
aoplink_selected <- aopprocess("AO_KE_Ensembl_query.txt","selected")
aopprocess <- function(input,tag) {
if (!"SCZ_SNW_STRING_clustered_GO" %in% getNetworkList()) {
importNetworkFromFile(file=paste0(nw_savepath,"SCZ_SNW_STRING_clustered_GO.cx"))
commandsRun('table delete column column="gLayCluster.2" table="SCZ_SNW_STRING_clustered_GO default node')
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
#N_nodes is only generated for 'valid' clusters, so good column to filter by
invertNodeSelection()
deleteSelectedNodes()
#Inverting the selection and deleting these nodes: now, the network contains only the nodes that make up the clusters fed into the GO analysis
#Nodes not associated to a large enough cluster/GO term are likely not involved in any significant SCZ-contributing way
#The idea is to link GO terms (formed by clusters/genes) to risk factors, so it wouldn't make sense to also link non-cluster/GO associated nodes
}
else {
commandsRun('table delete column column="gLayCluster.2" table="SCZ_SNW_STRING_clustered_GO default node')
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
#N_nodes is only generated for 'valid' clusters, so good column to filter by
invertNodeSelection()
deleteSelectedNodes()
#Inverting the selection and deleting these nodes: now, the network contains only the nodes that make up the clusters fed into the GO analysis
#Nodes not associated to a large enough cluster/GO term are likely not involved in any significant SCZ-contributing way
#The idea is to link GO terms (formed by clusters/genes) to risk factors, so it wouldn't make sense to also link non-cluster/GO associated nodes
}
#Reimporting the network with GO information back to Cytoscape if needed
#Running aopprocess causes all changes to be applied to the GO network
#Running aopprocess a second time with other parameters would thus compound changes into the same network which is undesired
sparqlquery("AOP-Wiki",input,"keensgpairs")
#Querying AOP-Wiki for a list of all KEs and associated genes. KEs must be contained in an AOP that has an AO from a list of selected AOs
#Explicity listing keensgpairs so that it is caught by ls()
for (i in 1:ncol(keensgpairs)) {
for (j in 1:nrow(keensgpairs)) {
keensgpairs[j, i] <- gsub('"', '', keensgpairs[j, i])
}
}
#Removing quotation marks from the df
separate_keensgpairs <- separate_rows(keensgpairs,Ensembl,sep="; ")
#Dividing comma-separated Ensembl IDs into distinct rows
keensgpairs_byensg <- separate_keensgpairs %>%
group_by(Ensembl) %>%
summarise(KEid = paste(KEid, collapse="; "),
KE_title = paste(KEtitle, collapse="; "),
AOid = paste(AOid, collapse="; "),
AO_title = paste(AOtitle, collapse = "; "),
AOPid = paste(AOPid, collapse="; "),
AOP_title =paste(AOPtitle, collapse="; "))
#Concateinating other variables based on unique Ensembl ID to get list of associated KEs, AOs, and AOPs per gene
keensgpairs_byensg_save <- paste0(getwd(),sprintf("/Data/AOP-Wiki/keensgpairs_byensg_%s.tsv",tag))
#Defining savepath for newly generated df
write.table(keensgpairs_byensg, file=keensgpairs_byensg_save,quote=FALSE, sep="\t", row.names=FALSE)
#Saving df containing gene-KE-AO-AOP associations to file as tsv for Cytoscape import
commandsRun(sprintf('table import file dataTypeTargetforNetworkCollection="Node Table Columns" delimiters=\\t file=%s firstRowAsColumnNames=true keyColumnForMapping="Ensembl" keyColumnIndex=1 startLoadRow=1',keensgpairs_byensg_save))
#Importing the gene-KE-AO-AOP table to Cytoscape as table add AOP-Wiki info as node attributes
renameNetwork(paste0(getNetworkName(),"_AOP"))
scz_snw_string_go_aop <- getNetworkName()
commandsRun(sprintf('table export options=CSV outputFile=%s table="SCZ_SNW_STRING_clustered_GO_AOP default  node"',paste0(other_savepath,"SCZ_SNW_STRING_GO_AOP default node","_",tag)))
#Exporting the network table
scz_snw_string_go_aop_node <- read.csv(file=paste0(other_savepath,"SCZ_SNW_STRING_GO_AOP default node","_",tag,".csv"),header=TRUE)
#Reading the exported table as Cytoscape object
aop_associated_genes <- scz_snw_string_go_aop_node[!(scz_snw_string_go_aop_node$KEid == ""), , drop=FALSE]
#Getting which rows (=gene nodes) have info from AOP-Wiki associated to them
renameNetwork(paste0(getNetworkName(),"_",tag))
summary_go_terms <- read.delim(paste0(getwd(),"/Data/summary_go_terms.txt"),header=TRUE,sep="\t",quote="")
#Loading cluster titles based on GO terms
aop_associated_genes <- merge(aop_associated_genes,summary_go_terms,"gLayCluster")
separate_aoptitles <- separate_rows(aop_associated_genes,AOP_title,sep="; ")
aop_freq_table <- table(separate_aoptitles$AOP_title)
aop_freq_df <- as.data.frame(aop_freq_table)
add_attributes <- separate_aoptitles %>%
group_by(AOP_title) %>%
summarise (AOPEnsembl = paste(Ensembl,collapse="; "),
AOPgenename = paste(Name2, collapse="; "),
AOPsummary_go_term = paste(summary_term, collapse="; "))
names(aop_freq_df) <- c("AOP_title","AOP_frequency")
aop_freq_df_full <- merge(aop_freq_df, add_attributes,"AOP_title")
#Counting how often which AOPs are associated with all genes
separate_aotitles <- separate_rows(aop_associated_genes,AO_title,sep="; ")
ao_freq_table <- table(separate_aotitles$AO_title)
ao_freq_df <- as.data.frame(ao_freq_table)
add_attributes <- separate_aotitles %>%
group_by(AO_title) %>%
summarise (AOEnsembl = paste(Ensembl,collapse="; "),
AOgenename = paste(Name2, collapse="; "),
AOsummary_go_term = paste(summary_term, collapse="; "))
names(ao_freq_df) <- c("AO_title","AO_frequency")
ao_freq_df_full <- merge(ao_freq_df, add_attributes,"AO_title")
#Counting how often which AOs are associated with all genes
separate_ketitles <- separate_rows(aop_associated_genes,KE_title,sep="; ")
ke_freq_table <- table(separate_ketitles$KE_title)
ke_freq_df <- as.data.frame(ke_freq_table)
add_attributes <- separate_ketitles %>%
group_by(KE_title) %>%
summarise (KEEnsembl = paste(Ensembl,collapse="; "),
KEgenename = paste(Name2, collapse="; "),
KEsummary_go_term = paste(summary_term, collapse="; "))
names(ke_freq_df) <- c("KE_title","KE_frequency")
ke_freq_df_full <- merge(ke_freq_df, add_attributes,"KE_title")
#Counting how often which KEs are associated with all genes
aop_associated_genes_freq <- bind_rows(aop_freq_df_full,ao_freq_df_full,ke_freq_df_full)
aop_link <- list()
variables <- ls()
#Getting a list of variables defined within the aopprocess function
#append_suffix <- function(variable, suffix) {
#assign(paste0(variable,"_",suffix), get(variable), envir = .GlobalEnv)
#}
#Defining a function to add a suffix to the variables created within the aopprocess function
for (variable in variables) {
aop_link[[variable]] <- get(variable)
}
return(aop_link)
#Appending the given tag to every produced variable within the aopprocess function
#Saving the resulting network
}
aoplink_selected <- aopprocess("AO_KE_Ensembl_query.txt","selected")
aoplink_all <- aopprocess("all_AO_KE_Ensembl_query.txt","all")
selected_freq_df <- aoplink_selected$aop_associated_genes_freq
View(selected_freq_df)
cutoff <- quantile(selected_freq_df$AOP_frequency, probs=0.75)
cutoff <- quantile(selected_freq_df$AOP_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for AOP frequency (top 25% most frequent)
topquarter_aop <- selected_freq_df[selected_freq_df$AOP_frequency >= cutoff,]
View(topquarter_aop)
#Defining cutoff for AOP frequency (top 25% most frequent)
topquarter_aop <- selected_freq_df[selected_freq_df$AOP_frequency >= cutoff,1:5]
View(topquarter_aop)
#Defining cutoff for AOP frequency (top 25% most frequent)
topquarter_aop <- selected_freq_df[selected_freq_df$AOP_frequency >= cutoff & !is.na(selected_freq_df),1:5]
View(topquarter_aop)
#Defining cutoff for AOP frequency (top 25% most frequent)
topquarter_aop <- selected_freq_df[selected_freq_df$AOP_frequency >= cutoff & !is.na(selected_freq_df),1:5,drop=FALSE]
#Defining cutoff for AOP frequency (top 25% most frequent)
topquarter_aop <- selected_freq_df[selected_freq_df$AOP_frequency >= cutoff & !is.na(selected_freq_df$AOP_frequency),1:5,drop=FALSE]
View(topquarter_aop)
cutoff_ao <- quantile(selected_freq_df$AO_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for AOP frequency (top 25% most frequent)
topquarter_ao <- selected_freq_df[selected_freq_df$AO_frequency >= cutoff_ao & !is.na(selected_freq_df$AO_frequency),6:10,drop=FALSE]
View(topquarter_ao)
View(aoplink_all)
View(aoplink_selected)
gettop <- function(input) {
freq_df <- input$aop_associated_genes_freq
cutoff_aop <- quantile(freq_df$AOP_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for AOP frequency (top 25% most frequent)
topquarter_aop <- freq_df[freq_df$AOP_frequency >= cutoff_aop & !is.na(freq_df$AOP_frequency),1:5,drop=FALSE]
#Selecting the top 25% most frequently matched with AOPs and associated information
cutoff_ao <- quantile(freq_df$AO_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for AO frequency (top 25% most frequent)
topquarter_ao <- freq_df[freq_df$AO_frequency >= cutoff_ao & !is.na(freq_df$AO_frequency),6:10,drop=FALSE]
#Selecting the top 25% most frequently matched with AOs and associated information
cutoff_ke <- quantile(freq_df$KE_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for KE frequency (top 25% most frequent)
topquarter_ke <- freq_df[freq_df$KE_frequency >= cutoff_ke & !is.na(freq_df$KE_frequency),11:15,drop=FALSE]
#Selecting the top 25% most frequently matched with KEs and associated information
top_aopwiki <- list(topquarter_aop,topquarter_ao,topquarter_ke)
}
top_selected <- gettop(aoplink_selected)
View(top_selected)
gettop <- function(input) {
freq_df <- input$aop_associated_genes_freq
cutoff_aop <- quantile(freq_df$AOP_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for AOP frequency (top 25% most frequent)
topquarter_aop <- freq_df[freq_df$AOP_frequency >= cutoff_aop & !is.na(freq_df$AOP_frequency),1:5,drop=FALSE]
#Selecting the top 25% most frequently matched with AOPs and associated information
cutoff_ao <- quantile(freq_df$AO_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for AO frequency (top 25% most frequent)
topquarter_ao <- freq_df[freq_df$AO_frequency >= cutoff_ao & !is.na(freq_df$AO_frequency),6:10,drop=FALSE]
#Selecting the top 25% most frequently matched with AOs and associated information
cutoff_ke <- quantile(freq_df$KE_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for KE frequency (top 25% most frequent)
topquarter_ke <- freq_df[freq_df$KE_frequency >= cutoff_ke & !is.na(freq_df$KE_frequency),11:15,drop=FALSE]
#Selecting the top 25% most frequently matched with KEs and associated information
top_aopwiki <- list(topquarter_aop=topquarter_aop,topquarter_ao=topquarter_ao,topquarter_ke=topquarter_ke)
}
top_selected <- gettop(aoplink_selected)
View(top_selected)
top_all <- gettop(aoplink_all)
View(top_all)
View(top_all)
top_selected[["topquarter_aop"]]
View(top_selected$topquarter_aop)
