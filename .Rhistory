keaoppairs <- keensgpairs[keensgpairs$KEid %in% input$KEid,c("KEid","AOPid")]
#For top quarter KEs, get which AOPs these are taken from from result of initial AOP-Wiki query
keaoppairs <- separate_rows(keaoppairs,AOPid,sep="; ")
sparqlquery("AOP-Wiki","aopmap.txt","aopmap")
#Running query to get AOPid-title mappings
for (i in 1:ncol(aopmap)) {
for (j in 1:nrow(aopmap)) {
aopmap[j, i] <- gsub('"', '', aopmap[j, i])
}
}
#Removing quotation marks from df
keaoppairs <- merge(keaoppairs,aopmap,by="AOPid",all.x=FALSE)
#Mapping AOPids to AOPtitles using mapping file
keaoppairs <- keaoppairs %>%
rename(KEid_target = KEid,
AOPid_source = AOPid)
#Renaming columns in preparation for import
keaoppairs$KEid <- keaoppairs$KEid_target
keaoppairs$AOPid <- keaoppairs$AOPid_source
#Creating duplicate columns of KEid and AOPid to be used as source and target attributes
#This allows new columns in the network to easily select AOP and KE nodes separately etc.
#Without this, both KE and AOP nodes are stored in the 'names' column due to how Cytoscape import works
keaoppairs <- keaoppairs[,c("KEid_target","KEid","AOPid_source","AOPid","AOPtitle")]
#Reordering columns
write.table(keaoppairs,file=paste0(other_savepath,sprintf("/keaoppairs%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
#Writing modified table to file
commandsRun(sprintf('network import file columnTypeList=t,ta,s,sa,sa delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList= -- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("/keaoppairs%s.tsv",sub("top","",deparse(substitute(input)))))))
#Importing as network
Sys.sleep(0.5)
renameNetwork(sprintf("Top quarter key events - AOPs%s",sub("top","",deparse(substitute(input)))))
}
# getkeaoppairs(top_selected)
# keaopnetwork_selected <- getNetworkName()
getkeaoppairs(top_all)
keaopnetwork_all <- getNetworkName()
getaopaopairs <- function(input) {
keaoppairs <- keensgpairs[keensgpairs$KEid %in% input$KEid,"AOPid"]
keaoppairs <- unique(separate_rows(keaoppairs,AOPid,sep="; "))
#For top quarter KEs, get which unique AOPs these are taken from
sparqlquery("AOP-Wiki","aopao.txt","aopao")
#Getting full list of which AOs are associated to which AOPs
aopaopairs <- aopao[aopao$AOPid %in% keaoppairs$AOPid,]
#Filtering AOP-AO list by AOPs associated with top quarter KEs
sparqlquery("AOP-Wiki","aopmap.txt","aopmap")
#Running query to get AOPid-title mappings
for (i in 1:ncol(aopmap)) {
for (j in 1:nrow(aopmap)) {
aopmap[j, i] <- gsub('"', '', aopmap[j, i])
}
}
#Removing quotation marks from df
aopaopairs <- merge(aopaopairs,aopmap,by="AOPid",all.x=FALSE)
#Mapping AOPids to AOPtitles using mapping file
sparqlquery("AOP-Wiki","aomap.txt","aomap")
for (i in 1:ncol(aomap)) {
for (j in 1:nrow(aomap)) {
aomap[j, i] <- gsub('"', '', aomap[j, i])
}
}
#Removing quotation marks from df
aopaopairs <- merge(aopaopairs,aomap,by="AOid",all.x=FALSE)
#Mapping AOids to AOtitles using mapping file
aopaopairs <- aopaopairs %>%
rename(AOPid_target = AOPid,
AOid_source = AOid)
#Renaming columns in preparation for import
aopaopairs$AOid <- aopaopairs$AOid_source
aopaopairs$AOPid <- aopaopairs$AOPid_target
#Creating duplicate columns of AOid and AOPid to be used as source and target attributes
#This allows new columns in the network to easily select AOid and AOPid nodes separately etc.
#Without this, both AO and AOP nodes are stored in the 'names' column due to how Cytoscape import works
aopaopairs$index <- NA
#Creating an empty placeholder column that is to be filled with copies of row values from the SUID column; explained more in mergeaop function later
#Must be created in df that then becomes a network, since creating a column using the Cytoscape command line will result in an 'invisible' column that cannot be used as key for merging tables
aopaopairs <- aopaopairs[,c("AOid_source","AOPid_target","AOid","AOtitle","AOPid","AOPtitle","index")]
#Reordering columns
write.table(aopaopairs,file=paste0(other_savepath,sprintf("/aopaopairs%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
#Writing modified table to file
commandsRun(sprintf('network import file columnTypeList=s,t,sa,sa,ta,ta,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList= -- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("/aopaopairs%s.tsv",sub("top","",deparse(substitute(input)))))))
#Importing table as network
Sys.sleep(0.5)
renameNetwork(sprintf("AOP-AO pairs for top AOPs in top quarter KEs%s",sub("top","",deparse(substitute(input)))))
}
# getaopaopairs(top_selected)
# aopaonetwork_selected <- getNetworkName()
getaopaopairs(top_all)
aopaonetwork_all <- getNetworkName()
mergeaop <- function (input){
aopaonetwork <- get(paste0("aopaonetwork_",input))
keaopnetwork <- get(paste0("keaopnetwork_", input))
kegenenetwork <- get(paste0("kegenenetwork_",input))
#Renaming variables to contain type of selection to correctly select previously generated objects
altmergeNetworks(sources=c(aopaonetwork,keaopnetwork),
title = "KE-AOP-AO merged network",
operation="union",
nodeKeys=c("AOPid","AOPid"))
renameNetwork(paste0("KE-AOP-AO merged network_",input))
#Merging the AOP-AO network to the KE-AOP network to extend KE-AOP associations with AOs
keaopaomerged <- getNetworkName()
altmergeNetworks(sources=c(keaopaomerged,kegenenetwork),
title="gene-KE-AOP-AO merged network",
operation="union",
nodeKeys=c("KEid","KEid"))
#Merging KE-AOP-AO associations with the KE-gene network to extend KE-gene associations with AOPs and AOs
renameNetwork(paste0("gene-KE-AOP-AO merged network_",input))
mapTableColumn("Ensembl","Human","Ensembl","HGNC")
#Generating HGNC names for gene nodes to improve readability
# renameTableColumn("HGNC","Name2")
#Renaming HGNC column to Name2 for consistency with SNW
commandsRun(sprintf('table set values columnName=index handleEquations=true rowList=all value="=$SUID" table=%s',paste0("gene-KE-AOP-AO merged network_",input," default  node")))
#Filling the  index column with node SUIDs
#SUIDs are always generated for each node but are not exported with the table, so they must first be transposed to a column that will be exported
commandsRun(sprintf('table export options=CSV outputFile="%s" table="%s"',paste0(other_savepath,paste0("gene-KE-AOP-AO merged network_",input," node")),paste0("gene-KE-AOP-AO merged network_",input," default  node")))
#Exporting the node table of the current network
nodetable <- read.table(paste0(other_savepath,paste0('gene-KE-AOP-AO merged network_',input," node.csv")), header=TRUE, sep=",")
#Reading the node table as R object
nodetable <- nodetable %>%
rowwise() %>%
mutate(label=paste(na.omit(c_across(all_of(c("KEtitle","AOPtitle","AOtitle","HGNC")))), collapse=""))
#Generating a new 'label' column that combines KEtitle, AOPtitle, AOtitle, and HGNC into one columns
#Since each node represents a different type of data (KE, AOP, AO, or gene), titles will never overlap
#Cytoscape visualisation is based on one column, thus labels need to all be stored in a single column for visualisation
nodetable <- nodetable %>%
rowwise() %>%
mutate(type = case_when(
str_detect(AOPid, "\\S") ~ "AOP",
str_detect(AOid, "\\S") ~ "AO",
str_detect(KEid, "\\S") ~ "KE",
str_detect(Ensembl, "\\S") ~ "gene",
TRUE ~ NA_character_
))
#Generating a new 'type' column indicating of which type (KE, AOP, AO, or gene) a node is
#Again for visualsation purposes - later used to determine color mapping of node based on type
write.table(nodetable, file=paste0(other_savepath,paste0("gene-KE-AOP-AO merged network_",input," node.tsv")),sep="\t",row.names = FALSE,quote = FALSE)
commandsRun(sprintf('table import file file=%s dataTypeTargetForNetworkCollection="Node Table Columns" delimiters=\\t keyColumnForMapping="index"  keyColumnIndex=7 startLoadRow=1 firstRowAsColumnNames=true',paste0(other_savepath,paste0("gene-KE-AOP-AO merged network_",input," node.tsv"))))
#Loading modified node table back to the network to include label and type columns
#In AOP-Wiki, KEs and AOs have the same type of URL, and some data may be considered an AO in one AOP and a KE in another
#The only column where every node has a value is 'name', but since the same URL (used for 'name') may designate two different types (AO or KE),
#using 'name' as key column for table reimport causes nodes with the same 'name' to be merged, even though they are different
#Therefore, SUID is used as key column as it is unique for every node
#Now, a datapoint that represents an AO in one AOP and a KE in another AOP is kept as two distinct nodes as desired
deleteTableColumn("shared.name")
#Deleting duplicate column
lapply(c(aopaonetwork,keaopnetwork,kegenenetwork,keaopaomerged),deleteNetwork)
#Deleting intermediary networks used to generate full gene-KE-AOP-AO network
}
mergeaop("all")
#Creating the full gene-KE-AOP-AO network with data from all AOs and associated AOPs and KEs in AOP-Wiki
exportNetwork(paste0(nw_savepath,"gene-KE-AOP-AO merged network_all"),"CX", overwriteFile=TRUE,network="gene-KE-AOP-AO merged network_all")
#Exporting the network
#mergeaop("selected")
#exportNetwork(paste0(nw_savepath,"gene-KE-AOP-AO merged network_selected"),"CX", overwriteFile=TRUE,network="gene-KE-AOP-AO merged network_selected")
end_section("AOP")
##SNW-AOP -----------------------------------------------------------------------------------------------------------------------------------------
importNetworkFromFile(paste0(nw_savepath,"SCZ_SNW_STRING_clustered_GO.cx"))
#Reimporting clustered supernetwork with GO results added
commandsRun('table delete column column="gLayCluster.2" table="SCZ_SNW_STRING_clustered_GO default node')
#Deleting duplicate gLayCluster column
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
#N_nodes is only generated for 'valid' clusters, so good column to filter by
invertNodeSelection()
deleteSelectedNodes()
#Inverting selection and deleting nodes that don't have GO results
commandsRun(sprintf('table export options=CSV outputFile=%s table="SCZ_SNW_STRING_clustered_GO default node"',paste0(other_savepath,"SCZ_SNW_STRING_clustered_GO node")))
#Exporting the node table from the clustered supernetwork with GO results
snw_node <- read.table(file=paste0(other_savepath,"SCZ_SNW_STRING_clustered_GO node.csv"),header=TRUE,sep=",")
deleteNetwork("SCZ_SNW_STRING_clustered_GO")
#Deleting the SNW again, was only imported to get node table
aopmerged_node <- read.table(file=paste0(other_savepath,"gene-KE-AOP-AO merged network_all node.tsv"),header=TRUE,sep="\t")
#Reading the node table of the merged AOP network
snw_node_aop <- snw_node[snw_node$Ensembl %in% aopmerged_node$Ensembl,]
#Selecting rows from snw_node_aop that have the same genes that are also found in the AOP network
remove_duplicates <- function(pathway_string) {
pathway_string %>%
str_split(";|, ") %>%     # Split the string by commas or semicolons
unlist() %>%              # Unlist the resulting list
unique() %>%              # Remove duplicates
paste(collapse = ", ")    # Collapse the unique elements back into a single string
}
#When merging WikiPathways node and edge networks, it's possible that there are semi-colon separated duplicates in PathwayID
#This function splits strings and removes duplicates for a more consistent and clean look
snw_node_aop$PathwayID <- sapply(snw_node_aop$PathwayID, remove_duplicates)
snw_node_aop_valid <- select(snw_node_aop,Ensembl, fromPublication,fromSTRING,fromWikiPathways,fromDisGeNET,gLayCluster,snpID,CNVassociated,PathwayID)
#Getting relevant columns for network construction
snw_node_aop_valid <- separate_rows(snw_node_aop_valid,PathwayID,sep=", ")
#Separating PathwayID rows to have one or multiple PathwayIDs per gene; one PathwayID per row
sparqlquery("WikiPathways","pathwaymap.txt","pathwaymap")
#Querying WikiPathways for all Pathway IDs and Pathway titles for mapping
pathwaymap$PathwayTitle <- sub("@en$","",pathwaymap$PathwayTitle)
pathwaymap$PathwayTitle <- gsub('"','',pathwaymap$PathwayTitle)
#Cleaning up mapping file by removing quotation marks and "@en" appendix of all rows
snw_node_aop_valid <- merge(snw_node_aop_valid,pathwaymap,by="PathwayID",all.x=TRUE)
#Adding PathwayTitle to the df to map pathway IDs to titles
snw_node_aop_valid[is.na(snw_node_aop_valid)] <- ""
#Replacing NA with empty for nicer look in Cytoscape
snw_node_aop_valid <- snw_node_aop_valid %>%
rename(Ensembl_source = Ensembl,
PathwayID_target = PathwayID)
#Renaming source and target cols for import
snw_node_aop_valid$Ensembl <- snw_node_aop_valid$Ensembl_source
snw_node_aop_valid$PathwayID <- snw_node_aop_valid$PathwayID_target
#Duplicating source and target cols for import
snw_node_aop_valid <- snw_node_aop_valid[,c("Ensembl_source","Ensembl","fromPublication","fromSTRING","fromDisGeNET","fromWikiPathways","gLayCluster","snpID","CNVassociated","PathwayID_target","PathwayID","PathwayTitle")]
#Reordering columns
write.table(snw_node_aop_valid, file=paste0(other_savepath,"snw_node_aop.tsv"), sep="\t", quote=FALSE, row.names=FALSE)
#Writing to file for Cytoscape import
commandsRun(sprintf('network import file columnTypeList=s,sa,sa,sa,sa,sa,sa,sa,sa,t,ta,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,"snw_node_aop.tsv")))
#Importing network to Cytoscape
Sys.sleep(1)
renameNetwork("Genes from AOP network with SNW attributes")
commandsRun(sprintf('table export options=CSV table="Genes from AOP network with SNW attributes default  node outputFile=%s ',paste0(other_savepath,"Genes from AOP network with SNW attributes node")))
#Exporting node table
snw_node_aop_valid_node <- read.table(file=paste0(other_savepath,"Genes from AOP network with SNW attributes node.csv"),header=TRUE,sep=",")
#Reading node table as R object
snw_node_aop_valid_node <- snw_node_aop_valid_node %>%
rowwise() %>%
mutate(label=paste(na.omit(c_across(all_of(c("PathwayTitle")))), collapse=""))
#Adding 'label' column for pathway nodes in preparation for merge with gene-AOP network
snw_node_aop_valid_node <- snw_node_aop_valid_node %>%
rowwise() %>%
mutate(type = case_when(
str_detect(PathwayID, "\\S") ~ "Pathway",
str_detect(Ensembl, "\\S") ~ "gene",
TRUE ~ NA_character_
))
#Adding 'type' column in preparation for merge with gene-AOP network
loadTableData(snw_node_aop_valid_node,data.key.column='name',table.key.column = 'name',table='node')
#Loading modified node table back to network
altmergeNetworks(sources=c("gene-KE-AOP-AO merged network_all","Genes from AOP network with SNW attributes"),
title="gene-KE-AOP-AO merged network with pathways",
operation="union",
nodeKeys=c("Ensembl","name"))
#Merging gene-KE-AOP-AO network with gene-pathway network
deleteTableColumn("shared.name")
exportNetwork(filename=paste0(other_savepath,"gene-KE-AO merged network with pathways"), type="CX", overwriteFile = TRUE)
##AOP VISUALISATION -------------------------------------------------------------------------------------------------------------------------------
createVisualStyle("AOP_vis")
setVisualStyle("AOP_vis")
#Creating and setting a new visual style for the AOP network
setNodeLabelMapping(
table.column="label",
style.name="AOP_vis"
)
#Setting node labels using dedicated node label column
setNodeColorMapping(
table.column = "type",
mapping.type="d",
table.column.values = c("AO","AOP","KE","gene","Pathway"),
colors=c("#FB6a4A","#FEB24C","#FA9FB5","#74C476","#76cdf3"),
style.name="AOP_vis"
)
#Setting node colors using dedicated type column
setNodeShapeDefault(
new.shape="ROUND_RECTANGLE",
style.name="AOP_vis"
)
setNodeSizeDefault (
new.size = "70",
style.name="AOP_vis"
)
setNodeFontSizeDefault (
new.size = "15",
style.name = "AOP_vis"
)
setEdgeSourceArrowShapeDefault(
new.shape = "DELTA",
style.name="AOP_vis"
)
setEdgeColorDefault(
new.color="#BCBCBC",
style.name="AOP_vis"
)
snw_scz_filtered_string_clustered_go
##RAW SNW VISUALISATION ---------------------------------------------------------------------------------------------------------------------------
importNetworkFromFile(paste0(nw_savepath,"SCZ_SNW_STRING_clustered_GO.cx"))
#Reimporting clustered supernetwork with GO results added
setCurrentNetwork(snw_scz_filtered_string_clustered_go)
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
#N_nodes is only generated for 'valid' clusters, so good column to filter by
invertNodeSelection()
deleteSelectedNodes()
#Inverting the selection and deleting these nodes: now, the network contains only the nodes that make up the clusters fed into the GO analysis
#Nodes not associated to a large enough cluster/GO term are likely not involved in any significant SCZ-contributing way
#The idea is to link GO terms (formed by clusters/genes)
#These changes to the visualization are essentially only visible when Cytoscape is set to always render details
#The network is big and not really organized besides clusters, the pie chart visualization that follows gives a much better impression
createVisualStyle("SNW_vis")
#Creating a new visual style that is subsequently customized
setVisualStyle("SNW_vis")
#Applying the new visual style
clusters <- as.character(unique(getTableColumns("node","gLayCluster"))$gLayCluster)
#gLayCluster column has many repeats of the clusters but a list of unique clusters is needed for table.column.values
clustercolors <- as.list(paletteColorRandom(length(clusters)))
#Generating a set of random colors based on the number of clusters in the SNW
#Make this constant, generate 100 colors or so once
#Then just select first N where N=Nclusters, so it stays flexible when more/fewer clusters are generated
#Much easier for legend too
setNodeColorMapping(table.column = "gLayCluster",
table.column.values=clusters,
colors=clustercolors,
mapping.type="d",
default.color="#FF5555",
style.name = "SNW_vis"
)
#table.column values must be defined like this as the gLayCluster column has many repeats of cluster numbers
#Random colors are generated per cluster based on the number of different clusters in the SNW
setEdgeLineWidthDefault(new.width = 0.5,
style.name = "SNW_vis")
#Reducing edge width to decrease hairball effect
setNodeLabelMapping(table.column = "Name2",
style.name="SNW_vis")
#Changing node labels to show HGNC name
commandsRun(sprintf("network import file columnTypeList='s,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa' file=%s firstRowAsColumnNames=true delimiters=\\t rootNetworkList=-- Create new network collection -- startLoadRow=1", paste0(getwd(),"/Data/GO-clusters-vis.tsv")))
#Importing the previoulsy generated table 'GO-clusters-vis' back to Cytoscape as new network
#Essential to use .tsv and importing as such to avoid conflicts generated by .csv - commas separating terms in a string are interpreted as different columns by Cytoscape
Sys.sleep(1)
renameNetwork("GO_Visualisation_SCZ_SNW")
loadTableData(
data = read.table(file=paste0(getwd(),"/Data/summary_go_terms.txt"),header=TRUE, sep ="\t"),
data.key.column = "gLayCluster",
table.key.column = "gLayCluster"
)
#Loading an additional column into the network containing manually created summaries of GO terms based on biological knowledge
commandsRun(sprintf("network import file columnTypeList='s,t,ea' file=%s firstRowAsColumnNames=true delimiters=\\t startLoadRow=1", paste0(getwd(),"/Data/match_df.tsv")))
#Loading edge information (i.e. intersections between GO terms for each cluster)
createVisualStyle(style.name = 'GO_vis')
#Creating a new visual style that is subsequently customized
setVisualStyle("GO_vis")
#Applying a basic visual style to the network
setNodeSizeMapping(
table.column = "N_nodes",
sizes = c(50,200),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting the node size proportional to the number of nodes making up a cluster, e.g. a cluster containing more nodes is bigger
setNodeCustomPieChart(
columns = c("DisGeNET_source","Publication_source","WikiPathways_CNV","WikiPathways_noCNV"),
colors = paletteColorBrewerPaired(value.count = 8),
style.name= "GO_vis"
)
#Turning nodes into pie charts showing which sources make up the proportions of the nodes in them
setNodeShapeDefault("ellipse",
style.name= "GO_vis")
setNodeFillOpacityDefault(
new.opacity = 0,
style.name= "GO_vis"
)
#Removing node background
setNodeBorderWidthDefault(
new.width=0.1,
style.name= "GO_vis"
)
setNodeBorderColorDefault (
style.name="GO_vis",
new.color = "#FFFFFF"
)
setNodeLabelMapping(
table.column = "summary_term",
style.name= "GO_vis"
)
#Changing node label to the processes/terms the nodes represent
setNodeFontSizeDefault(
new.size = 20,
style.name= "GO_vis"
)
#Setting node font size
setNodeLabelPositionDefault(
new.nodeAnchor = "S",
new.graphicAnchor = "N",
new.justification = "c",
new.xOffset = "0",
new.yOffset = "0",
style.name= "GO_vis"
)
#Moving label
setEdgeLineWidthMapping(
table.column = "GO_term_matches",
table.column.values = c(0,861),
widths = c(0,50),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting edge width proportional to number of shared GO terms
setEdgeOpacityDefault(
new.opacity = 70,
style.name= "GO_vis"
)
#Decreasing edge opacity
setEdgeColorDefault('#DD3497',
style.name= "GO_vis")
#Changing edge color
commandsRun('layout force-directed defaultEdgeWeight=0.5 defaultNodeMass=3 defaultSpringCoefficient=1e-4 edgeAttribute="GO_term_matches" defaultSpringLength=300 isDeterministic=true maxWeightCutoff=1.79769E308 minWeightCutoff=0E0 numIterations=200 type=Heuristic')
layoutNetwork('force-directed')
#Adding network layout
#scaleLayout(axis="Both Axes", scaleFactor = 0.95)
#Not working as requires Cytoscape v.3.10.2 which does not seem available yet?
renameNetwork("Supernetwork functional analysis")
deleteNetwork(network="GO_Visualisation_SCZ_SNW")
go_vis_nw <- getNetworkName()
exportNetwork(filename=paste0(nw_savepath,"GO_Visualisation_SCZ_SNW"),"CX",network=go_vis_nw,overwriteFile=TRUE)
fitContent()
View(go_list)
View(topterms_df)
commandsRun(sprintf("network import file columnTypeList='s,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa' file=%s firstRowAsColumnNames=true delimiters=\\t rootNetworkList=-- Create new network collection -- startLoadRow=1", paste0(getwd(),"/Data/GO-clusters-vis.tsv")))
#Importing the previoulsy generated table 'GO-clusters-vis' back to Cytoscape as new network
#Essential to use .tsv and importing as such to avoid conflicts generated by .csv - commas separating terms in a string are interpreted as different columns by Cytoscape
Sys.sleep(1)
renameNetwork("GO_Visualisation_SCZ_SNW")
loadTableData(
data = read.table(file=paste0(getwd(),"/Data/summary_go_terms.txt"),header=TRUE, sep ="\t"),
data.key.column = "gLayCluster",
table.key.column = "gLayCluster"
)
#Loading an additional column into the network containing manually created summaries of GO terms based on biological knowledge
commandsRun(sprintf("network import file columnTypeList='s,t,ea' file=%s firstRowAsColumnNames=true delimiters=\\t startLoadRow=1", paste0(getwd(),"/Data/match_df.tsv")))
#Loading edge information (i.e. intersections between GO terms for each cluster)
createVisualStyle(style.name = 'GO_vis')
#Creating a new visual style that is subsequently customized
setVisualStyle("GO_vis")
#Applying a basic visual style to the network
setNodeSizeMapping(
table.column = "N_nodes",
sizes = c(50,200),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting the node size proportional to the number of nodes making up a cluster, e.g. a cluster containing more nodes is bigger
setNodeCustomPieChart(
columns = c("DisGeNET_source","Publication_source","WikiPathways_CNV","WikiPathways_noCNV"),
colors = paletteColorBrewerPaired(value.count = 8),
style.name= "GO_vis"
)
#Turning nodes into pie charts showing which sources make up the proportions of the nodes in them
setNodeShapeDefault("ellipse",
style.name= "GO_vis")
setNodeFillOpacityDefault(
new.opacity = 0,
style.name= "GO_vis"
)
#Removing node background
setNodeBorderWidthDefault(
new.width=0.1,
style.name= "GO_vis"
)
setNodeBorderColorDefault (
style.name="GO_vis",
new.color = "#FFFFFF"
)
setNodeLabelMapping(
table.column = "summary_term",
style.name= "GO_vis"
)
#Changing node label to the processes/terms the nodes represent
setNodeFontSizeDefault(
new.size = 20,
style.name= "GO_vis"
)
#Setting node font size
setNodeLabelPositionDefault(
new.nodeAnchor = "S",
new.graphicAnchor = "N",
new.justification = "c",
new.xOffset = "0",
new.yOffset = "0",
style.name= "GO_vis"
)
#Moving label
setEdgeLineWidthMapping(
table.column = "GO_term_matches",
table.column.values = c(0,861),
widths = c(0,50),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting edge width proportional to number of shared GO terms
setEdgeOpacityDefault(
new.opacity = 70,
style.name= "GO_vis"
)
#Decreasing edge opacity
setEdgeColorDefault('#DD3497',
style.name= "GO_vis")
#Changing edge color
commandsRun('layout force-directed defaultEdgeWeight=0.5 defaultNodeMass=3 defaultSpringCoefficient=1e-4 edgeAttribute="GO_term_matches" defaultSpringLength=300 isDeterministic=true maxWeightCutoff=1.79769E308 minWeightCutoff=0E0 numIterations=200 type=Heuristic')
layoutNetwork('force-directed')
#Adding network layout
#scaleLayout(axis="Both Axes", scaleFactor = 0.95)
#Not working as requires Cytoscape v.3.10.2 which does not seem available yet?
renameNetwork("Supernetwork functional analysis")
deleteNetwork(network="GO_Visualisation_SCZ_SNW")
go_vis_nw <- getNetworkName()
exportNetwork(filename=paste0(nw_savepath,"GO_Visualisation_SCZ_SNW"),"CX",network=go_vis_nw,overwriteFile=TRUE)
fitContent()
exportImage(filename = paste0(getwd(),"/Visualisations/SNW_functional_analysis"),type="SVG", overwriteFile=TRUE, zoom="200")
#Exporting the visualisation as network and as svg
