mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
}
apply(intersect_df,intersect)
apply(intersect_df,1,intersect)
View(intersect_df)
intersect_df <- df %>%
rename("SCZ pathway" = "Var1", "Addiction pathway" = "Var2")
names(intersect_df) <- c("SCZ pathway", "Addiction pathway")
View(intersect_df)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
Intersections <- getAllNodes()
intersect_df <- cbind(Intersections)
}
scz_pathways <- findPathwaysByText("Schizophrenia")
#Querying WikiPathways for relevant pathways using "Schizophrenia" as keyword
scz_pathways <- scz_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
#Filtering by species
scz_pathways.ids <- scz_pathways$id
adc_pathways <- findPathwaysByText("Addiction")
adc_pathways <- adc_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
adc_pathways.ids <- adc_pathways$id
import <- function(i)
{commandsRun(paste0('wikipathways import-as-network id=', i))
}
lapply(scz_pathways.ids,import)
lapply(adc_pathways.ids,import)
scz_pathways.names <- paste(scz_pathways$name, scz_pathways$species, sep = " - ")
adc_pathways.names <- paste(adc_pathways$name, adc_pathways$species, sep = " - ")
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
names(intersect_df) <- c("SCZ pathway", "Addiction pathway")
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
Intersections <- getAllNodes()
intersect_df <- cbind(Intersections)
}
apply(intersect_df,1,intersect)
View(intersect_df)
#Function to apply mergeNetworks to every combination in intersect_df
print(intersect_df)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
intersections <- getAllNodes()
intersect_df$Intersections <- intersections(intersect_df)
}
apply(intersect_df,1,intersect)
class(Intersections)
df <- vector("character", nrow(intersect_df))
intersections <- vector("character", nrow(intersect_df))
getIntersections <- getAllNodes()
intersections <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- getAllNodes()
intersections[row] <- getIntersections
}
apply(intersect_df,1,intersect)
intersections <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- getAllNodes()
intersections[row] <- getIntersections
}
apply(intersect_df,1,intersect)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- getAllNodes()
intersections[row] <- as.character(getIntersections)
}
apply(intersect_df,1,intersect)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections[row] <- getAllNodes()
intersections[row] <- as.character(getIntersections)
}
apply(intersect_df,1,intersect)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- as.character(getAllNodes())
intersections[row] <- as.character(getIntersections)
}
apply(intersect_df,1,intersect)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- as.character(getAllNodes())
intersections[row] <- getIntersections
}
apply(intersect_df,1,intersect)
intersections <- vector("character", nrow(intersect_df))
intersections <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- as.character(getAllNodes())
}
apply(intersect_df,1,intersect)
intersections <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- as.character(getAllNodes())
result <- list(intersections = getIntersections)
}
intersections <- sapply(intersect_results, intersect(row) row$intersections)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- as.character(getAllNodes())
result <- list(intersection_names = getIntersections)
return(result)
}
df_results <- apply(intersect_df, 1, intersect)
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- intersection_names
View(intersect_df)
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- paste(intersection_names, collapse = ",")
names(intersect_df) <- c("SCZ pathway", "Addiction pathway", "Intersections")
View(intersect_df)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- as.character(getAllNodes())
result <- list(intersection_names = getIntersections)
}
df_results <- apply(intersect_df, 1, intersect)
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- paste(intersection_names, collapse = ",")
names(intersect_df) <- c("SCZ pathway", "Addiction pathway", "Intersections")
View(intersect_df)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect_df$intersection_names <- cat(paste(intersection_names, collapse = ","))
View(intersect_df)
intersect_df$intersection_names <- as.character(intersection_names)
names(intersect_df) <- c("SCZ pathway", "Addiction pathway", "Intersections")
print(intersect_df)
class(intersect_df$Intersections)
extracted_values <- str_extract_all(intersection_names, '"(.*?)"'[[1]])
library(stringr)
extracted_values <- str_extract_all(intersection_names, '"(.*?)"'[[1]])
intersection_names
class(intersection_names)
?str_extract_all
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- as.character(getAllNodes())
result <- list(intersection_names = paste(getIntersections,collapse = ","))
}
df_results <- apply(intersect_df, 1, intersect)
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- intersection_names
names(intersect_df) <- c("SCZ pathway", "Addiction pathway", "Intersections")
print(intersect_df)
View(intersect_df)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- as.character(getAllNodes())
result <- list(intersection_names = paste(getIntersections,collapse = ", "))
}
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
getIntersections <- as.character(getAllNodes())
list(intersection_names = paste(getIntersections,collapse = ", "))
}
df_results <- apply(intersect_df, 1, intersect)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect_df$intersection_names <- intersection_names
names(intersect_df) <- c("SCZ pathway", "Addiction pathway", "Intersections")
View(intersect_df)
?paste
scz_pathways <- findPathwaysByText("Schizophrenia")
scz_pathways <- findPathwaysByText("Schizophrenia")
scz_pathways <- findPathwaysByText("Schizophrenia")
#Querying WikiPathways for relevant pathways using "Schizophrenia" as keyword
scz_pathways <- scz_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
#Filtering by species
scz_pathways.ids <- scz_pathways$id
adc_pathways <- findPathwaysByText("Addiction")
adc_pathways <- adc_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
adc_pathways.ids <- adc_pathways$id
import <- function(i)
{commandsRun(paste0('wikipathways import-as-network id=', i))
}
lapply(scz_pathways.ids,import)
lapply(adc_pathways.ids,import)
scz_pathways.names <- paste(scz_pathways$name, scz_pathways$species, sep = " - ")
adc_pathways.names <- paste(adc_pathways$name, adc_pathways$species, sep = " - ")
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- intersection_names
intersect_df <- intersect_df %>% mutate_all(~na_if(.,""))
names(intersect_df) <- c("SCZ pathway", "Addiction pathway", "Intersections")
View(intersect_df)
intersect_df
View(intersect_df)
View(intersect_df)
write.csv(intersect_df, file = "CSVs/Intersections.csv")
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- intersection_names
#Addint the intersections to a new column in the df
View(intersect_df)
#Addint the intersections to a new column in the df
intersect_df <- intersect_df %>% mutate_all(~na_if(.,""))
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- intersect_df %>%
select (Var1, scz_pathways.ids, Var2, adc_pathways.ids, intersection_names)
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- intersect_df %>%
mutate(scz_pathways.ids, adc_pathways.ids)
?mutate
class(scz_pathways.ids)
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- intersect_df %>%
mutate(scz_pathways.ids_col = scz_pathways.ids, adc_pathways.ids_col = scz_pathways.ids)
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- intersect_df %>%
mutate(scz_pathways.ids = scz_pathways.ids_col, adc_pathways.ids = scz_pathways.ids_col)
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- intersect_df %>%
mutate(scz_pathways.ids = scz_pathways.ids_col, adc_pathways.ids = scz_pathways.ids_col)
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- cbind(intersect_df, scz_pathways.ids, adc_pathways.ids)
intersect_df <- intersect_df %>%
select (Var1, scz_pathways.ids, Var2, adc_pathways.ids, intersection_names)
names(intersect_df) <- c("SCZ pathway","WP ID", "Addiction pathway","WP ID", "Intersections")
View(intersect_df)
intersect_df <- intersect_df %>%
select (scz_pathways.ids,Var1, adc_pathways.ids,Var2,intersection_names)
names(intersect_df) <- c("SCZ pathway","WP ID", "Addiction pathway","WP ID", "Intersections")
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- cbind(intersect_df, scz_pathways.ids, adc_pathways.ids)
intersect_df <- intersect_df %>%
select (scz_pathways.ids,Var1, adc_pathways.ids,Var2,intersection_names)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- intersection_names
#Addint the intersections to a new column in the df
intersect_df <- intersect_df %>% mutate_all(~na_if(.,""))
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- intersection_names
#Addint the intersections to a new column in the df
intersect_df <- intersect_df %>% mutate_all(~na_if(.,""))
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- cbind(intersect_df, scz_pathways.ids, adc_pathways.ids)
intersect_df <- intersect_df %>%
select (scz_pathways.ids,Var1, adc_pathways.ids,Var2,intersection_names)
names(intersect_df) <- c("sCZ WP ID","SCZ pathway","ADC WP ID","Addiction pathway", "Intersections")
View(intersect_df)
names(intersect_df) <- c("SCZ WP ID","SCZ pathway","ADC WP ID","Addiction pathway", "Intersections")
View(intersect_df)
write.csv(intersect_df, file = "CSVs/Intersections.csv")
search()
detach("package:stringr", unload = TRUE)
search()
search()
.packages(all.available = TRUE, baseOnly = FALSE)
.packages(all.available = TRUE, baseOnly = FALSE)
?.packages
sessionInfo()
setwd("~/GitHub/SCZ-CNV")
#Installing packages
library(RCy3)
library(rWikiPathways)
library(dplyr)
cytoscapePing()
cytoscapeVersionInfo()
scz_pathways <- findPathwaysByText("Schizophrenia")
#Querying WikiPathways for relevant pathways using "Schizophrenia" as keyword
scz_pathways <- scz_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
#Filtering by species
scz_pathways.ids <- scz_pathways$id
adc_pathways <- findPathwaysByText("Addiction")
adc_pathways <- adc_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
adc_pathways.ids <- adc_pathways$id
import <- function(i)
{commandsRun(paste0('wikipathways import-as-network id=', i))
}
lapply(scz_pathways.ids,import)
lapply(adc_pathways.ids,import)
scz_pathways.names <- paste(scz_pathways$name, scz_pathways$species, sep = " - ")
adc_pathways.names <- paste(adc_pathways$name, adc_pathways$species, sep = " - ")
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- intersection_names
#Adding the intersections to a new column in the df
intersect_df <- intersect_df %>% mutate_all(~na_if(.,""))
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- cbind(intersect_df, scz_pathways.ids, adc_pathways.ids)
intersect_df <- intersect_df %>%
select (scz_pathways.ids,Var1, adc_pathways.ids,Var2,intersection_names)
names(intersect_df) <- c("SCZ WP ID","SCZ pathway","ADC WP ID","Addiction pathway", "Intersections")
View(intersect_df)
required_packages <- c("BiocManager", "RCy3", "rWikpathways")
for (packages in required_packages) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages (package)
library (package, character.only = TRUE)
}
}
for (package in required_packages) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages (package)
library (package, character.only = TRUE)
}
}
required_packages <- c("BiocManager", "RCy3", "rWikipathways")
for (package in required_packages) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages (package)
library (package, character.only = TRUE)
}
}
required_packages <- c("BiocManager", "RCy3", "rWikiPathways")
for (package in required_packages) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages (package)
library (package, character.only = TRUE)
}
}
remove.packages(rWikiPathways)
remove.packages("rWikiPathways")
required_packages <- c("BiocManager", "RCy3", "rWikiPathways")
for (package in required_packages) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages (package)
library (package, character.only = TRUE)
}
}
library(rWikiPathways)
remove.packages("RCy3")
for (package in required_packages) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages (package)
library (package, character.only = TRUE)
}
}
BiocManager::install("RCy3")
#Installing packages
library(RCy3)
if(!c("RCy3","rWikiPathways") %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("RCy3")
BiocManage::install("rWikiPathways")
}
install.packages("BiocManager")
if(!c("RCy3","rWikiPathways") %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("RCy3")
BiocManage::install("rWikiPathways")
}
installed.packages()
?requireNamespace
if(!c("RCy3"||"rWikiPathways") %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("RCy3") ||
BiocManager::install("rWikiPathways")
}
setwd("~/GitHub/SCZ-CNV")
if(!"RCy3" %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("RCy3")
}
if(!"rWikiPathways" %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
#Installing packages
library(RCy3)
library(rWikiPathways)
if(!"RCy3" %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("RCy3")
}
sessionInfo()
cytoscapePing()
cytoscapeVersionInfo()
#Installing packages
library(RCy3)
library(rWikiPathways)
library(dplyr)
cytoscapePing()
cytoscapeVersionInfo()
scz_pathways <- findPathwaysByText("Schizophrenia")
#Querying WikiPathways for relevant pathways using "Schizophrenia" as keyword
scz_pathways <- scz_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
#Filtering by species
scz_pathways.ids <- scz_pathways$id
adc_pathways <- findPathwaysByText("Addiction")
adc_pathways <- adc_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
adc_pathways.ids <- adc_pathways$id
import <- function(i)
{commandsRun(paste0('wikipathways import-as-network id=', i))
}
lapply(scz_pathways.ids,import)
lapply(adc_pathways.ids,import)
?mergeNetworks
View(mergeNetworks)
deleteAllNetworks()
scz_pathways <- findPathwaysByText("Schizophrenia")
#Querying WikiPathways for relevant pathways using "Schizophrenia" as keyword
scz_pathways <- scz_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
#Filtering by species
scz_pathways.ids <- scz_pathways$id
adc_pathways <- findPathwaysByText("Addiction")
adc_pathways <- adc_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
adc_pathways.ids <- adc_pathways$id
import <- function(i)
{commandsRun(paste0('wikipathways import-as-network id=', i))
}
lapply(scz_pathways.ids,import)
lapply(adc_pathways.ids,import)
system.file("RCy3")
system.file(RCy3)
system.file(BiocManager)
system.file("BiocManager")
cat(system.file("BiocManager"))
.libPaths()
