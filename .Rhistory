calculation<- ms.compute(molA, df_smiles[row,"SMILES"], standardize = FALSE)
#This line repeats ms.compute for each row of df_smiles so that a comparison between Rotenone (=molA) and all other (available) pesticides (="SMILES") is made
#RxnSim also allows comparisons between each pesticide in a list by using the ms.compute.sim.matrix function.
Tanimoto_coefficient[row] <- calculation
}
df_smiles <- cbind (df_smiles,Tanimoto_coefficient)
#Tanimoto_coefficient is added to the df_smiles for easier viewing
df_smiles_sorted <- df_smiles[order(-df_smiles$Tanimoto_coefficient),]
View(df_smiles_sorted)
write.csv(df_smiles_sorted, file = "Tanimoto-coefficient-Rotenone.csv")
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
preferred_name <- df_smiles[,1]
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x= reorder(preferred_name,-Tanimoto_coefficient), y=Tanimoto_coefficient))
p1
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("webchem")
library(webchem)
install.packages("webchem")
install.packages("webchem")
library(readxl)
dataset <- read_excel("C:\Users\klemm\Downloads\ActiveSubstances.xls")
View(dataset)
library(webchem)
library(readxl)
dataset <- read_excel("C:\ActiveSubstances.xls")
library(readxl)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
View(ActiveSubstances)
library(webchem)
install.packages("RxnSim")
#Comments refer to the code above them.
#This script generates Tanimoto/Jaccard chemical similarity scores. Here, it is used to determine what molecules in the dataset are most chemically similar to a reference chemical.
sessionInfo()
install.packages("RxnSim")
#requires Rtools
install.packages("dplyr")
packages <- c("readr","dplyr","utils", "RxnSim", "ggplot2")
lapply(packages, library, character.only = TRUE)
#The previous 2 lines make it easier to load packages and libraries without needing to enter library() every time
Chemical_List_EPAPCS_2022_04_11 <- read_csv("C:/Chemical List EPAPCS-2022-04-11.csv")
df_smiles_unfiltered <- select(Chemical_List_EPAPCS_2022_04_11, "PREFERRED NAME", "SMILES")
df_smiles <- na.omit(df_smiles_unfiltered)
#Cleaning up dataset by removing all entries without SMILES
molA <- "[H][C@@]12COC3=C(C=C(OC)C(OC)=C3)[C@]1([H])C(=O)C1=CC=C3O[C@H](CC3=C1O2)C(C)=C"
#This is the SMILES for Rotenone; defining molA as another SMILES value allows for comparisons of all kinds of pesticides.
df_smiles <- data.frame(lapply(df_smiles, as.character), stringsAsFactors = FALSE)
#For some reason, the df is seen as tables, not characters. This function forces all values to be characters
Tanimoto_coefficient <- vector("numeric",nrow(df_smiles))
#Preparing a container for the calculated coefficient
for(row in 1:nrow(df_smiles)){
calculation<- ms.compute(molA, df_smiles[row,"SMILES"], standardize = TRUE)
#This line repeats ms.compute for each row of df_smiles so that a comparison between Rotenone (=molA) and all other (available) pesticides (="SMILES") is made
#RxnSim also allows comparisons between each pesticide in a list by using the ms.compute.sim.matrix function.
Tanimoto_coefficient[row] <- calculation
}
df_smiles <- cbind (df_smiles,Tanimoto_coefficient)
#Tanimoto_coefficient is added to the df_smiles for easier viewing
df_smiles_sorted <- df_smiles[order(-df_smiles$Tanimoto_coefficient),]
View(df_smiles_sorted)
write.csv(df_smiles_sorted, file = "Tanimoto-coefficient-Rotenone.csv")
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
preferred_name <- df_smiles[,1]
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x= reorder(preferred_name,-Tanimoto_coefficient), y=Tanimoto_coefficient))
p1
install.packages("dplyr")
class(ActiveSubstances)
get.csid(substance)
library(webchem)
get.csid(substance)
get_csid(substance)
?cs_check_key
usethis::edit_r_profile
install.packages("usethis")
library(usethis)
packages <- c("readxl", "usethis", "webchem")
lapply(packages, library, character.only = TRUE)
usethis::edit_r_profile(
usethis::edit_r_profile()
usethis::edit_r_profile()
usethis::edit_r_environ()
get_csid(substance)
?cs_check_key()
?cs_check_key()
get_csid(substance)
substance <- ActiveSubstances[,2]
get_csid(substance)
install.packages("webchem")
install.packages("usethis")
packages <- c("readxl", "usethis", "webchem")
lapply(packages, library, character.only = TRUE)
install.packages("usethis")
usethis::edit_r_environ()
substance <- ActiveSubstances[,2]
get_csid(substance)
View(susbtance)
View(substance0
View(substance)
View(substance)
class(substance)
substance <- c(ActiveSubstances[,2])
get_csid(substance)
View(substance)
class(substance)
lapply(get_csid(substance))
lapply(FUN=get_csid(substance))
lapply(FUN=get_csid())
get_csid((4Z-9Z)-7,9-Dodecadien-1-ol)
get_csid("(4Z-9Z)-7,9-Dodecadien-1-ol")
get_csid("
1-Naphthylacetic acid (1-NAA)")
for(row in 1:nrow(substance){csid <-get_csid(substance)}
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
substance <- c(ActiveSubstances[,2])
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
class(substance)
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
for(row in 1:nrow("substance")){csid <-get_csid(substance)}
for(row in 1:nrow(ActiveSubstances[,2])){csid <-get_csid(substance)}
csid_list <- vector("numeric", nrow(ActiveSubstances))
View(csid)
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
View(ActiveSubstances)
substance <- c(ActiveSubstances[,2])
csid_list <- vector("numeric", nrow(ActiveSubstances))
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(substance)
csid_list[row] <- csid
}
View(substance)
View(csid_list)
install.packages("webchem")
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(ActiveSubstances[,2])
csid_list[row] <- csid
}
View(csid_list)
csid <-get_csid(ActiveSubstances[row,"Substance"])
csid_list[row] <- csid
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(ActiveSubstances[row,"Substance"])
csid_list[row] <- csid
}
#View(csid_list)
View(csid)
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
}
View(csid)
View(ActiveSubstances[row,"Substance"])
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
}
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
View(substance)
class(substance)
class9packages)
class(packages)
class(ActiveSubstances)
class(df_smiles)
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
class(ActiveSubstances)
View(ActiveSubstances)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
for(row in 1:nrow(ActiveSubstance))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
for(row in 1:nrow(ActiveSubstances))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances)
}
View(csid)
get_csid(Azoxystrobin)
ping_service("cs")
ping_service("cs_web")
cs_check_key()
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances, match = "ask")
ping_service("cs")
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ping_service("cs")
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances[,2], match = "ask")
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances[,2], match = "ask")
}
View(csid)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[,2], match = "ask")
}
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
}
View(cid)
cid_list <- vector("numeric",nrow(ActiveSubstances))
for(row in 1:nrow(ActiveSubstances))  {
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
cid_list[row] <- cid
}
View(cid_list)
cid_list[[26]]
clear
library(readr)
pc_eup <- read_csv("C:/PubChem_compound_list_ElW0fZMu9pLBvH6l_N03iWB0JxQ494ui8YeQ7uqWgu_qj74.csv")
View(pc_eup)
#Installing packages
library(RCy3)
library(rWikiPathways)
library(knitr)
knitr:::input_dir()
#Setting working directory
cytoscapePing()
cytoscapeVersionInfo
#Pinging Cytoscape to check if it is properly running, and checking what version of Cytoscape is loaded
installApp('WikiPathways')
installApp('CyTargetLinker')
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
#Pinging Cytoscape to check if it is properly running, and checking what version of Cytoscape is loaded
installApp('WikiPathways')
installApp('CyTargetLinker')
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
commandsRun(paste0('wikipathways import-as-network id=',gbm.pathways[1]))
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
park.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
park.wpid <- park.pathways[[1]]$id
park.wpid <- park.pathways[[1]][id]
park.wpid <- park.pathways[[1]]$id
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
park.wpid <- park.pathways["id"]
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
commandsRun(paste0('wikipathways import-as-network id=',park.wpid)
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
commandsRun(paste0('wikipathways import-as-network id=',park.wpid, sep = "="))
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[2]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[1]]["id"]
lapply(park.pathways, function(x) commandsRun(paste('wikipathways import-as-network id=', x$id, sep = '')))
lapply(park.pathways, function(x) commandsRun(paste('wikipathways import-as-network id=', x["id"], sep = '')))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
park.pathways <- findPathwaysByText("Parkinsonian")
View(park.pathways)
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
commandsRun(paste0('wikipathways import-as-network id=',"park.wpid"))
commandsRun(paste0('wikipathways import-as-network id=',"WP4945"))
#Importing the relevant Parkinsonian motor deficit pathway as network
hsa <- file.path(getwd(), "LinkSets", "wikipathways-20220511-hsa-WP.xgmml")
hsa_react <- file.path(getwd(), "LinkSets", "wikipathways-20220511-hsa-REACTOME.xgmml")
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Setting working directory
cytoscapePing()
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
library(ggrepel)
citation(ggrepel)
citation("ggrepel")
library(svglite)
citation("svglite")
library(readr)
citation("readr")
library(gdata)
citation("gdata")
library(reshape)
citation("reshape")
?ggplot2
library(Rcy3)
library(RCy3)
citation("RCy3")
?svglite
library(stats)
citation("stats")
?stats
RStudio.Version()
View(mergeNetworks)
View("mergeNetworks")
View(mergeNetworks())
#Installing packages
library(RCy3)
View(mergeNetworks())
View(mergeNetworks())
#Installing packages
library(RCy3)
library(rWikiPathways)
library(dplyr)
cytoscapePing()
View(mergeNetworks())
install.packages("renv")
go_list <- readRDS("~/GitHub/SCZ-CNV/GO Output/go_list.rds")
View(go_list)
setwd("~/GitHub/SCZ-CNV")
rm(list=ls())
setwd("~/GitHub/SCZ-CNV")
#Setting working directory
rm(list=ls())
#Cleaning up workspace
packages <- c("dplyr","httr","stringr")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
#Different structure for rWikiPathways and RCy3 packages as these are not installed directly but via the BiocManager package
invisible(lapply(c(packages,"rWikiPathways","RCy3"), require, character.only = TRUE))
#Loading libraries
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%d-%m-%Y_%Hh%M")
dir.create("Outputs")
dir.create(sprintf("Outputs/Session-%s",datetime))
dir.create(sprintf("Outputs/Session-%s/Networks",datetime))
#Creating directories for outputs generated by this script to be saved in; new "Session" folder created each time the script is ran (contains generated networks, metadata, and sessionInfo)
nw_savepath <- sprintf("%1$s/Outputs/Session-%2$s/Networks/",getwd(),datetime)
file.create(sprintf("Outputs/Session-%s/metadata.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Outputs/Session-%s/metadata.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
metadata.add("")
#Adding the timezone, date, and time to the metadata
invisible(file.create(sprintf("Outputs/Session-%s/sessioninfo-%s.txt",datetime,datetime)))
writeLines(capture.output(sessionInfo()),sprintf("Outputs/Session-%s/sessioninfo-%s.txt",datetime,datetime))
#Generating and adding a sessionInfo file to the current session output folder
cytoscapePing()
cytoscapeVersionInfo()
#Checking if Cytoscape is running and version info
metadata.add(capture.output(cytoscapeVersionInfo()))
checkinstall.app <- function(app) {
status_string <- getAppStatus(app)
#Getting install status of app
words <- strsplit(status_string, " ")[[1]]
last_word <- tail(words, 1)
#getAppStatus returns a character string instead of a logical value, so the last word (usually either "Installed" or "Uninstalled") from the output is checked
if (last_word == "Installed") {
print(sprintf("App %s is already installed.",app))
} else {
installApp(app)
print(sprintf("Installed app %s.",app))
}
}
#Function to check whether required Cytoscape apps are installed and installing them if not
applist <- c("Wikipathways", "DisGeNET-app", "CyTargetLinker","stringApp","BridgeDb","clusterMaker2")
#WikiPathways v.3.3.10
#DisGeNET-app v.7.3.0
#CyTargetLinker v. 4.1.0
#stringApp v. 2.0.1
#BridgeDb v.1.2.0
#clusterMaker2 v.2.3.4
lapply(applist,checkinstall.app)
#Checking and installing (if required) necessary Cytoscape apps
lapply(applist,getAppInformation)
metadata.add("Required Cytoscape apps and versions:")
invisible(metadata.add(print(lapply(applist,getAppInformation))))
metadata.add("")
# FUNCTION DICTIONARY-------------------------------------------------------------------------------------------------------------------
queryspecies.wp <- c("Homo sapiens","Rattus norvegicus","Mus musculus")
getPathways.wp <- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% queryspecies.wp)
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
#Function to query WikiPathways using keyword and to extract WP IDs for the import function
createNodeSource <- function(source,doi=NULL) {
if (source == "WikiPathways") {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=PharmGKB table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Literature table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Literature.doi table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Literature.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
#Function to create new column in node table specifying origin of network/node
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource("WikiPathways")
#Filling the 'WikiPathways' column with 1 to indicate the source
}
#Importing pathways from WikiPathways by pathway ID
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
disgeneturl<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (disgeneturl)
}
net <- "gene-disease-net"
disgenetRestUrl(netType = net)
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
disgeneturl<-disgenetRestUrl(netType)
restCall<-POST(disgeneturl, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
#Specifying parameters of the GDA network to be imported
?createColumnFilter
?RCy3
