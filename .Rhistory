install.packages("dplyr")
packages <- c("readr","dplyr","utils", "RxnSim", "ggplot2")
lapply(packages, library, character.only = TRUE)
#The previous 2 lines make it easier to load packages and libraries without needing to enter library() every time
Chemical_List_EPAPCS_2022_04_11 <- read_csv("C:/Chemical List EPAPCS-2022-04-11.csv")
df_smiles_unfiltered <- select(Chemical_List_EPAPCS_2022_04_11, "PREFERRED NAME", "SMILES")
df_smiles <- na.omit(df_smiles_unfiltered)
#Cleaning up dataset by removing all entries without SMILES
molA <- "[H][C@@]12COC3=C(C=C(OC)C(OC)=C3)[C@]1([H])C(=O)C1=CC=C3O[C@H](CC3=C1O2)C(C)=C"
#This is the SMILES for Rotenone; defining molA as another SMILES value allows for comparisons of all kinds of pesticides.
df_smiles <- data.frame(lapply(df_smiles, as.character), stringsAsFactors = FALSE)
#For some reason, the df is seen as tables, not characters. This function forces all values to be characters
Tanimoto_coefficient <- vector("numeric",nrow(df_smiles))
#Preparing a container for the calculated coefficient
for(row in 1:nrow(df_smiles)){
calculation<- ms.compute(molA, df_smiles[row,"SMILES"], standardize = TRUE)
#This line repeats ms.compute for each row of df_smiles so that a comparison between Rotenone (=molA) and all other (available) pesticides (="SMILES") is made
#RxnSim also allows comparisons between each pesticide in a list by using the ms.compute.sim.matrix function.
Tanimoto_coefficient[row] <- calculation
}
df_smiles <- cbind (df_smiles,Tanimoto_coefficient)
#Tanimoto_coefficient is added to the df_smiles for easier viewing
df_smiles_sorted <- df_smiles[order(-df_smiles$Tanimoto_coefficient),]
View(df_smiles_sorted)
write.csv(df_smiles_sorted, file = "Tanimoto-coefficient-Rotenone.csv")
#Exports df_smiles_sorted to a .csv file with observations sorted in descending order according to their Tanimoto coefficient.
preferred_name <- df_smiles[,1]
p1 <- ggplot(data=df_smiles_sorted)+geom_col(mapping=aes(x= reorder(preferred_name,-Tanimoto_coefficient), y=Tanimoto_coefficient))
p1
install.packages("dplyr")
class(ActiveSubstances)
get.csid(substance)
library(webchem)
get.csid(substance)
get_csid(substance)
?cs_check_key
usethis::edit_r_profile
install.packages("usethis")
library(usethis)
packages <- c("readxl", "usethis", "webchem")
lapply(packages, library, character.only = TRUE)
usethis::edit_r_profile(
usethis::edit_r_profile()
usethis::edit_r_profile()
usethis::edit_r_environ()
get_csid(substance)
?cs_check_key()
?cs_check_key()
get_csid(substance)
substance <- ActiveSubstances[,2]
get_csid(substance)
install.packages("webchem")
install.packages("usethis")
packages <- c("readxl", "usethis", "webchem")
lapply(packages, library, character.only = TRUE)
install.packages("usethis")
usethis::edit_r_environ()
substance <- ActiveSubstances[,2]
get_csid(substance)
View(susbtance)
View(substance0
View(substance)
View(substance)
class(substance)
substance <- c(ActiveSubstances[,2])
get_csid(substance)
View(substance)
class(substance)
lapply(get_csid(substance))
lapply(FUN=get_csid(substance))
lapply(FUN=get_csid())
get_csid((4Z-9Z)-7,9-Dodecadien-1-ol)
get_csid("(4Z-9Z)-7,9-Dodecadien-1-ol")
get_csid("
1-Naphthylacetic acid (1-NAA)")
for(row in 1:nrow(substance){csid <-get_csid(substance)}
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
substance <- c(ActiveSubstances[,2])
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
class(substance)
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
for(row in 1:nrow("substance")){csid <-get_csid(substance)}
for(row in 1:nrow(ActiveSubstances[,2])){csid <-get_csid(substance)}
csid_list <- vector("numeric", nrow(ActiveSubstances))
View(csid)
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
View(ActiveSubstances)
substance <- c(ActiveSubstances[,2])
csid_list <- vector("numeric", nrow(ActiveSubstances))
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(substance)
csid_list[row] <- csid
}
View(substance)
View(csid_list)
install.packages("webchem")
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(ActiveSubstances[,2])
csid_list[row] <- csid
}
View(csid_list)
csid <-get_csid(ActiveSubstances[row,"Substance"])
csid_list[row] <- csid
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(ActiveSubstances[row,"Substance"])
csid_list[row] <- csid
}
#View(csid_list)
View(csid)
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
}
View(csid)
View(ActiveSubstances[row,"Substance"])
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
}
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
View(substance)
class(substance)
class9packages)
class(packages)
class(ActiveSubstances)
class(df_smiles)
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
class(ActiveSubstances)
View(ActiveSubstances)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
for(row in 1:nrow(ActiveSubstance))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
for(row in 1:nrow(ActiveSubstances))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances)
}
View(csid)
get_csid(Azoxystrobin)
ping_service("cs")
ping_service("cs_web")
cs_check_key()
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances, match = "ask")
ping_service("cs")
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ping_service("cs")
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances[,2], match = "ask")
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances[,2], match = "ask")
}
View(csid)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[,2], match = "ask")
}
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
}
View(cid)
cid_list <- vector("numeric",nrow(ActiveSubstances))
for(row in 1:nrow(ActiveSubstances))  {
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
cid_list[row] <- cid
}
View(cid_list)
cid_list[[26]]
clear
library(readr)
pc_eup <- read_csv("C:/PubChem_compound_list_ElW0fZMu9pLBvH6l_N03iWB0JxQ494ui8YeQ7uqWgu_qj74.csv")
View(pc_eup)
#Installing packages
library(RCy3)
library(rWikiPathways)
library(knitr)
knitr:::input_dir()
#Setting working directory
cytoscapePing()
cytoscapeVersionInfo
#Pinging Cytoscape to check if it is properly running, and checking what version of Cytoscape is loaded
installApp('WikiPathways')
installApp('CyTargetLinker')
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
#Pinging Cytoscape to check if it is properly running, and checking what version of Cytoscape is loaded
installApp('WikiPathways')
installApp('CyTargetLinker')
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
commandsRun(paste0('wikipathways import-as-network id=',gbm.pathways[1]))
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
park.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
park.wpid <- park.pathways[[1]]$id
park.wpid <- park.pathways[[1]][id]
park.wpid <- park.pathways[[1]]$id
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
park.wpid <- park.pathways["id"]
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
commandsRun(paste0('wikipathways import-as-network id=',park.wpid)
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
commandsRun(paste0('wikipathways import-as-network id=',park.wpid, sep = "="))
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[2]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[1]]["id"]
lapply(park.pathways, function(x) commandsRun(paste('wikipathways import-as-network id=', x$id, sep = '')))
lapply(park.pathways, function(x) commandsRun(paste('wikipathways import-as-network id=', x["id"], sep = '')))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
park.pathways <- findPathwaysByText("Parkinsonian")
View(park.pathways)
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
commandsRun(paste0('wikipathways import-as-network id=',"park.wpid"))
commandsRun(paste0('wikipathways import-as-network id=',"WP4945"))
#Importing the relevant Parkinsonian motor deficit pathway as network
hsa <- file.path(getwd(), "LinkSets", "wikipathways-20220511-hsa-WP.xgmml")
hsa_react <- file.path(getwd(), "LinkSets", "wikipathways-20220511-hsa-REACTOME.xgmml")
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Setting working directory
cytoscapePing()
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
library(ggrepel)
citation(ggrepel)
citation("ggrepel")
library(svglite)
citation("svglite")
library(readr)
citation("readr")
library(gdata)
citation("gdata")
library(reshape)
citation("reshape")
?ggplot2
library(Rcy3)
library(RCy3)
citation("RCy3")
?svglite
library(stats)
citation("stats")
?stats
RStudio.Version()
View(mergeNetworks)
View("mergeNetworks")
View(mergeNetworks())
#Installing packages
library(RCy3)
View(mergeNetworks())
View(mergeNetworks())
#Installing packages
library(RCy3)
library(rWikiPathways)
library(dplyr)
cytoscapePing()
View(mergeNetworks())
# SETUP -----------------------------------------------------------------------------------------------------------------------
setwd("~/GitHub/SCZ-CNV")
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
#dplyr 1.1.2; httr 1.4.7;jsonlite 1.8.4; BiocManager 1.30.22; rWikiPathways 1.14.0; RCy3 2.14.2
#Cytoscape 3.10.1
file.create("sessioninfo.txt")
writeLines(capture.output(sessionInfo()),"sessionInfo.txt")
packages <- c("dplyr","httr","jsonlite")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
invisible(lapply(c(packages,"rWikiPathways","RCy3"), require, character.only = TRUE))
cytoscapePing()
cytoscapeVersionInfo()
# FUNCTION DICTIONARY-------------------------------------------------------------------------------------------------------------------
queryspecies.wp <- c("Homo sapiens","Rattus norvegicus","Mus musculus")
getPathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% queryspecies.wp)
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
createNodeSource <- function(source,doi=NULL) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=PharmGKB table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Literature table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Literature.doi table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Literature.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
createNodeSource.wp <- function(source,doi=NULL) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=PharmGKB table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Literature table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Literature.doi table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Literature.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
mapToEnsembl <- function(col,from) {
mapTableColumn(col,"Human",from,"Ensembl")
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
#Filling the 'WikiPathways' column with 1 to indicate the source
}
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
disgeneturl<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (disgeneturl)
}
net <- "gene-disease-net"
disgenetRestUrl(netType = net)
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
disgeneturl<-disgenetRestUrl(netType)
restCall<-POST(disgeneturl, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
# METADATA ============================================================================================================================
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
file.create(sprintf("Metadata/metadata_%s.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
metadata.add("")
genedisparams.scz.df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
genedisparams.scz.df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
disgeneturl <- c()
#Preparing container for DisGeNET URL to be saved for addition to metadata file
apply(genedisparams.scz.df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
disgeneturl <<- disgenetRestUrl(net)
#Fetching the DisGeNET URL used to make this call
geneDisResult <- disgenetRestCall(net,gdp)
#Executing the DisGeNET query
createNodeSource("DisGeNET")
#Adding information about data source to each node
mapToEnsembl("geneName","HGNC")
#Mapping the HGNC gene name from the geneName column in the node table to Ensembl identifiers
})
#Importing networks from DisGeNET
metadata.add(paste("DisGeNET URL:",disgeneturl))
metadata.add(paste("DisGeNET net type:",net))
metadata.add("")
wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
sczcnv <- sapply(wpids, function(k) paste0("WP",k))
keyword.wp <- "Schizophrenia"
getPathways.wp(keyword.wp)
lapply(c(Schizophrenia_wpids,sczcnv), import)
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways keywords:",keyword.wp))
metadata.add(paste("WikiPathways manually by ID:",paste(wpids,collapse =", ")))
metadata.add(paste("WikiPathways queried species:",paste(queryspecies.wp,collapse = ", ")))
#Adding the keyword and species used to filter the WikiPathways query to the metadata file
metadata.add("")
commandsRun(sprintf("network import file columnTypeList='sa,sa,source,sa,sa,sa,sa' file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1", paste0(getwd(),"/CSVs/scz2022-Extended-Data-Table1.txt")))
d
d
#Importing network from file
#List of 120 genes implicated in Trubetskoy et al., doi: 10.1038/s41586-022-04434-5
commandsRun("table rename column columnName=Ensembl.ID newColumnName=Ensembl table=scz2022-Extended-Data-Table1.txt default node")
#Renaming the Ensembl.ID column from the dataset to Ensembl for coherence with networks from other sources
createNodeSource("Literature","10.1038/s41586-022-04434-5")
#Adding literature as  source to all imported nodes and adding the doi of the corresponding paper
renameNetwork("Trubetskoy risk genes")
#Renaming the newly imported network
metadata.add("Literature")
metadata.add("Trubetskoy et al. doi: 10.1038/s41586-022-04434-5")
networklist.dup <- getNetworkList()
dup.filter <- function(input,suffix) {
filtered_list <- input[substr(input, nchar(input) - 1,nchar(input))==suffix]
}
duplicates <- dup.filter(networklist.dup,"_1")
#Getting duplicate networks (Cytoscape marks duplicate networks with a "_1" suffix to the network name)
delete.dupes <- function(nw) {
setCurrentNetwork(nw)
deleteNetwork()
}
lapply(duplicates,delete.dupes)
networklist <- getNetworkList()
setCurrentNetwork(networklist[[1]])
for(i in 1:length(networklist)) {
current <- getNetworkName()
mergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union",inNetworkMerge = TRUE,nodeKeys=c("Ensembl","Ensembl"))
}
#Looping through the network list to merge all currently open networks with each other, creating one large unified network
renameNetwork("Schizophrenia supernetwork")
networklist <- getNetworkList()
snw_scz <- getNetworkName()
#Getting the name of the unified network to preserve it from deletion
lapply(networklist[networklist != snw_scz],deleteNetwork)
#Deleting all networks besides newly generated unified network
exportNetwork(filename=paste0("Sessions/Networks/Schizophrenia/",paste(snw_scz,datetime, sep = " - ")),"CX", network = snw_scz, overwriteFile=FALSE)
