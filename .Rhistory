deleteAllNetworks()
scz_pathways <- findPathwaysByText("Schizophrenia")
#Querying WikiPathways for relevant pathways using "Schizophrenia" as keyword
scz_pathways <- scz_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
#Filtering by species
scz_pathways.ids <- scz_pathways$id
adc_pathways <- findPathwaysByText("Addiction")
adc_pathways <- adc_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
adc_pathways.ids <- adc_pathways$id
import <- function(i)
{commandsRun(paste0('wikipathways import-as-network id=', i))
}
lapply(scz_pathways.ids,import)
lapply(adc_pathways.ids,import)
system.file("RCy3")
system.file(RCy3)
system.file(BiocManager)
system.file("BiocManager")
cat(system.file("BiocManager"))
.libPaths()
sessionInfo()
?dplyr
?BiocManager
?rWikiPathways
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
setwd("~/GitHub/SCZ-CNV")
install.packages("dplyr")
packages <- c("dplyr","BiocManager")
if (!requireNamespace(packages, quietly = TRUE)) {
install.packages(packages)
}
packages <- c("dplyr","BiocManager")
if (!requireNamespace(packages, quietly = TRUE)) {
install.packages(packages)
}
remove.packages("dbplyr", lib="~/R/win-library/4.1")
if (!requireNamespace(packages, quietly = TRUE)) {
install.packages(packages)
}
remove.packages("dplyr", lib="~/R/win-library/4.1")
if (!requireNamespace(packages, quietly = TRUE)) {
install.packages(packages)
}
?requireNamespace)
?requireNamespace(`stats-package`)
?requireNamespace(`stats-package`)
library(dplyr)
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
setwd("~/GitHub/SCZ-CNV")
packages <- c("dplyr","BiocManager")
if (!requireNamespace(packages, quietly = TRUE)) {
install.packages(packages)
}
library(dplyr)
list.of.packages <- c("dplyr","BiocManager")
list.of.packages <- c("dplyr","BiocManager")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
install.packages(new.packages)
install.packages("dplyr")
install.packages("dplyr")
bioc.packages <- c("RCy3", "rWikiPathways")
remove.packages("RCy3", lib="~/R/win-library/4.1")
new.packages.bioc <- bioc.packages[!(bioc.packages %in% installed.packages()[,"Package"])]
if(length(new.packages.bioc)) install.packages(new.packages.bioc)
if(length(new.packages.bioc)) BiocManager::install.packages(new.packages.bioc)
new.packages.bioc <- bioc.packages[!(bioc.packages %in% installed.packages()[,"Package"])]
if(length(new.packages.bioc)) BiocManager::install(new.packages.bioc)
remove.packages("RCy3", lib="~/R/win-library/4.1")
new.packages.bioc <- bioc.packages[!(bioc.packages %in% installed.packages()[,"Package"])]
if(length(new.packages.bioc)) c(BiocManager::install(new.packages.bioc),n)
n
"n"
n
help
packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(packages)) install.packages(packages)
new.packages.bioc <- bioc.packages[!(bioc.packages %in% installed.packages()[,"Package"])]
if(length(new.packages.bioc)) BiocManager::install(new.packages.bioc)
library(c("RCy3","rWikiPathways","dplyr"))
lapply(c("RCy3","rWikiPathways","dplyr"), require, character.only = TRUE)
packages <- c("dplyr","BiocManager")
#dplyr v. 1.1.2; BiocManager v. 2.14.2
bioc.packages <- c("RCy3", "rWikiPathways")
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
new.packages.bioc <- bioc.packages[!(bioc.packages %in% installed.packages()[,"Package"])]
if(length(new.packages.bioc)) BiocManager::install(new.packages.bioc)
#Checking if required packages are installed and installing them if not
lapply(c("RCy3","rWikiPathways","dplyr"), require, character.only = TRUE)
#Checking if required packages are installed and installing them if not
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
library(rWikiPathways)
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
lapply(c("RCy3","rWikiPathways","dplyr"), require, character.only = TRUE)
packages <- c("dplyr")
packages <- c("dplyr")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
invisible(lapply(c("RCy3","rWikiPathways","dplyr"), require, character.only = TRUE))
cytoscapePing()
cytoscapeVersionInfo()
#Checking if Cytoscape is running and version info
installApp('WikiPathways')
installApp('CyTargetLinker')
scz_pathways <- findPathwaysByText("Schizophrenia")
#Querying WikiPathways for relevant pathways using "Schizophrenia" as keyword
scz_pathways <- scz_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
#Filtering by species
scz_pathways.ids <- scz_pathways$id
adc_pathways <- findPathwaysByText("Addiction")
adc_pathways <- adc_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
adc_pathways.ids <- adc_pathways$id
import <- function(i)
{commandsRun(paste0('wikipathways import-as-network id=', i))
}
#RCy3 command to import queried pathways as networks by network WP ID
lapply(scz_pathways.ids,import)
lapply(adc_pathways.ids,import)
scz_pathways.names <- paste(scz_pathways$name, scz_pathways$species, sep = " - ")
adc_pathways.names <- paste(adc_pathways$name, adc_pathways$species, sep = " - ")
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- intersection_names
#Adding the intersections to a new column in the df
intersect_df <- intersect_df %>% mutate_all(~na_if(.,""))
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- cbind(intersect_df, scz_pathways.ids, adc_pathways.ids)
intersect_df <- intersect_df %>%
select (scz_pathways.ids,Var1, adc_pathways.ids,Var2,intersection_names)
names(intersect_df) <- c("SCZ WP ID","SCZ pathway","ADC WP ID","Addiction pathway", "Intersections")
View(intersect_df)
write.csv(intersect_df, file = "CSVs/Intersections.csv")
#Checking if Cytoscape is running and version info
apps <- c("WikiPathways", "CyTargetLinker")
?cyAppInstalled
getAppStatus(CyTargetLinker)
getAppStatus("CyTargetLinker")
app_status <- getAppStatus(apps)
apps <- c("WikiPathways", "CyTargetLinker")
app_status <- getAppStatus(apps)
if (app_status$installed == FALSE) {
installApp(apps)
cat(paste(app, "has been installed"))
} else {
cat(paste(app, "is already installed"))
}
app_status
app_status <- lapply(apps,getAppStatus)
app_status
if (app_status$installed == FALSE) {
installApp(apps)
cat(paste(app, "has been installed"))
} else {
cat(paste(app, "is already installed"))
}
getAppStatus("CyTargetLinker")
if (grep1("status: Uninstalled",app_status)) {
installApp(apps)
cat(paste(app, "has been installed"))
} else {
cat(paste(app, "is already installed"))
}
if (grep("status: Uninstalled",app_status)) {
installApp(apps)
cat(paste(app, "has been installed"))
} else {
cat(paste(app, "is already installed"))
}
apps <- c("WikiPathways", "CyTargetLinker")
app_status <- lapply(apps,getAppStatus)
if (grep("status: Uninstalled",app_status)) {
installApp(apps)
cat(paste(app, "has been installed"))
} else {
cat(paste(app, "is already installed"))
}
app <- c("WikiPathways", "CyTargetLinker")
app_status <- lapply(apps,getAppStatus)
if (grep("status: Uninstalled",app_status)) {
installApp(apps)
cat(paste(app, "has been installed"))
} else {
cat(paste(app, "is already installed"))
}
if (grep("status: Uninstalled",app_status)) {
installApp(app)
cat(paste(app, "has been installed"))
} else {
cat(paste(app, "is already installed"))
}
app <- c("WikiPathways", "CyTargetLinker")
app_status <- lapply(app,getAppStatus)
if (grep("status: Uninstalled",app_status)) {
installApp(app)
cat(paste(app, "has been installed"))
} else {
cat(paste(app, "is already installed"))
}
app_status
#Checking if Cytoscape is running and version info
installApp('WikiPathways')
installApp('CyTargetLinker')
remove.packages("RCy3", lib="~/R/win-library/4.1")
remove.packages("dplyr", lib="~/R/win-library/4.1")
sessionInfo()
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
#dplyr v.1.1.2; BiocManager v. 1.30.22; rWikiPathways 1.14.0; RCy3 2.14.2
setwd("~/GitHub/SCZ-CNV")
packages <- c("dplyr")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
install.packages(packages[!installed_packages])
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#'n' is to deny BiocManager packages updadates
invisible(lapply(c("dplyr","rWikiPathways","RCy3"), require, character.only = TRUE))
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
#'n' is to deny BiocManager packages updadates
invisible(lapply(c("dplyr","rWikiPathways","RCy3"), require, character.only = TRUE))
cytoscapePing()
deleteAllNetworks
deleteAllNetworks()
cytoscapeVersionInfo()
#Checking if Cytoscape is running and version info
installApp('WikiPathways')
installApp('CyTargetLinker')
scz_pathways <- findPathwaysByText("Schizophrenia")
#Querying WikiPathways for relevant pathways using "Schizophrenia" as keyword
scz_pathways <- scz_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
#Filtering by species
scz_pathways.ids <- scz_pathways$id
adc_pathways <- findPathwaysByText("Addiction")
adc_pathways <- adc_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
adc_pathways.ids <- adc_pathways$id
import <- function(i)
{commandsRun(paste0('wikipathways import-as-network id=', i))
}
#RCy3 command to import queried pathways as networks by network WP ID
lapply(scz_pathways.ids,import)
lapply(adc_pathways.ids,import)
scz_pathways.names <- paste(scz_pathways$name, scz_pathways$species, sep = " - ")
adc_pathways.names <- paste(adc_pathways$name, adc_pathways$species, sep = " - ")
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- intersection_names
#Adding the intersections to a new column in the df
intersect_df <- intersect_df %>% mutate_all(~na_if(.,""))
#Some pathways do not have any overlaps, so the field in the df is marked as NA
intersect_df <- cbind(intersect_df, scz_pathways.ids, adc_pathways.ids)
intersect_df <- intersect_df %>%
select (scz_pathways.ids,Var1, adc_pathways.ids,Var2,intersection_names)
names(intersect_df) <- c("SCZ WP ID","SCZ pathway","ADC WP ID","Addiction pathway", "Intersections")
View(intersect_df)
getAllNodes
getAllNodes()
getXrefList()
getXrefList(current)
?getXrefList
?getAnnotationList
getAnnotationList
getAnnotationList()
getAnnotationList()
get <- getAnnotationList()
get
?getNodeProperty
?getTableColumns
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getInfo <- getTableColumns("node", c("name","XrefDatasource","XrefID"))
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
scz_pathways <- findPathwaysByText("Schizophrenia")
#Querying WikiPathways for relevant pathways using "Schizophrenia" as keyword
scz_pathways <- scz_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
#Filtering by species
scz_pathways.ids <- scz_pathways$id
adc_pathways <- findPathwaysByText("Addiction")
adc_pathways <- adc_pathways %>%
dplyr::filter(species %in% c("Homo sapiens", "Rattus norvegicus", "Mus musculus"))
adc_pathways.ids <- adc_pathways$id
import <- function(i)
{commandsRun(paste0('wikipathways import-as-network id=', i))
}
scz_pathways.names <- paste(scz_pathways$name, scz_pathways$species, sep = " - ")
adc_pathways.names <- paste(adc_pathways$name, adc_pathways$species, sep = " - ")
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getInfo <- getTableColumns("node", c("name","XrefDatasource","XrefID"))
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
intersection_names <- sapply(df_results, function(x) x$intersection_names)
intersect_df$intersection_names <- intersection_names
#Adding the intersections to a new column in the df
intersect_df <- intersect_df %>% mutate_all(~na_if(.,""))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getInfo <- getTableColumns("node", c("name","XrefDatasource","XrefId"))
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
getIntersections
getTableColumns("node",c("name","XrefId"))
View(df_results)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getInfo <- getTableColumns("node", c("name","XrefDatasource","XrefId"))
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
intersect_info <- vector("character", nrow(intersect_df))
intersect_info <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getInfo <- getTableColumns("node", c("name","XrefDatasource","XrefId"))
intersect_info <- getInfo[row]
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getInfo <- getTableColumns("node", c("name","XrefDatasource","XrefId"))
intersect_info <- getInfo
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
df_results <- cbind(df_results, intersect_info)
View(df_results)
View(df_results)
intersect_info <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getInfo <- getTableColumns("node", c("name","XrefDatasource","XrefId"))
intersect_info <- paste(getInfo$name, getInfo$XrefDatasource, getInfo$XrefId)
return(intersect_info)
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
}
df_results <- apply(intersect_df, 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
df_results <- cbind(df_results, intersect_info)
View(df_results)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
intersect_df$intersection_info <- NA
intersect_df$intersection_info <- apply(intersect_df, 1, function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
getInfo <- getTableColumns("node", c("name","XrefDatasource","XrefId"))
intersect_info <- paste(getInfo$name, getInfo$XrefDatasource, getInfo$XrefId)
return(intersect_info)
getIntersections <- as.character(getAllNodes())
#Getting the nodes resulting in the intersection networks
list(intersection_names = paste(getIntersections,collapse = ", "))
#Extracting the names of these nodes and making them more legible
})
View(intersect_df)
intersect_df$name <- NA
intersect_df$XrefDatasource <- NA
intersect_df$XrefId <- NA
intersect_df <- t(apply(intersect_df,1,function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
info <- getTableColumns("node", c("name","XrefDatasource","XrefId"))
info_vector <- c(info$name, info$XrefDatasource, info$XrefID)
names(info_vector) <- c("Name", "XrefDatasource", "XrefId")
}))
#Merging networks with 'intersect' parameter
info <- getTableColumns("node", c("name","XrefDatasource","XrefId"))
info_vector <- c(info$name, info$XrefDatasource, info$XrefID)
names(info_vector) <- c("Name", "XrefDatasource", "XrefId")
intersect_df <- t(apply(intersect_df,1,function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
info <- getTableColumns("node", c("name","XrefDatasource","XrefId"))
info_vector <- c(info$name, info$XrefDatasource, info$XrefID)
names(info_vector) <- c("Name", "XrefDatasource", "XrefId")
}))
intersect_df <- t(apply(intersect_df,1,function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
info <- getTableColumns("node", c("name","XrefDatasource","XrefId"))
info_vector <- c(info$name, info$XrefDatasource, info$XrefID)
}))
intersect_df <- data.frame(t(intersect_df))
View(intersect_df)
View(intersect_df)
