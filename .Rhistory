#Running query to get AOPid-title mappings
for (i in 1:ncol(aopmap)) {
for (j in 1:nrow(aopmap)) {
aopmap[j, i] <- gsub('"', '', aopmap[j, i])
}
}
#Removing quotation marks from df
keaoppairs <- merge(keaoppairs,aopmap,by="AOPid",all.x=FALSE)
#Mapping AOPids to AOPtitles using mapping file
keaoppairs <- keaoppairs %>%
rename(KEid_target = KEid,
AOPid_source = AOPid)
keaoppairs$KEid <- keaoppairs$KEid_target
keaoppairs$AOPid <- keaoppairs$AOPid_source
keaoppairs <- keaoppairs[,c("KEid_target","KEid","AOPid_source","AOPid","AOPtitle")]
#Reordering columns
write.table(keaoppairs,file=paste0(other_savepath,sprintf("/keaoppairs%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=t,ta,s,sa,sa delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList= -- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("/keaoppairs%s.tsv",sub("top","",deparse(substitute(input)))))))
Sys.sleep(0.5)
renameNetwork(sprintf("Top quarter key events - AOPs%s",sub("top","",deparse(substitute(input)))))
}
getkeaoppairs(top_selected)
keaopnetwork_selected <- getNetworkName()
getkeaoppairs(top_all)
keaopnetwork_all <- getNetworkName()
getaopaopairs <- function(input) {
keaoppairs <- keensgpairs[keensgpairs$KEid %in% input$KEid,"AOPid"]
keaoppairs <- unique(separate_rows(keaoppairs,AOPid,sep="; "))
#For top quarter KEs, get which unique AOPs these are taken from
sparqlquery("AOP-Wiki","aopao.txt","aopao")
#Getting full list of which AOs are associated to which AOPs
aopaopairs <- aopao[aopao$AOPid %in% keaoppairs$AOPid,]
#Filtering AOP-AO list by AOPs associated with top quarter KEs
sparqlquery("AOP-Wiki","aopmap.txt","aopmap")
#Running query to get AOPid-title mappings
for (i in 1:ncol(aopmap)) {
for (j in 1:nrow(aopmap)) {
aopmap[j, i] <- gsub('"', '', aopmap[j, i])
}
}
#Removing quotation marks from df
aopaopairs <- merge(aopaopairs,aopmap,by="AOPid",all.x=FALSE)
#Mapping AOPids to AOPtitles using mapping file
sparqlquery("AOP-Wiki","aomap.txt","aomap")
for (i in 1:ncol(aomap)) {
for (j in 1:nrow(aomap)) {
aomap[j, i] <- gsub('"', '', aomap[j, i])
}
}
#Removing quotation marks from df
aopaopairs <- merge(aopaopairs,aomap,by="AOid",all.x=FALSE)
#Mapping AOids to AOtitles using mapping file
aopaopairs <- aopaopairs %>%
rename(AOPid_target = AOPid,
AOid_source = AOid)
aopaopairs$AOid <- aopaopairs$AOid_source
aopaopairs$AOPid <- aopaopairs$AOPid_target
aopaopairs <- aopaopairs[,c("AOid_source","AOPid_target","AOid","AOtitle","AOPid","AOPtitle")]
#Reordering columns
write.table(aopaopairs,file=paste0(other_savepath,sprintf("/aopaopairs%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=s,t,sa,sa,ta,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList= -- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("/aopaopairs%s.tsv",sub("top","",deparse(substitute(input)))))))
Sys.sleep(0.5)
renameNetwork(sprintf("AOP-AO pairs for top AOPs in top quarter KEs%s",sub("top","",deparse(substitute(input)))))
}
getaopaopairs(top_selected)
aopaonetwork_selected <- getNetworkName()
getaopaopairs(top_all)
aopaonetwork_all <- getNetworkName()
mergeaop <- function (input){
aopaonetwork <- get(paste0("aopaonetwork_",input))
keaopnetwork <- get(paste0("keaopnetwork_", input))
kegenenetwork <- get(paste0("kegenenetwork_",input))
altmergeNetworks(sources=c(aopaonetwork,keaopnetwork),
title = "KE-AOP-AO merged network",
operation="union",
nodeKeys=c("AOPid","AOPid"))
renameNetwork(paste0("KE-AOP-AO merged network_",input))
keaopaomerged <- getNetworkName()
altmergeNetworks(sources=c(keaopaomerged,kegenenetwork),
title="gene-KE-AOP-AO merged network",
operation="union",
nodeKeys=c("KEid","KEid"))
renameNetwork(paste0("gene-KE-AOP-AO merged network_",input))
mapTableColumn("Ensembl","Human","Ensembl","HGNC")
commandsRun(sprintf('table export options=CSV outputFile="%s" table="%s"',paste0(other_savepath,paste0("gene-KE-AOP-AO merged network_",input," node")),paste0("gene-KE-AOP-AO merged network_",input," default  node")))
nodetable <- read.table(paste0(other_savepath,paste0('gene-KE-AOP-AO merged network_',input," node.csv")), header=TRUE, sep=",")
nodetable <- nodetable %>%
rowwise() %>%
mutate(labels=paste(na.omit(c_across(all_of(c("KEtitle","AOPtitle","AOtitle","HGNC")))), collapse=""))
nodetable <- nodetable %>%
rowwise() %>%
mutate(type = case_when(
str_detect(AOPid, "\\S") ~ "AOP",
str_detect(AOid, "\\S") ~ "AO",
str_detect(KEid, "\\S") ~ "KE",
str_detect(Ensembl, "\\S") ~ "gene",
TRUE ~ NA_character_
))
#write.table(nodetable, file=paste0(other_savepath,paste0('gene-KE-AOP-AO merged network_',input," node.csv")),quote=FALSE,sep=",",row.names=FALSE)
loadTableData(nodetable,data.key.column = "name",table="node",table.key.column = "name")
lapply(c(aopaonetwork,keaopnetwork,kegenenetwork,keaopaomerged),deleteNetwork)
}
mergeaop("selected")
deleteAllNetworks()
gettop <- function(input) {
freq_df <- input$ke_freq_df_full
cutoff_ke <- quantile(freq_df$KE_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for KE frequency (top 25% most frequent)
topquarter_ke <- freq_df[freq_df$KE_frequency >= cutoff_ke & !is.na(freq_df$KE_frequency),,drop=FALSE]
#Selecting the top 25% most frequently matched with KEs and associated information
}
top_selected <- gettop(aoplink_selected)
top_all <- gettop(aoplink_all)
getkegenepairs <- function(input) {
topquarter_ke <- input
topquarter_ke_sep <- separate_rows(topquarter_ke,KEEnsembl,sep="; ")
mergedkeensg <- union(topquarter_ke_sep$KEid,topquarter_ke_sep$KEEnsembl)
#topquarter_ke_node <- data.frame(combined=mergedkeensg)
topquarter_ke<- topquarter_ke_sep[,c("KEid","KEEnsembl")]
topquarter_ke <- topquarter_ke %>%
rename(KEid_source = KEid,
KEEnsembl_target = KEEnsembl)
#Renaming columns to source and target for Cytoscape import
topquarter_ke$KEid <- topquarter_ke$KEid_source
topquarter_ke$Ensembl <- topquarter_ke$KEEnsembl_target
#Creating duplicate columns of KEid and KEEnsembl to be used as source and target attributes
#This allows new columns in the network to easily select Ensembl and KE nodes separately etc.
#Without this, both KE and Ensembl nodes are stored in the 'names' column due to how Cytoscape import works
sparqlquery("AOP-Wiki","kemap.txt","kemap")
#Running query to get KEid-title mappings
for (i in 1:ncol(kemap)) {
for (j in 1:nrow(kemap)) {
kemap[j, i] <- gsub('"', '', kemap[j, i])
}
}
#Removing quotation marks from df
topquarter_ke <- merge(topquarter_ke,kemap,by="KEid",all.x=FALSE)
#Merging the mapping and node tables to extend node table with KE titles
topquarter_ke <- topquarter_ke[,c("KEid_source","KEEnsembl_target","KEid","KEtitle","Ensembl")]
#Reordering table columns
#write.table(topquarter_ke_node, file=paste0(getwd(),"/topquarter_ke_node.tsv"),sep="\t",quote=FALSE,row.names=FALSE)
write.table(topquarter_ke, file=paste0(other_savepath,sprintf("/topquarter_ke_edge%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
#Writing the KE-gene table to file for Cytoscape import
commandsRun(sprintf('network import file columnTypeList=s,t,sa,sa,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("/topquarter_ke_edge%s.tsv",sub("top","",deparse(substitute(input)))))))
Sys.sleep(0.5)
renameNetwork(sprintf("Top quarter key events - risk genes%s",sub("top","",deparse(substitute(input)))))
}
getkegenepairs(top_selected)
kegenenetwork_selected <- getNetworkName()
getkegenepairs(top_all)
kegenenetwork_all <- getNetworkName()
getkeaoppairs <- function(input) {
keaoppairs <- keensgpairs[keensgpairs$KEid %in% input$KEid,c("KEid","AOPid")]
#For top quarter KEs, get which AOPs these are taken from from result of initial AOP-Wiki query
keaoppairs <- separate_rows(keaoppairs,AOPid,sep="; ")
sparqlquery("AOP-Wiki","aopmap.txt","aopmap")
#Running query to get AOPid-title mappings
for (i in 1:ncol(aopmap)) {
for (j in 1:nrow(aopmap)) {
aopmap[j, i] <- gsub('"', '', aopmap[j, i])
}
}
#Removing quotation marks from df
keaoppairs <- merge(keaoppairs,aopmap,by="AOPid",all.x=FALSE)
#Mapping AOPids to AOPtitles using mapping file
keaoppairs <- keaoppairs %>%
rename(KEid_target = KEid,
AOPid_source = AOPid)
keaoppairs$KEid <- keaoppairs$KEid_target
keaoppairs$AOPid <- keaoppairs$AOPid_source
keaoppairs <- keaoppairs[,c("KEid_target","KEid","AOPid_source","AOPid","AOPtitle")]
#Reordering columns
write.table(keaoppairs,file=paste0(other_savepath,sprintf("/keaoppairs%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=t,ta,s,sa,sa delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList= -- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("/keaoppairs%s.tsv",sub("top","",deparse(substitute(input)))))))
Sys.sleep(0.5)
renameNetwork(sprintf("Top quarter key events - AOPs%s",sub("top","",deparse(substitute(input)))))
}
getkeaoppairs(top_selected)
keaopnetwork_selected <- getNetworkName()
getkeaoppairs(top_all)
keaopnetwork_all <- getNetworkName()
getaopaopairs <- function(input) {
keaoppairs <- keensgpairs[keensgpairs$KEid %in% input$KEid,"AOPid"]
keaoppairs <- unique(separate_rows(keaoppairs,AOPid,sep="; "))
#For top quarter KEs, get which unique AOPs these are taken from
sparqlquery("AOP-Wiki","aopao.txt","aopao")
#Getting full list of which AOs are associated to which AOPs
aopaopairs <- aopao[aopao$AOPid %in% keaoppairs$AOPid,]
#Filtering AOP-AO list by AOPs associated with top quarter KEs
sparqlquery("AOP-Wiki","aopmap.txt","aopmap")
#Running query to get AOPid-title mappings
for (i in 1:ncol(aopmap)) {
for (j in 1:nrow(aopmap)) {
aopmap[j, i] <- gsub('"', '', aopmap[j, i])
}
}
#Removing quotation marks from df
aopaopairs <- merge(aopaopairs,aopmap,by="AOPid",all.x=FALSE)
#Mapping AOPids to AOPtitles using mapping file
sparqlquery("AOP-Wiki","aomap.txt","aomap")
for (i in 1:ncol(aomap)) {
for (j in 1:nrow(aomap)) {
aomap[j, i] <- gsub('"', '', aomap[j, i])
}
}
#Removing quotation marks from df
aopaopairs <- merge(aopaopairs,aomap,by="AOid",all.x=FALSE)
#Mapping AOids to AOtitles using mapping file
aopaopairs <- aopaopairs %>%
rename(AOPid_target = AOPid,
AOid_source = AOid)
aopaopairs$AOid <- aopaopairs$AOid_source
aopaopairs$AOPid <- aopaopairs$AOPid_target
aopaopairs <- aopaopairs[,c("AOid_source","AOPid_target","AOid","AOtitle","AOPid","AOPtitle")]
#Reordering columns
write.table(aopaopairs,file=paste0(other_savepath,sprintf("/aopaopairs%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=s,t,sa,sa,ta,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList= -- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("/aopaopairs%s.tsv",sub("top","",deparse(substitute(input)))))))
Sys.sleep(0.5)
renameNetwork(sprintf("AOP-AO pairs for top AOPs in top quarter KEs%s",sub("top","",deparse(substitute(input)))))
}
getaopaopairs(top_selected)
aopaonetwork_selected <- getNetworkName()
getaopaopairs(top_all)
aopaonetwork_all <- getNetworkName()
mergeaop <- function (input){
aopaonetwork <- get(paste0("aopaonetwork_",input))
keaopnetwork <- get(paste0("keaopnetwork_", input))
kegenenetwork <- get(paste0("kegenenetwork_",input))
altmergeNetworks(sources=c(aopaonetwork,keaopnetwork),
title = "KE-AOP-AO merged network",
operation="union",
nodeKeys=c("AOPid","AOPid"))
renameNetwork(paste0("KE-AOP-AO merged network_",input))
keaopaomerged <- getNetworkName()
altmergeNetworks(sources=c(keaopaomerged,kegenenetwork),
title="gene-KE-AOP-AO merged network",
operation="union",
nodeKeys=c("KEid","KEid"))
renameNetwork(paste0("gene-KE-AOP-AO merged network_",input))
mapTableColumn("Ensembl","Human","Ensembl","HGNC")
commandsRun(sprintf('table export options=CSV outputFile="%s" table="%s"',paste0(other_savepath,paste0("gene-KE-AOP-AO merged network_",input," node")),paste0("gene-KE-AOP-AO merged network_",input," default  node")))
nodetable <- read.table(paste0(other_savepath,paste0('gene-KE-AOP-AO merged network_',input," node.csv")), header=TRUE, sep=",")
nodetable <- nodetable %>%
rowwise() %>%
mutate(labels=paste(na.omit(c_across(all_of(c("KEtitle","AOPtitle","AOtitle","HGNC")))), collapse=""))
nodetable <- nodetable %>%
rowwise() %>%
mutate(type = case_when(
str_detect(AOPid, "\\S") ~ "AOP",
str_detect(AOid, "\\S") ~ "AO",
str_detect(KEid, "\\S") ~ "KE",
str_detect(Ensembl, "\\S") ~ "gene",
TRUE ~ NA_character_
))
#write.table(nodetable, file=paste0(other_savepath,paste0('gene-KE-AOP-AO merged network_',input," node.csv")),quote=FALSE,sep=",",row.names=FALSE)
loadTableData(nodetable,data.key.column = "name",table="node",table.key.column = "name")
deleteTableColumn("shared.name")
lapply(c(aopaonetwork,keaopnetwork,kegenenetwork,keaopaomerged),deleteNetwork)
}
mergeaop("selected")
deleteAllNetworks()
gettop <- function(input) {
freq_df <- input$ke_freq_df_full
cutoff_ke <- quantile(freq_df$KE_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for KE frequency (top 25% most frequent)
topquarter_ke <- freq_df[freq_df$KE_frequency >= cutoff_ke & !is.na(freq_df$KE_frequency),,drop=FALSE]
#Selecting the top 25% most frequently matched with KEs and associated information
}
top_selected <- gettop(aoplink_selected)
top_all <- gettop(aoplink_all)
getkegenepairs <- function(input) {
topquarter_ke <- input
topquarter_ke_sep <- separate_rows(topquarter_ke,KEEnsembl,sep="; ")
mergedkeensg <- union(topquarter_ke_sep$KEid,topquarter_ke_sep$KEEnsembl)
#topquarter_ke_node <- data.frame(combined=mergedkeensg)
topquarter_ke<- topquarter_ke_sep[,c("KEid","KEEnsembl")]
topquarter_ke <- topquarter_ke %>%
rename(KEid_source = KEid,
KEEnsembl_target = KEEnsembl)
#Renaming columns to source and target for Cytoscape import
topquarter_ke$KEid <- topquarter_ke$KEid_source
topquarter_ke$Ensembl <- topquarter_ke$KEEnsembl_target
#Creating duplicate columns of KEid and KEEnsembl to be used as source and target attributes
#This allows new columns in the network to easily select Ensembl and KE nodes separately etc.
#Without this, both KE and Ensembl nodes are stored in the 'names' column due to how Cytoscape import works
sparqlquery("AOP-Wiki","kemap.txt","kemap")
#Running query to get KEid-title mappings
for (i in 1:ncol(kemap)) {
for (j in 1:nrow(kemap)) {
kemap[j, i] <- gsub('"', '', kemap[j, i])
}
}
#Removing quotation marks from df
topquarter_ke <- merge(topquarter_ke,kemap,by="KEid",all.x=FALSE)
#Merging the mapping and node tables to extend node table with KE titles
topquarter_ke <- topquarter_ke[,c("KEid_source","KEEnsembl_target","KEid","KEtitle","Ensembl")]
#Reordering table columns
#write.table(topquarter_ke_node, file=paste0(getwd(),"/topquarter_ke_node.tsv"),sep="\t",quote=FALSE,row.names=FALSE)
write.table(topquarter_ke, file=paste0(other_savepath,sprintf("/topquarter_ke_edge%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
#Writing the KE-gene table to file for Cytoscape import
commandsRun(sprintf('network import file columnTypeList=s,t,sa,sa,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("/topquarter_ke_edge%s.tsv",sub("top","",deparse(substitute(input)))))))
Sys.sleep(0.5)
renameNetwork(sprintf("Top quarter key events - risk genes%s",sub("top","",deparse(substitute(input)))))
}
getkegenepairs(top_selected)
kegenenetwork_selected <- getNetworkName()
getkegenepairs(top_all)
kegenenetwork_all <- getNetworkName()
getkeaoppairs <- function(input) {
keaoppairs <- keensgpairs[keensgpairs$KEid %in% input$KEid,c("KEid","AOPid")]
#For top quarter KEs, get which AOPs these are taken from from result of initial AOP-Wiki query
keaoppairs <- separate_rows(keaoppairs,AOPid,sep="; ")
sparqlquery("AOP-Wiki","aopmap.txt","aopmap")
#Running query to get AOPid-title mappings
for (i in 1:ncol(aopmap)) {
for (j in 1:nrow(aopmap)) {
aopmap[j, i] <- gsub('"', '', aopmap[j, i])
}
}
#Removing quotation marks from df
keaoppairs <- merge(keaoppairs,aopmap,by="AOPid",all.x=FALSE)
#Mapping AOPids to AOPtitles using mapping file
keaoppairs <- keaoppairs %>%
rename(KEid_target = KEid,
AOPid_source = AOPid)
keaoppairs$KEid <- keaoppairs$KEid_target
keaoppairs$AOPid <- keaoppairs$AOPid_source
keaoppairs <- keaoppairs[,c("KEid_target","KEid","AOPid_source","AOPid","AOPtitle")]
#Reordering columns
write.table(keaoppairs,file=paste0(other_savepath,sprintf("/keaoppairs%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=t,ta,s,sa,sa delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList= -- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("/keaoppairs%s.tsv",sub("top","",deparse(substitute(input)))))))
Sys.sleep(0.5)
renameNetwork(sprintf("Top quarter key events - AOPs%s",sub("top","",deparse(substitute(input)))))
}
getkeaoppairs(top_selected)
keaopnetwork_selected <- getNetworkName()
getkeaoppairs(top_all)
keaopnetwork_all <- getNetworkName()
getaopaopairs <- function(input) {
keaoppairs <- keensgpairs[keensgpairs$KEid %in% input$KEid,"AOPid"]
keaoppairs <- unique(separate_rows(keaoppairs,AOPid,sep="; "))
#For top quarter KEs, get which unique AOPs these are taken from
sparqlquery("AOP-Wiki","aopao.txt","aopao")
#Getting full list of which AOs are associated to which AOPs
aopaopairs <- aopao[aopao$AOPid %in% keaoppairs$AOPid,]
#Filtering AOP-AO list by AOPs associated with top quarter KEs
sparqlquery("AOP-Wiki","aopmap.txt","aopmap")
#Running query to get AOPid-title mappings
for (i in 1:ncol(aopmap)) {
for (j in 1:nrow(aopmap)) {
aopmap[j, i] <- gsub('"', '', aopmap[j, i])
}
}
#Removing quotation marks from df
aopaopairs <- merge(aopaopairs,aopmap,by="AOPid",all.x=FALSE)
#Mapping AOPids to AOPtitles using mapping file
sparqlquery("AOP-Wiki","aomap.txt","aomap")
for (i in 1:ncol(aomap)) {
for (j in 1:nrow(aomap)) {
aomap[j, i] <- gsub('"', '', aomap[j, i])
}
}
#Removing quotation marks from df
aopaopairs <- merge(aopaopairs,aomap,by="AOid",all.x=FALSE)
#Mapping AOids to AOtitles using mapping file
aopaopairs <- aopaopairs %>%
rename(AOPid_target = AOPid,
AOid_source = AOid)
aopaopairs$AOid <- aopaopairs$AOid_source
aopaopairs$AOPid <- aopaopairs$AOPid_target
aopaopairs <- aopaopairs[,c("AOid_source","AOPid_target","AOid","AOtitle","AOPid","AOPtitle")]
#Reordering columns
write.table(aopaopairs,file=paste0(other_savepath,sprintf("/aopaopairs%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=s,t,sa,sa,ta,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList= -- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("/aopaopairs%s.tsv",sub("top","",deparse(substitute(input)))))))
Sys.sleep(0.5)
renameNetwork(sprintf("AOP-AO pairs for top AOPs in top quarter KEs%s",sub("top","",deparse(substitute(input)))))
}
getaopaopairs(top_selected)
aopaonetwork_selected <- getNetworkName()
getaopaopairs(top_all)
aopaonetwork_all <- getNetworkName()
mergeaop <- function (input){
aopaonetwork <- get(paste0("aopaonetwork_",input))
keaopnetwork <- get(paste0("keaopnetwork_", input))
kegenenetwork <- get(paste0("kegenenetwork_",input))
altmergeNetworks(sources=c(aopaonetwork,keaopnetwork),
title = "KE-AOP-AO merged network",
operation="union",
nodeKeys=c("AOPid","AOPid"))
renameNetwork(paste0("KE-AOP-AO merged network_",input))
keaopaomerged <- getNetworkName()
altmergeNetworks(sources=c(keaopaomerged,kegenenetwork),
title="gene-KE-AOP-AO merged network",
operation="union",
nodeKeys=c("KEid","KEid"))
renameNetwork(paste0("gene-KE-AOP-AO merged network_",input))
mapTableColumn("Ensembl","Human","Ensembl","HGNC")
commandsRun(sprintf('table export options=CSV outputFile="%s" table="%s"',paste0(other_savepath,paste0("gene-KE-AOP-AO merged network_",input," node")),paste0("gene-KE-AOP-AO merged network_",input," default  node")))
nodetable <- read.table(paste0(other_savepath,paste0('gene-KE-AOP-AO merged network_',input," node.csv")), header=TRUE, sep=",")
nodetable <- nodetable %>%
rowwise() %>%
mutate(label=paste(na.omit(c_across(all_of(c("KEtitle","AOPtitle","AOtitle","HGNC")))), collapse=""))
nodetable <- nodetable %>%
rowwise() %>%
mutate(type = case_when(
str_detect(AOPid, "\\S") ~ "AOP",
str_detect(AOid, "\\S") ~ "AO",
str_detect(KEid, "\\S") ~ "KE",
str_detect(Ensembl, "\\S") ~ "gene",
TRUE ~ NA_character_
))
#write.table(nodetable, file=paste0(other_savepath,paste0('gene-KE-AOP-AO merged network_',input," node.csv")),quote=FALSE,sep=",",row.names=FALSE)
loadTableData(nodetable,data.key.column = "name",table="node",table.key.column = "name")
deleteTableColumn("shared.name")
lapply(c(aopaonetwork,keaopnetwork,kegenenetwork,keaopaomerged),deleteNetwork)
}
mergeaop("selected")
mergeaop("all")
?RCy3
##AOP VISUALISATION -------------------------------------------------------------------------------------------------------------------------------
createVisualStyle("AOP_vis")
setVisualStyle("AOP_vis")
setNodeLabelMapping(
table.column="label",
style.name="AOP_vis"
)
?setNodeColorMapping
setNodeColorMapping(
table.column = "type",
mapping.type="d",
table.column.values = c("AO","AOP","KE","gene"),
colors=c("#E31A1C","#FEB24C","#FA9FB5","#74C476")
)
setNodeColorMapping(
table.column = "type",
mapping.type="d",
table.column.values = c("AO","AOP","KE","gene"),
colors=c("#E31A1C","#FEB24C","#FA9FB5","#74C476"),
style.name="AOP_vis"
)
?setNodeShapeMapping
getNodeShapes()
setNodeShapeDefault(
new.shape="ELLIPSE",
style.name="AOP_vis"
)
setNodeShapeDefault(
new.shape="ROUND_RECTANGLE",
style.name="AOP_vis"
)
setNodeShapeDefault(
new.shape="OCTAGON",
style.name="AOP_vis"
)
setNodeShapeDefault(
new.shape="VEE",
style.name="AOP_vis"
)
setNodeShapeDefault(
new.shape="PARALLELOGRAM",
style.name="AOP_vis"
)
setNodeShapeDefault(
new.shape="ROUND_RECTANGLE",
style.name="AOP_vis"
)
setNodeSizeDefault (
new.size = "30",
style.name="AOP_vis"
)
setNodeSizeDefault (
new.size = "150",
style.name="AOP_vis"
)
setNodeSizeDefault (
new.size = "100",
style.name="AOP_vis"
)
setNodeSizeDefault (
new.size = "70",
style.name="AOP_vis"
)
?setNodeSizeDefault
setNodeFontSizeDefault (
new.size = "8",
style.name = "AOP_vis"
)
setNodeFontSizeDefault (
new.size = "145",
style.name = "AOP_vis"
)
setNodeFontSizeDefault (
new.size = "15",
style.name = "AOP_vis"
)
?setEdgeSourceArrowMapping
?setEdgeSourceArrowDefault
?setEdgeSourceArrowShapeDefault
setEdgeSourceArrowShapeDefault(
new.shape = "DELTA",
style.name="AOP_vis"
)
getArrowShapes()
setEdgeColorDefault(
new.color="#BCBCBC"
)
setEdgeColorDefault(
new.color="#BCBCBC",
style.name="AOP_vis"
)
?layoutNetwork
getLayoutNames()
