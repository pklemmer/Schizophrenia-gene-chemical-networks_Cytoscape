nodetable %>% mutate(Origin = "WikiPathways")
nodetable <- getTableColumns("node")
class(nodetable)
?mutate
nodetable %>% mutate(Origin = "WikiPathways")
View(nodetable)
nodetable %>% mutate(Origin = NA)
View(nodetable)
nodetable <- getTableColumns("node")
nodetable$Origin <- paste("WikiPathways")
View(nodetable)
loadTableData(nodetable)
loadTableData(nodetable,"names","node","name")
loadTableData(nodetable,"row.names","node","name")
loadTableData(nodetable,"row.names","node","name")
View(nodetable[,"row.names"])
View(nodetable[row.names])
View(nodetable["row.names"])
View(nodetable[name])
View(nodetable["anme"])
View(nodetable["name"])
nodetable <- getTableColumns("node")
nodetable$Origin <- paste("WikiPathways")
nodetable <- getTableColumns("node")
loadTableData(nodetable)
nodetable <- getTableValue("node")
nodetable <- getTableValue("node","GRIN2B","name")
commandsRun(table list includePrivate=false type=node)
commandsRun("table list includePrivate=false type=node")
table create column columnName=Origin table="Phosphodiesterases in neuronal function - Homo sapiens default node" type=string
commandsRun("table create column columnName=Origin table=Phosphodiesterases in neuronal function - Homo sapiens default node type=string")
commandsRun("table create column columnName=Origin table=Phosphodiesterases in neuronal function - Homo sapiens default node type=string")
commandsRun("table create column columnName=Origin table=Phosphodiesterases in neuronal function - Homo sapiens default node type=string")
commandsRun("table list includePrivate=false type=node")
commandsRun("table create column columnName=Origin table=Phosphodiesterases in neuronal function - Homo sapiens default  node type=string")
commandsRun("table set values columnName=Origin handleEquations=false rowList=all table=Phosphodiesterases in neuronal function - Homo sapiens default  node value=WikiPathways")
deleteAllNetworks()
cytoscapePing()
cytoscapeVersionInfo()
getpathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% c("Homo sapiens","Rattus norvegicus","Mus musculus"))
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
commandsRun("table list includePrivate=false type=node")
#Getting the name of the node table of the previously imported network
commandsRun("table create column columnName=Origin table=Phosphodiesterases in neuronal function - Homo sapiens default  node type=string")
#Creating a new column named "Origin" in which the source of the node is stored
commandsRun("table set values columnName=Origin handleEquations=false rowList=all table=Phosphodiesterases in neuronal function - Homo sapiens default  node value=WikiPathways")
#Filling the new "Origin" column with the source - "WikiPathways"
}
getpathways.wp("Schizophrenia")
wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
sczcnv <- sapply(wpids, function(k) paste0("WP",k))
lapply(c(Schizophrenia_wpids,sczcnv), import)
invisible(lapply(c("dplyr","httr","jsonlite","rWikiPathways","RCy3"), require, character.only = TRUE))
lapply(c(Schizophrenia_wpids,sczcnv), import)
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
nodetable <- commandsRun("table list includePrivate=false type=node")
#Getting the name of the node table of the previously imported network
commandsRun(sprintf("table create column columnName=Origin table=%s type=string",nodetable))
#Creating a new column named "Origin" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=Origin handleEquations=false rowList=all table=%s value=WikiPathways",nodetable))
#Filling the new "Origin" column with the source - "WikiPathways"
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network
commandsRun(sprintf("table create column columnName=Origin table=%s type=string",nodetable))
#Creating a new column named "Origin" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=Origin handleEquations=false rowList=all table=%s value=WikiPathways",nodetable))
#Filling the new "Origin" column with the source - "WikiPathways"
}
lapply(c(Schizophrenia_wpids,sczcnv), import)
deleteAllNetworks()
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
url<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (url)
}
disgenetRestUrl(netType = "gene-disease-net")
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
url<-disgenetRestUrl(netType)
restCall<-POST(url, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the 2 spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=WikiPathways",nodetable))
#Filling the new "NodeSource" column with the source - "WikiPathways"
}
geneDisParams_scz <- geneDisParams("CURATED","Schizophrenia","0.3")
#Specifying parameters of the GDA network to be imported
geneDisResult <- disgenetRestCall("gene-disease-net",geneDisParams_scz)
createNodeSource <- function() {list(
networkname <- getNetworkName(),
nodetable <- paste0(networkname," default  node"),
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the 2 spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable)),
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=WikiPathways",nodetable))
#Filling the new "NodeSource" column with the source - "WikiPathways"
)}
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
url<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (url)
}
disgenetRestUrl(netType = "gene-disease-net")
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
url<-disgenetRestUrl(netType)
restCall<-POST(url, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)
}
createNodeSource <- function() {list(
networkname <- getNetworkName(),
nodetable <- paste0(networkname," default  node"),
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the 2 spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable)),
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=WikiPathways",nodetable))
#Filling the new "NodeSource" column with the source - "WikiPathways"
)}
geneDisParams_scz <- geneDisParams("CURATED","Schizophrenia","0.3")
#Specifying parameters of the GDA network to be imported
geneDisResult <- mapply(disgenetRestCall("gene-disease-net",geneDisParams_scz),createNodeSource())
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
url<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (url)
}
disgenetRestUrl(netType = "gene-disease-net")
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
url<-disgenetRestUrl(netType)
restCall<-POST(url, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
geneDisParams_scz <- geneDisParams("CURATED","Schizophrenia","0.3")
#Specifying parameters of the GDA network to be imported
geneDisResult <- disgenetRestCall("gene-disease-net",geneDisParams_scz)
createNodeSource <- function() {list(
networkname <- getNetworkName(),
nodetable <- paste0(networkname," default  node"),
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the 2 spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable)),
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=WikiPathways",nodetable))
#Filling the new "NodeSource" column with the source - "WikiPathways"
)}
createNodeSource()
createNodeSource <- function() {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the 2 spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=WikiPathways",nodetable))
#Filling the new "NodeSource" column with the source - "WikiPathways"
}
createNodeSource()
createNodeSource <- function() {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the 2 spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=WikiPathways",nodetable))
#Filling the new "NodeSource" column with the source - "WikiPathways"
}
createNodeSource()
createNodeSource <- function() {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the 2 spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=WikiPathways",nodetable))
#Filling the new "NodeSource" column with the source - "WikiPathways"
}
getNetworkName()
paste0(getNetworkName()," default node")
DisGeNET-GDA - CURATED - Any - Any - Schizophrenia - 0.3:1.0 default node
deleteAllNetworks()
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
url<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (url)
}
disgenetRestUrl(netType = "gene-disease-net")
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
url<-disgenetRestUrl(netType)
restCall<-POST(url, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)
}
geneDisParams_scz <- geneDisParams("CURATED","Schizophrenia","0.3")
#Specifying parameters of the GDA network to be imported
geneDisResult <- disgenetRestCall("gene-disease-net",geneDisParams_scz)
createNodeSource <- function() {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=WikiPathways",nodetable))
#Filling the new "NodeSource" column with the source - "WikiPathways"
}
createNodeSource()
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%d value=%s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%d value=%s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
deleteAllNetworks
deleteAllNetworks()
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
#dplyr 1.1.2; httr 1.4.7;jsonlite 1.8.4; BiocManager 1.30.22; rWikiPathways 1.14.0; RCy3 2.14.2
#Cytoscape 3.10.1
setwd("~/GitHub/SCZ-CNV")
packages <- c("dplyr","httr","jsonlite")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
invisible(lapply(c("dplyr","httr","jsonlite","rWikiPathways","RCy3"), require, character.only = TRUE))
cytoscapePing()
cytoscapeVersionInfo()
getpathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% c("Homo sapiens","Rattus norvegicus","Mus musculus"))
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
}
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%d value=%s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
}
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
url<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (url)
}
disgenetRestUrl(netType = "gene-disease-net")
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
url<-disgenetRestUrl(netType)
restCall<-POST(url, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
geneDisParams_scz <- geneDisParams("CURATED","Schizophrenia","0.3")
geneDisResult <- disgenetRestCall("gene-disease-net",geneDisParams_scz)
#Importing DisGeNET disease-associated genes for SCZ
createNodeSource("DisGeNET")
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=%s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
#Importing DisGeNET disease-associated genes for SCZ
createNodeSource("DisGeNET")
getpathways.wp("Schizophrenia")
wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
sczcnv <- sapply(wpids, function(k) paste0("WP",k))
lapply(c(Schizophrenia_wpids,sczcnv), import)
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource("WikiPathways")
}
deleteAllNetworks
deleteAllNetworks()
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource("WikiPathways")
}
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
url<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (url)
}
disgenetRestUrl(netType = "gene-disease-net")
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
url<-disgenetRestUrl(netType)
restCall<-POST(url, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
geneDisParams_scz <- geneDisParams("CURATED","Schizophrenia","0.3")
geneDisResult <- disgenetRestCall("gene-disease-net",geneDisParams_scz)
#Importing DisGeNET disease-associated genes for SCZ
createNodeSource("DisGeNET")
getpathways.wp("Schizophrenia")
wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
sczcnv <- sapply(wpids, function(k) paste0("WP",k))
lapply(c(Schizophrenia_wpids,sczcnv), import)
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
}
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=%s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=%s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
}
getpathways.wp("Schizophrenia")
wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
sczcnv <- sapply(wpids, function(k) paste0("WP",k))
lapply(c(Schizophrenia_wpids,sczcnv), import)
?sprintf
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%s value=%s",c(nodetable,source)))
#Filling the new "NodeSource" column with the source
}
lapply(c(Schizophrenia_wpids,sczcnv), import)
lapply(c(Schizophrenia_wpids,sczcnv), import)
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%1$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%1$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
}
lapply(c(Schizophrenia_wpids,sczcnv), import)
lapply(c(Schizophrenia_wpids,sczcnv), import)
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,source))
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
}
lapply(c(Schizophrenia_wpids,sczcnv), import)
