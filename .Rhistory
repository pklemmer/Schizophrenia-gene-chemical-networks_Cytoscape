networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=fromWikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromDisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromPublication table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication.doi table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromSTRING table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
if ( source == "STRINGnode") {
commandsRun(sprintf('table set values columnName=%1$s handleEquations=false rowList="selected:true" table=%2$s value=1',source,nodetable))
}
else {
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Publication.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
#Function to create new column in node table specifying origin of network/node
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
disgeneturl<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (disgeneturl)
}
net <- "gene-disease-net"
disgenetRestUrl(netType = net)
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
disgeneturl<-disgenetRestUrl(netType)
restCall<-POST(disgeneturl, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
#Specifying parameters of the GDA network to be imported
# SCHIZOPHRENIA =======================================================================================================================
## IMPORTING AND MERGING ---------------------------------------------------------------------------------------------------------------
start_section("Importing and merging")
sparqlquery("wp","metadataquery.txt","WikiPathways-SPARQL-metadata")
#Getting the metadata of the endpoint used for the WikiPathways SPARQL queries
metadata.add("WikiPathways SPARQL endpoint metadata")
metadata.add(`WikiPathways-SPARQL-metadata`)
#Adding the fetched metadata to the metadata file for the session
#It is technically possible that the metadata would describe an earlier version of the RDF if it is updated while the script runs but this is unlikely
sparqlquery("wp","pathwayquery.txt","wp_pathwaylist")
#Getting a list of pathways corresponding to a keyword as per defined in the query
writeLines(wp_pathwaylist[["PWID"]], con="Data/WikiPathways/Pathwaylists/automaticpathways.txt")
#Saving the output pathway list to file
manualpathways <- readLines("Data/WikiPathways/Pathwaylists/manualpathways.txt")
#Reading a file containing a list of manually selected pathways
allpathways <- c(wp_pathwaylist[["PWID"]],manualpathways)
#Joining the list of manually and automatically selected pathways together
allpathways_URL <- paste0("<",allpathways,">")
#Adding <> around all entries for easier use in SPARQL queries
#URLs need to be surrounded by <> to be recognised as such
writeLines(allpathways_URL, con="Data/WikiPathways/Pathwaylists/allpathways.txt")
#Writing list of all pathways in SPARQL URL format to file
genedisparams.scz.df <- read.table("Data/DisGeNET/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
disgeneturl <- c()
#Preparing container for DisGeNET URL to be saved for addition to metadata file
apply(genedisparams.scz.df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
disgeneturl <<- disgenetRestUrl(net)
#Fetching the DisGeNET URL used to make this call
geneDisResult <- disgenetRestCall(net,gdp)
#Executing the DisGeNET query
createNodeSource("fromDisGeNET")
#Adding information about data source to each node
mapTableColumn("geneId","Human","Entrez Gene","Ensembl")
#Mapping Entrez Gene IDs to Ensembl IDs
renameTableColumn("geneName","DisGeNETname")
})
#Importing networks from DisGeNET
metadata.add(paste("DisGeNET URL:",disgeneturl))
metadata.add(paste("DisGeNET net type:",net))
metadata.add("")
#Adding the DisGeNET URL and net type used to add networks to the metadata file
sparqlquery("wp","nodequery.txt","wp_nodelist")
#Making a SPARQL query to the endpoint to get all nodes associated with a list of pathways
if (any(grepl("identifiers\\.org", wp_nodelist$Identifier))) {
# Checking whether the 'Identifier' column contains the identifiers.org URL
#This is to avoid issues later when the identifiers.org part is removed and the code is reran
wp_nodelist$WPNodeIDType <- gsub(".*/([^/]+)/.*", "\\1", wp_nodelist$Identifier)
#If 'identifiers.org' is still in the column, extract part of the string into a new column to see what type the identifier is
} else {
# If 'identifiers.org' is not found, do nothing
}
wp_nodelist[] <- lapply(wp_nodelist, function(x) str_replace_all(x, "https://identifiers\\.org/([^/]+)/", ""))
#Selecting and removing "https://identifiers.org/xyz" from every row in the df for improved readability
wp_nodelist$CNVassociated <- ifelse(grepl("copy number | CNV | deletion",wp_nodelist$PathwayTitle), 1, NA)
#Adding a new binary column showing if a given node is associated with a CNV based on pathway title
wp_nodelist$WPNodeID <- wp_nodelist$Identifier
#Generating a duplicate node identifier column since the original column will be lost during Cytoscape import due to it being selected as source column
write.table(wp_nodelist, file=paste0(getwd(),"/Data/WikiPathways/nodelist.tsv"), quote=FALSE, sep="\t", row.names=FALSE)
#Writing the modified file for Cytoscape import
commandsRun(sprintf('network import file columnTypeList="sa,sa,s,sa,sa,sa,sa,sa" file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1 delimiters=\\t', paste0(getwd(),"/Data/WikiPathways/nodelist.tsv")))
#Importing a list of nodes from the output of a WikiPathways SPARQL query (get all nodes in pathways matching the keyword 'Schizophrenia' and some manually selected pathways)
Sys.sleep(0.5)
#Adding sys.sleep to give Cytoscape sufficient time to import the file as network; otherwise, renaming doesn't always work since no network is selected until the import is complete
renameNetwork("WikiPathways nodes")
sparqlquery("wp","edgequery.txt","wp_edgelist")
#Making a SPARQL query to the endpoint to get a list of source-target pairs from selected pathways
wp_edgelist[] <- lapply(wp_edgelist, function(x) str_replace_all(x, "https://identifiers\\.org/([^/]+)/", ""))
#Selecting and removing "https://identifiers.org/xyz" from every row in the df for improved readability
edge_df <- wp_edgelist[grepl("Interaction",wp_edgelist$source) | grepl("Interaction",wp_edgelist$target),]
#Extracting rows containing "Interaction" in either the source or target column
#Interaction nodes represent phosphorylation and the like and are not suitable for the network
#They can still provide information about the connection of gene or other nodes so they can't just be deleted either
#If an Interaction node is connected to two or more non-interaction nodes, these nodes should be connected to each other, and the interaction node can be deleted
interaction_freq <- table(edge_df$target)
edge_df_filtered <- edge_df[edge_df$target %in% names(interaction_freq[interaction_freq > 1]),]
#Counting if a certain interaction occurs more than once; this implies that it is connected to more than one non-interaction node
unique_targets <- unique(edge_df_filtered$target)
for (target_val in unique_targets) {
# Identify rows with duplicate target values
rows_with_duplicate_target <- which(edge_df_filtered$target == target_val)
if (length(rows_with_duplicate_target) > 1) {
# Select one of the source values
source_val_to_transpose <- edge_df_filtered$source[rows_with_duplicate_target[1]]
# Transpose the source value to the target column in the row of the remaining source value
edge_df_filtered$target[rows_with_duplicate_target[-1]] <- source_val_to_transpose
# Remove duplicate rows
edge_df_filtered <- edge_df_filtered[-rows_with_duplicate_target[1], ]
}
}
#Transposing the non-identifier nodes for source-target pairs; if two nodes are associated with the same interaction, they become source-target pairs
wp_edgelist <- wp_edgelist <- wp_edgelist[!grepl(".*interaction.*", wp_edgelist$source, ignore.case = TRUE) &
!grepl(".*interaction.*", wp_edgelist$target, ignore.case = TRUE), ]
#Removing any row containing "Interaction"
wp_edgelist <- rbind(wp_edgelist,edge_df_filtered)
#Appending the new source-target pairs to the original edge list
write.table(wp_edgelist, file=paste0(getwd(),"/Data/WikiPathways/edgelist.tsv"), quote=FALSE, sep="\t", row.names=FALSE)
#Writing the modified file for Cytoscape import
commandsRun(sprintf('network import file columnTypeList="sa,s,t" file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1 delimiters=\\t', paste0(getwd(),"/Data/WikiPathways/edgelist.tsv")))
#Importing a list of source-target pairs from selected pathways from the ouput of a WikiPathways SPARQL query
Sys.sleep(0.5)
#Adding sys.sleep to give Cytoscape sufficient time to import the file as network; otherwise, renaming doesn't always work since no network is selected until the import is complete
renameNetwork("WikiPathways edges")
altmergeNetworks(sources = c("WikiPathways nodes","WikiPathways edges"),
title = "WikiPathways networks",
operation = "union",
nodeKeys=c("WPNodeID","name"))
#Union merging the node and edge networks to extend the node list with corresponding edges
Sys.sleep(0.5)
createNodeSource("fromWikiPathways")
deleteNetwork('WikiPathways nodes')
deleteNetwork('WikiPathways edges')
Sys.sleep(1)
#Pausing the script for 1 second - when letting the script run without this, the publication source creation fails
commandsRun(sprintf("network import file columnTypeList='sa,sa,source,sa,sa,sa,sa' file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1", paste0(getwd(),"/Data/Publications/Trubetskoy.txt")))
#Importing network from file
#List of 120 genes implicated in Trubetskoy et al., doi: 10.1038/s41586-022-04434-5
commandsRun("table rename column columnName=Ensembl.ID newColumnName=Ensembl table=Trubetskoy.txt default node")
#Renaming the Ensembl.ID column from the dataset to Ensembl for coherence with networks from other sources
commandsRun("table rename column columnName=Index.SNP newColumnName=snpID table=Trubetskoy.txt default node")
createNodeSource("fromPublication","10.1038/s41586-022-04434-5")
#Adding literature as  source to all imported nodes and adding the doi of the corresponding paper
renameNetwork("Trubetskoy risk genes")
#Renaming the newly imported network
metadata.add("Publications")
metadata.add("Trubetskoy et al. doi: 10.1038/s41586-022-04434-5")
metadata.add("")
networklist <- getNetworkList()
setCurrentNetwork(networklist[[1]])
for(i in 1:length(networklist)) {
current <- getNetworkName()
altmergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union",inNetworkMerge = TRUE,nodeKeys=c("Ensembl","Ensembl"))
}
#Looping through the network list to merge all currently open networks with each other, creating one large unified network
renameNetwork("Schizophrenia supernetwork")
networklist <- getNetworkList()
snw_scz <- getNetworkName()
#Getting the name of the unified network to preserve it from deletion
lapply(networklist[networklist != snw_scz],deleteNetwork)
#Deleting all networks besides newly generated unified network
exportNetwork(filename=paste0(nw_savepath,"SCZ_SNW"),"CX", network = snw_scz, overwriteFile=TRUE)
#Exporting the supernetwork as cx file
end_section("Importing and merging")
## STRING --------------------------------------------------------------------------------------------------------------------------
start_section("STRING")
commandsRun('string stringify colDisplayName=name column=Ensembl compoundQuery=true cutoff=0.9 includeNotMapped=true  networkType="full STRING network" species="Homo sapiens" networkNoGui=current')
snw_node <- read.table(file="C:\Users\klemm\Documents\GitHub\SCZ-CNV\Outputs\Session-2024-03-22_22h40\Other\SCZ_SNW_STRING_clustered_GO node.csv",sep=",",header=TRUE)
snw_node <- read.table(file="C:/Users/klemm/Documents/GitHub/SCZ-CNV/Outputs/Session-2024-03-22_22h40/Other/SCZ_SNW_STRING_clustered_GO node.csv",sep=",",header=TRUE)
aopmerged_node <- read.table(file="C:/Users/klemm/Documents/GitHub/SCZ-CNV/Outputs/Session-2024-03-22_22h40/Other/gene-KE-AOP-AO merged network_all node.tsv",header=TRUE,sep="\t")
aopmerged_node <- read.table(file=paste0(other_savepath,"gene-KE-AOP-AO merged network_all node.tsv"),header=TRUE,sep="\t")
snw_node_aop <- snw_node[snw_node$Ensembl %in% aopmerged_node$Ensembl,]
View(snw_node_aop)
snw_node_aop2 <- snw_node_aop
remove_dups <- function(pathway_string) {
pathways <- unlist(strsplit(pathway_string, "[;,] "))
unique_pathways <- unique(pathways)
result <- paste(unique_pathways, collapse=", ")
return(result)
}
snw_node_aop2$PathwayID <- sapply(snw_node_aop2$PathwayID, remove_dups)
View(snw_node_aop2)
if (is.factor(snw_node_aop2$PathwayID)) {
snw_node_aop2$PathwayID <- as.character(snw_node_aop2$PathwayID)
}
remove_dups <- function(pathway_string) {
pathways <- unlist(strsplit(pathway_string, "[;,] "))
unique_pathways <- unique(pathways)
result <- paste(unique_pathways, collapse=", ")
return(result)
}
View(snw_node_aop2)
remove_dups <- function(pathway_string) {
pathway_string %>%
str_split("[;,] ") %>%  # Split the string by commas or semicolons
unlist() %>%            # Unlist the resulting list
unique() %>%            # Remove duplicates
paste(collapse = ", ")  # Collapse the unique elements back into a single string
}
snw_node_aop2$PathwayID <- sapply(snw_node_aop2$PathwayID, remove_dups)
View(snw_node_aop2)
remove_dups <- function(pathway_string) {
pathway_string %>%
str_split("[;, ] ") %>%  # Split the string by commas or semicolons
unlist() %>%            # Unlist the resulting list
unique() %>%            # Remove duplicates
paste(collapse = ", ")  # Collapse the unique elements back into a single string
}
snw_node_aop2$PathwayID <- sapply(snw_node_aop2$PathwayID, remove_dups)
View(snw_node_aop2)
remove_dups <- function(pathway_string) {
pathway_string %>%
str_split("[;|, ] ") %>%  # Split the string by commas or semicolons
unlist() %>%            # Unlist the resulting list
unique() %>%            # Remove duplicates
paste(collapse = ", ")  # Collapse the unique elements back into a single string
}
snw_node_aop2$PathwayID <- sapply(snw_node_aop2$PathwayID, remove_dups)
View(snw_node_aop2)
remove_duplicates <- function(pathway_string) {
pathway_string %>%
str_split(";|, ") %>%     # Split the string by commas or semicolons
unlist() %>%              # Unlist the resulting list
unique() %>%              # Remove duplicates
paste(collapse = ", ")    # Collapse the unique elements back into a single string
}
snw_node_aop2$PathwayID <- sapply(snw_node_aop2$PathwayID, remove_duplicates)
View(snw_node_aop2)
snw_node_aop <- snw_node[snw_node$Ensembl %in% aopmerged_node$Ensembl,]
remove_duplicates <- function(pathway_string) {
pathway_string %>%
str_split(";|, ") %>%     # Split the string by commas or semicolons
unlist() %>%              # Unlist the resulting list
unique() %>%              # Remove duplicates
paste(collapse = ", ")    # Collapse the unique elements back into a single string
}
snw_node_aop$PathwayID <- sapply(snw_node_aop$PathwayID, remove_duplicates)
View(snw_node_aop)
snw_node_aop_valid <- select(snw_node_aop,Ensembl, fromPublication,fromSTRING,fromWikiPathways,fromDisGeNET,gLayCluster,snpID,PathwayID)
View(snw_node_aop_valid)
snw_node_aop_valid <- select(snw_node_aop,Ensembl, fromPublication,fromSTRING,fromWikiPathways,fromDisGeNET,gLayCluster,snpID,PathwayID,CNVassociated)
snw_node_aop_valid <- select(snw_node_aop,Ensembl, fromPublication,fromSTRING,fromWikiPathways,fromDisGeNET,gLayCluster,snpID,CNVassociated,PathwayID)
createVisualStyle("AOP_vis")
setVisualStyle("AOP_vis")
#Creating and setting a new visual style for the AOP network
setNodeLabelMapping(
table.column="label",
style.name="AOP_vis"
)
#Setting node labels using dedicated node label column
setNodeColorMapping(
table.column = "type",
mapping.type="d",
table.column.values = c("AO","AOP","KE","gene"),
colors=c("#FB6a4A","#FEB24C","#FA9FB5","#74C476"),
style.name="AOP_vis"
)
#Setting node colors using dedicated type column
setNodeShapeDefault(
new.shape="ROUND_RECTANGLE",
style.name="AOP_vis"
)
setNodeSizeDefault (
new.size = "70",
style.name="AOP_vis"
)
setNodeFontSizeDefault (
new.size = "15",
style.name = "AOP_vis"
)
setEdgeSourceArrowShapeDefault(
new.shape = "DELTA",
style.name="AOP_vis"
)
setEdgeColorDefault(
new.color="#BCBCBC",
style.name="AOP_vis"
)
?write.table
#Getting relevant columns for network construction
write.table(snw_node_aop_valid, file=paste0(other_savepath,"snw_node_aop.tsv"), sep="\t", quote=FALSE, row.names=FALSE)
View(snw_node_aop_valid)
#Getting relevant columns for network construction
sparlquery("WikiPathways","pathwaymap.txt","pathwaymap")
#Getting relevant columns for network construction
sparqlquery("WikiPathways","pathwaymap.txt","pathwaymap")
#Querying WikiPathways for all Pathway IDs and Pathway titles for mapping
merge(snw_aop_valid,pathwaymap,by="PathwayID")
#Querying WikiPathways for all Pathway IDs and Pathway titles for mapping
merge(snw_node_aop_valid,pathwaymap,by="PathwayID")
View(pathwaymap)
#Querying WikiPathways for all Pathway IDs and Pathway titles for mapping
pathwaymap$PathwayTitle <- sub("@en$","",pathwaymap$PathwayTitle)
pathwaymap$PathwayTitle <- gsub('"','',pathwaymap$PathwayTitle)
View(pathwaymap)
#Cleaning up mapping file by removing quotation marks and "@en" appendix of all rows
merge(snw_node_aop_valid,pathwaymap,by="PathwayID")
#Cleaning up mapping file by removing quotation marks and "@en" appendix of all rows
snw_node_aop_valid <- merge(snw_node_aop_valid,pathwaymap,by="PathwayID")
snw_node <- read.table(file="C:/Users/klemm/Documents/GitHub/SCZ-CNV/Outputs/Session-2024-03-22_22h40/Other/SCZ_SNW_STRING_clustered_GO node.csv",sep=",",header=TRUE)
snw_node_aop <- snw_node[snw_node$Ensembl %in% aopmerged_node$Ensembl,]
remove_duplicates <- function(pathway_string) {
pathway_string %>%
str_split(";|, ") %>%     # Split the string by commas or semicolons
unlist() %>%              # Unlist the resulting list
unique() %>%              # Remove duplicates
paste(collapse = ", ")    # Collapse the unique elements back into a single string
}
snw_node_aop$PathwayID <- sapply(snw_node_aop$PathwayID, remove_duplicates)
snw_node_aop_valid <- select(snw_node_aop,Ensembl, fromPublication,fromSTRING,fromWikiPathways,fromDisGeNET,gLayCluster,snpID,CNVassociated,PathwayID)
#Getting relevant columns for network construction
sparqlquery("WikiPathways","pathwaymap.txt","pathwaymap")
#Querying WikiPathways for all Pathway IDs and Pathway titles for mapping
pathwaymap$PathwayTitle <- sub("@en$","",pathwaymap$PathwayTitle)
pathwaymap$PathwayTitle <- gsub('"','',pathwaymap$PathwayTitle)
#Cleaning up mapping file by removing quotation marks and "@en" appendix of all rows
snw_node_aop_valid <- merge(snw_node_aop_valid,pathwaymap,by="PathwayID",all.x=FALSE)
snw_node <- read.table(file="C:/Users/klemm/Documents/GitHub/SCZ-CNV/Outputs/Session-2024-03-22_22h40/Other/SCZ_SNW_STRING_clustered_GO node.csv",sep=",",header=TRUE)
snw_node_aop <- snw_node[snw_node$Ensembl %in% aopmerged_node$Ensembl,]
remove_duplicates <- function(pathway_string) {
pathway_string %>%
str_split(";|, ") %>%     # Split the string by commas or semicolons
unlist() %>%              # Unlist the resulting list
unique() %>%              # Remove duplicates
paste(collapse = ", ")    # Collapse the unique elements back into a single string
}
snw_node_aop$PathwayID <- sapply(snw_node_aop$PathwayID, remove_duplicates)
snw_node_aop_valid <- select(snw_node_aop,Ensembl, fromPublication,fromSTRING,fromWikiPathways,fromDisGeNET,gLayCluster,snpID,CNVassociated,PathwayID)
#Getting relevant columns for network construction
sparqlquery("WikiPathways","pathwaymap.txt","pathwaymap")
#Querying WikiPathways for all Pathway IDs and Pathway titles for mapping
pathwaymap$PathwayTitle <- sub("@en$","",pathwaymap$PathwayTitle)
pathwaymap$PathwayTitle <- gsub('"','',pathwaymap$PathwayTitle)
#Cleaning up mapping file by removing quotation marks and "@en" appendix of all rows
snw_node_aop_valid <- merge(snw_node_aop_valid,pathwaymap,by="PathwayID",all.x=TRUE)
#Adding PathwayTitle to the df to map pathway IDs to titles
write.table(snw_node_aop_valid, file=paste0(other_savepath,"snw_node_aop.tsv"), sep="\t", quote=FALSE, row.names=FALSE)
#Adding PathwayTitle to the df to map pathway IDs to titles
snw_node_aop_valid <- snw_node_aop_valid[,c("Ensembl","fromPublication","fromSTRING","fromDisGeNET","fromWikiPathways","gLayCluster","snpID","CNVassociated","PathwayID","PathwayTitle")]
snw_node <- read.table(file="C:/Users/klemm/Documents/GitHub/SCZ-CNV/Outputs/Session-2024-03-22_22h40/Other/SCZ_SNW_STRING_clustered_GO node.csv",sep=",",header=TRUE)
snw_node_aop <- snw_node[snw_node$Ensembl %in% aopmerged_node$Ensembl,]
remove_duplicates <- function(pathway_string) {
pathway_string %>%
str_split(";|, ") %>%     # Split the string by commas or semicolons
unlist() %>%              # Unlist the resulting list
unique() %>%              # Remove duplicates
paste(collapse = ", ")    # Collapse the unique elements back into a single string
}
snw_node_aop$PathwayID <- sapply(snw_node_aop$PathwayID, remove_duplicates)
snw_node_aop_valid <- select(snw_node_aop,Ensembl, fromPublication,fromSTRING,fromWikiPathways,fromDisGeNET,gLayCluster,snpID,CNVassociated,PathwayID)
?separate_rows
#Getting relevant columns for network construction
snw_node_aop_valid <- separate_rows(snw_node_aop_valid,PathwayID,sep=", ")
#Separating PathwayID rows to have one or multiple PathwayIDs per gene; one PathwayID per row
sparqlquery("WikiPathways","pathwaymap.txt","pathwaymap")
#Querying WikiPathways for all Pathway IDs and Pathway titles for mapping
pathwaymap$PathwayTitle <- sub("@en$","",pathwaymap$PathwayTitle)
pathwaymap$PathwayTitle <- gsub('"','',pathwaymap$PathwayTitle)
#Cleaning up mapping file by removing quotation marks and "@en" appendix of all rows
snw_node_aop_valid <- merge(snw_node_aop_valid,pathwaymap,by="PathwayID",all.x=TRUE)
#Adding PathwayTitle to the df to map pathway IDs to titles
snw_node_aop_valid <- snw_node_aop_valid[,c("Ensembl","fromPublication","fromSTRING","fromDisGeNET","fromWikiPathways","gLayCluster","snpID","CNVassociated","PathwayID","PathwayTitle")]
write.table(snw_node_aop_valid, file=paste0(other_savepath,"snw_node_aop.tsv"), sep="\t", quote=FALSE, row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=s,sa,sa,sa,sa,sa,sa,sa,t,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,"snw_node_aop.tsv")))
#Adding PathwayTitle to the df to map pathway IDs to titles
snw_node_aop_valid[is.na(snw_node_aop_valid)] <- ""
View(snw_node_aop_valid)
snw_node_aop_valid <- snw_node_aop_valid[,c("Ensembl","fromPublication","fromSTRING","fromDisGeNET","fromWikiPathways","gLayCluster","snpID","CNVassociated","PathwayID","PathwayTitle")]
write.table(snw_node_aop_valid, file=paste0(other_savepath,"snw_node_aop.tsv"), sep="\t", quote=FALSE, row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=s,sa,sa,sa,sa,sa,sa,sa,t,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,"snw_node_aop.tsv")))
snw_node_aop_valid <- select(snw_node_aop,Ensembl, fromPublication,fromSTRING,fromWikiPathways,fromDisGeNET,gLayCluster,snpID,CNVassociated,PathwayID)
#Getting relevant columns for network construction
snw_node_aop_valid <- separate_rows(snw_node_aop_valid,PathwayID,sep=", ")
#Separating PathwayID rows to have one or multiple PathwayIDs per gene; one PathwayID per row
sparqlquery("WikiPathways","pathwaymap.txt","pathwaymap")
#Querying WikiPathways for all Pathway IDs and Pathway titles for mapping
pathwaymap$PathwayTitle <- sub("@en$","",pathwaymap$PathwayTitle)
pathwaymap$PathwayTitle <- gsub('"','',pathwaymap$PathwayTitle)
#Cleaning up mapping file by removing quotation marks and "@en" appendix of all rows
snw_node_aop_valid <- merge(snw_node_aop_valid,pathwaymap,by="PathwayID",all.x=TRUE)
#Adding PathwayTitle to the df to map pathway IDs to titles
snw_node_aop_valid[is.na(snw_node_aop_valid)] <- ""
View(snw_node_aop_valid)
snw_node_aop_valid <- snw_node_aop_valid %>%
rename(Ensembl_source = Ensembl,
PathwayID_target = PathwayID)
snw_node_aop_valid$Ensembl <- snw_node_aop_valid$Ensembl_source
snw_node_aop_valid$PathwayID <- snw_node_aop_valid$PathwayID_target
snw_node_aop_valid <- snw_node_aop_valid[,c("Ensembl_source","Ensembl","fromPublication","fromSTRING","fromDisGeNET","fromWikiPathways","gLayCluster","snpID","CNVassociated","PathwayID_target","PathwayID","PathwayTitle")]
write.table(snw_node_aop_valid, file=paste0(other_savepath,"snw_node_aop.tsv"), sep="\t", quote=FALSE, row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=s,sa,sa,sa,sa,sa,sa,sa,t,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,"snw_node_aop.tsv")))
commandsRun(sprintf('network import file columnTypeList=s,sa,sa,sa,sa,sa,sa,sa,sa,t,ta,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,"snw_node_aop.tsv")))
#Importing network to Cytoscape
renameNetwork("Genes from AOP network with SNW attributes")
commandsRun('table export options=CSV table="Genes from AOP network with SNW attributes default  node')
commandsRun(sprintf('table export options=CSV table="Genes from AOP network with SNW attributes default  node outputFile=',paste0(other_savepath,"Genes from AOP network with SNW attributes node")))
commandsRun(sprintf('table export options=CSV table="Genes from AOP network with SNW attributes default  node outputFile=%s,paste0(other_savepath,"Genes from AOP network with SNW attributes node")))
##RAW SNW VISUALISATION ---------------------------------------------------------------------------------------------------------------------------
setCurrentNetwork(snw_scz_filtered_string_clustered_go)
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
commandsRun(sprintf('table export options=CSV table="Genes from AOP network with SNW attributes default  node outputFile=%s ',paste0(other_savepath,"Genes from AOP network with SNW attributes node")))
#Exporting node table
snw_node_aop_valid_node <- read.table(file=paste0(other_savepath,"Genes from AOP network with SNW attributes node"),header=TRUE,sep=",")
#Exporting node table
snw_node_aop_valid_node <- read.table(file=paste0(other_savepath,"Genes from AOP network with SNW attributes node.csv"),header=TRUE,sep=",")
View(snw_node_aop_valid_node)
snw_node_aop_valid_node <- snw_node_aop_valid_node %>%
rowwise() %>%
mutate(label=paste(na.omit(c_across(all_of(c("PathwayTitle")))), collapse=""))
snw_node_aop_valid_node <- snw_node_aop_valid_node %>%
rowwise() %>%
mutate(type = case_when(
str_detect(PathwayID, "\\S") ~ "Pathway",
str_detect(Ensembl, "\\S") ~ "gene",
TRUE ~ NA_character_
))
loadTableData(snw_node_aop_valid_node,data.key.column='name',table.key.column = 'name',table='node')
#Loading modified node table back to network
altmergeNetworks(sources=c("gene-KE-AOP-AO merged network_all","Genes from AOP network with SNW attributes"),
title="gene-KE-AOP-AO merged network with pathways",
operation="union",
nodeKeys=c("Ensembl","Ensembl"))
#Loading modified node table back to network
altmergeNetworks(sources=c("gene-KE-AOP-AO merged network_all","Genes from AOP network with SNW attributes"),
title="gene-KE-AOP-AO merged network with pathways",
operation="union",
nodeKeys=c("Ensembl","name"))
createVisualStyle("AOP_vis")
setVisualStyle("AOP_vis")
#Creating and setting a new visual style for the AOP network
setNodeLabelMapping(
table.column="label",
style.name="AOP_vis"
)
#Setting node labels using dedicated node label column
setNodeColorMapping(
table.column = "type",
mapping.type="d",
table.column.values = c("AO","AOP","KE","gene","Pathway"),
colors=c("#FB6a4A","#FEB24C","#FA9FB5","#74C476","#76cdf3"),
style.name="AOP_vis"
)
#Setting node colors using dedicated type column
setNodeShapeDefault(
new.shape="ROUND_RECTANGLE",
style.name="AOP_vis"
)
setNodeSizeDefault (
new.size = "70",
style.name="AOP_vis"
)
setNodeFontSizeDefault (
new.size = "15",
style.name = "AOP_vis"
)
setEdgeSourceArrowShapeDefault(
new.shape = "DELTA",
style.name="AOP_vis"
)
setEdgeColorDefault(
new.color="#BCBCBC",
style.name="AOP_vis"
)
#Merging gene-KE-AOP-AO network with gene-pathway network
exportNetwork(filename=paste0(other_savepath,"gene-KE-AO merged network with pathways"), type="CX", overwriteFile = TRUE)
#Merging gene-KE-AOP-AO network with gene-pathway network
deleteTableColumn("shared.name")
