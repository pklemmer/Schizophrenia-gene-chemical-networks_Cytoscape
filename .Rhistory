scz_snw_string_go_aop_node <- getTableColumns("node")
#Reading the exported table as Cytoscape object
aop_associated_genes <- scz_snw_string_go_aop_node[!is.na(scz_snw_string_go_aop_node$KEid), , drop=FALSE]
#Getting which rows (=gene nodes) have info from AOP-Wiki associated to them
renameNetwork(paste0(getNetworkName(),"_",tag))
summary_go_terms <- read.delim(paste0(getwd(),"/Data/summary_go_terms.txt"),header=TRUE,sep="\t",quote="")
#Loading cluster titles based on GO terms
aop_associated_genes <- merge(aop_associated_genes,summary_go_terms,"gLayCluster")
Sys.sleep(1)
separate_ketitles <- separate_rows(aop_associated_genes,KEid,sep="; ")
ke_freq_table <- table(separate_ketitles$KEid)
ke_freq_df <- as.data.frame(ke_freq_table)
add_attributes <- separate_ketitles %>%
group_by(KEid) %>%
summarise (KEEnsembl = paste(Ensembl,collapse="; "),
KEgenename = paste(HGNCsymbol, collapse="; "),
KEsummary_go_term = paste(summary_term, collapse="; "))
names(ke_freq_df) <- c("KEid","KE_frequency")
ke_freq_df_full <- merge(ke_freq_df, add_attributes,"KEid")
#Counting how often which KEs are associated with all genes
ke_associated_genes_freq <- ke_freq_df_full
aop_link <- list()
variables <- ls()
#Getting a list of variables defined within the aopprocess function
#append_suffix <- function(variable, suffix) {
#assign(paste0(variable,"_",suffix), get(variable), envir = .GlobalEnv)
#}
#Defining a function to add a suffix to the variables created within the aopprocess function
for (variable in variables) {
aop_link[[variable]] <- get(variable)
}
return(aop_link)
#Appending the given tag to every produced variable within the aopprocess function
#Saving the resulting network
}
aoplink_all <- aopprocess("all_AO_KE_Ensembl_query.txt","all")
#Matching AOP information to risk genes in the network from all AOs available in AOP-Wiki
snw_scz_string_clustered_GO_AOP_all <- getNetworkName()
exportNetwork(filename=paste0(nw_savepath,"SCZ_SNW_STRING_clustered_GO_AOP_all"),"CX",network=snw_scz_string_clustered_GO_AOP_all,overwriteFile=TRUE)
#Exporting network
nclusters <- as.character(count(unique(getTableColumns("node","gLayCluster"))))
#Counting how many valid clusters remain
metadata.add(paste0("Valid (>= 5 nodes) clusters: ",nclusters))
metadata.add(paste0("Nodes associated with valid clusters: ",getNodeCount()))
metadata.add("")
gettop <- function(input) {
freq_df <- input$ke_freq_df_full
#cutoff_ke <- quantile(freq_df$KE_frequency, probs=0.75,na.rm = TRUE)
#Defining cutoff for KE frequency (top 25% most frequent)
#topquarter_ke <- freq_df[freq_df$KE_frequency >= cutoff_ke & !is.na(freq_df$KE_frequency),,drop=FALSE]
#Selecting the top 25% most frequently matched with KEs and associated information
topquarter_ke <- freq_df
}
top_all <- gettop(aoplink_all)
getkegenepairs <- function(input) {
topquarter_ke <- input
topquarter_ke_sep <- separate_rows(topquarter_ke,KEEnsembl,sep="; ")
mergedkeensg <- union(topquarter_ke_sep$KEid,topquarter_ke_sep$KEEnsembl)
#topquarter_ke_node <- data.frame(combined=mergedkeensg)
topquarter_ke<- topquarter_ke_sep[,c("KEid","KEEnsembl")]
topquarter_ke <- topquarter_ke %>%
rename(KEid_source = KEid,
KEEnsembl_target = KEEnsembl)
#Renaming columns to source and target for Cytoscape import
topquarter_ke$KEid <- topquarter_ke$KEid_source
topquarter_ke$Ensembl <- topquarter_ke$KEEnsembl_target
#Creating duplicate columns of KEid and KEEnsembl to be used as source and target attributes
#This allows new columns in the network to easily select Ensembl and KE nodes separately etc.
#Without this, both KE and Ensembl nodes are stored in the 'names' column due to how Cytoscape import works
sparqlquery("AOP-Wiki","kemap.txt","kemap")
#Running query to get KEid-title mappings
for (i in 1:ncol(kemap)) {
for (j in 1:nrow(kemap)) {
kemap[j, i] <- gsub('"', '', kemap[j, i])
}
}
#Removing quotation marks from df
topquarter_ke <- merge(topquarter_ke,kemap,by="KEid",all.x=FALSE)
#Merging the mapping and node tables to extend node table with KE titles
topquarter_ke <- topquarter_ke[,c("KEid_source","KEEnsembl_target","KEid","KEtitle","Ensembl")]
#Reordering table columns
#write.table(topquarter_ke_node, file=paste0(getwd(),"/topquarter_ke_node.tsv"),sep="\t",quote=FALSE,row.names=FALSE)
write.table(topquarter_ke, file=paste0(other_savepath,sprintf("AOP-Wiki/topquarter_ke_edge%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
#Writing the KE-gene table to file for Cytoscape import
commandsRun(sprintf('network import file columnTypeList=s,t,sa,sa,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("AOP-Wiki/topquarter_ke_edge%s.tsv",sub("top","",deparse(substitute(input)))))))
#Importing as network
Sys.sleep(0.5)
renameNetwork(sprintf("Top quarter key events - risk genes%s",sub("top","",deparse(substitute(input)))))
}
getkegenepairs(top_all)
kegenenetwork_all <- getNetworkName()
getkeaoppairs <- function(input) {
keaoppairs <- keensgpairs[keensgpairs$KEid %in% input$KEid,c("KEid","AOPid")]
#For top quarter KEs, get which AOPs these are taken from from result of initial AOP-Wiki query
keaoppairs <- separate_rows(keaoppairs,AOPid,sep="; ")
sparqlquery("AOP-Wiki","aopmap.txt","aopmap")
#Running query to get AOPid-title mappings
for (i in 1:ncol(aopmap)) {
for (j in 1:nrow(aopmap)) {
aopmap[j, i] <- gsub('"', '', aopmap[j, i])
}
}
#Removing quotation marks from df
keaoppairs <- merge(keaoppairs,aopmap,by="AOPid",all.x=FALSE)
#Mapping AOPids to AOPtitles using mapping file
keaoppairs <- keaoppairs %>%
rename(KEid_target = KEid,
AOPid_source = AOPid)
#Renaming columns in preparation for import
keaoppairs$KEid <- keaoppairs$KEid_target
keaoppairs$AOPid <- keaoppairs$AOPid_source
#Creating duplicate columns of KEid and AOPid to be used as source and target attributes
#This allows new columns in the network to easily select AOP and KE nodes separately etc.
#Without this, both KE and AOP nodes are stored in the 'names' column due to how Cytoscape import works
keaoppairs <- keaoppairs[,c("KEid_target","KEid","AOPid_source","AOPid","AOPtitle")]
#Reordering columns
write.table(keaoppairs,file=paste0(other_savepath,sprintf("AOP-Wiki/keaoppairs%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
#Writing modified table to file
commandsRun(sprintf('network import file columnTypeList=t,ta,s,sa,sa delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList= -- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("AOP-Wiki/keaoppairs%s.tsv",sub("top","",deparse(substitute(input)))))))
#Importing as network
Sys.sleep(0.5)
renameNetwork(sprintf("Top quarter key events - AOPs%s",sub("top","",deparse(substitute(input)))))
}
getkeaoppairs(top_all)
keaopnetwork_all <- getNetworkName()
getaopaopairs <- function(input) {
keaoppairs <- keensgpairs[keensgpairs$KEid %in% input$KEid,"AOPid"]
keaoppairs <- unique(separate_rows(keaoppairs,AOPid,sep="; "))
#For top quarter KEs, get which unique AOPs these are taken from
sparqlquery("AOP-Wiki","aopao.txt","aopao")
#Getting full list of which AOs are associated to which AOPs
aopaopairs <- aopao[aopao$AOPid %in% keaoppairs$AOPid,]
#Filtering AOP-AO list by AOPs associated with top quarter KEs
sparqlquery("AOP-Wiki","aopmap.txt","aopmap")
#Running query to get AOPid-title mappings
for (i in 1:ncol(aopmap)) {
for (j in 1:nrow(aopmap)) {
aopmap[j, i] <- gsub('"', '', aopmap[j, i])
}
}
#Removing quotation marks from df
aopaopairs <- merge(aopaopairs,aopmap,by="AOPid",all.x=FALSE)
#Mapping AOPids to AOPtitles using mapping file
sparqlquery("AOP-Wiki","aomap.txt","aomap")
for (i in 1:ncol(aomap)) {
for (j in 1:nrow(aomap)) {
aomap[j, i] <- gsub('"', '', aomap[j, i])
}
}
#Removing quotation marks from df
aopaopairs <- merge(aopaopairs,aomap,by="AOid",all.x=FALSE)
#Mapping AOids to AOtitles using mapping file
aopaopairs <- aopaopairs %>%
rename(AOPid_target = AOPid,
AOid_source = AOid)
#Renaming columns in preparation for import
aopaopairs$AOid <- aopaopairs$AOid_source
aopaopairs$AOPid <- aopaopairs$AOPid_target
#Creating duplicate columns of AOid and AOPid to be used as source and target attributes
#This allows new columns in the network to easily select AOid and AOPid nodes separately etc.
#Without this, both AO and AOP nodes are stored in the 'names' column due to how Cytoscape import works
aopaopairs$index <- NA
#Creating an empty placeholder column that is to be filled with copies of row values from the SUID column; explained more in mergeaop function later
#Must be created in df that then becomes a network, since creating a column using the Cytoscape command line will result in an 'invisible' column that cannot be used as key for merging tables
aopaopairs <- aopaopairs[,c("AOid_source","AOPid_target","AOid","AOtitle","AOPid","AOPtitle","index")]
#Reordering columns
write.table(aopaopairs,file=paste0(other_savepath,sprintf("AOP-Wiki/aopaopairs%s.tsv",sub("top","",deparse(substitute(input))))),sep="\t",quote=FALSE,row.names=FALSE)
#Writing modified table to file
commandsRun(sprintf('network import file columnTypeList=s,t,sa,sa,ta,ta,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList= -- Create new network collection -- startLoadRow=1',paste0(other_savepath,sprintf("AOP-Wiki/aopaopairs%s.tsv",sub("top","",deparse(substitute(input)))))))
#Importing table as network
Sys.sleep(0.5)
renameNetwork(sprintf("AOP-AO pairs for top AOPs in top quarter KEs%s",sub("top","",deparse(substitute(input)))))
}
# getaopaopairs(top_selected)
# aopaonetwork_selected <- getNetworkName()
getaopaopairs(top_all)
aopaonetwork_all <- getNetworkName()
mergeaop <- function (input){
aopaonetwork <- get(paste0("aopaonetwork_",input))
keaopnetwork <- get(paste0("keaopnetwork_", input))
kegenenetwork <- get(paste0("kegenenetwork_",input))
#Renaming variables to contain type of selection to correctly select previously generated objects
altmergeNetworks(sources=c(aopaonetwork,keaopnetwork),
title = "KE-AOP-AO merged network",
operation="union",
nodeKeys=c("AOPid","AOPid"))
renameNetwork(paste0("KE-AOP-AO merged network_",input))
#Merging the AOP-AO network to the KE-AOP network to extend KE-AOP associations with AOs
keaopaomerged <- getNetworkName()
altmergeNetworks(sources=c(keaopaomerged,kegenenetwork),
title="gene-KE-AOP-AO merged network",
operation="union",
nodeKeys=c("KEid","KEid"))
#Merging KE-AOP-AO associations with the KE-gene network to extend KE-gene associations with AOPs and AOs
renameNetwork(paste0("gene-KE-AOP-AO merged network_",input))
mergedaopnode <- getTableColumns("node","Ensembl")
#Getting values in the Ensembl column of AOP network
input <- data.frame(
source = rep("En", length(mergedaopnode[, 1])),
identifier = mergedaopnode[, 1]
)
#Making a new df to be used as input for bridgedb
#Map Ensembl ID
mergedaopnode_map <- maps(mapper,input,"H")
#Mapping from Ensembl to HGNC
mergedaopnode_map <- select(mergedaopnode_map, c("identifier", "mapping"))
mergedaopnode_map <- rename(mergedaopnode_map,
Ensembl = identifier,
HGNCsymbol = mapping)
#Selecting and renaming relevant columns from bridgeDb mapping output
loadTableData(mergedaopnode_map,
data.key.column = "Ensembl",
table = "node",
table.key.column = "Ensembl")
#loading HGNC names for Ensembl IDs in AOP network back to node table
nodetable <- getTableColumns("node",c("KEtitle","AOPtitle","AOtitle","HGNCsymbol","SUID"))
nodetable <- nodetable %>%
rowwise() %>%
mutate(label=paste(na.omit(c_across(all_of(c("KEtitle","AOPtitle","AOtitle","HGNCsymbol")))), collapse=""))
#Generating a new 'label' column that combines KEtitle, AOPtitle, AOtitle, and HGNC into one columns
#Since each node represents a different type of data (KE, AOP, AO, or gene), titles will never overlap
#Cytoscape visualisation is based on one column, thus labels need to all be stored in a single column for visualisation
nodetable <- nodetable %>%
rowwise() %>%
mutate(type = case_when(
str_detect(AOPtitle, "\\S") ~ "AOP",
str_detect(AOtitle, "\\S") ~ "AO",
str_detect(KEtitle, "\\S") ~ "KE",
str_detect(HGNCsymbol, "\\S") ~ "gene",
TRUE ~ NA_character_
))
#Generating a new 'type' column indicating of which type (KE, AOP, AO, or gene) a node is
#Again for visualsation purposes - later used to determine color mapping of node based on type
loadTableData(nodetable,"SUID","node","SUID")
lapply(c(aopaonetwork,keaopnetwork,kegenenetwork,keaopaomerged),deleteNetwork)
#Deleting intermediary networks used to generate full gene-KE-AOP-AO network
}
mergeaop("all")
#Creating the full gene-KE-AOP-AO network with data from all AOs and associated AOPs and KEs in AOP-Wiki
aopmerged_node <- getTableColumns("node")
sparqlquery("AOP-Wiki","miemap.txt","miemap")
#Getting a list of all data points in AOP-Wiki tagged as molecular initiating events and the AOPs for which they are MIEs
aopmerged_node_KEid <- as.data.frame(aopmerged_node$KEid)
#Getting list of key event nodes in the merged network
names(aopmerged_node_KEid) = "KEid"
aopmerged_node_KEid <- na.omit(aopmerged_node_KEid)
#Df cleanup
KEid_mie <- merge(aopmerged_node_KEid, miemap, by="KEid", all.x=TRUE)
#Mapping in which AOPs the KEs in the network appear as MIEs
loadTableData(KEid_mie,"KEid","node","KEid")
#Loading MIE mapping back to the network
exportNetwork(paste0(nw_savepath,"gene-KE-AOP-AO merged network_all"),"CX", overwriteFile=TRUE,network="gene-KE-AOP-AO merged network_all")
#Exporting the network
end_section("AOP")
sum(!is.na(aopmerged_node$Ensembl))
start_section("SNW_AOP")
importNetworkFromFile(paste0(nw_savepath,"SCZ_SNW_STRING_clustered_GO.cx"))
#Reimporting clustered supernetwork with GO results added
commandsRun('table delete column column="gLayCluster.2" table="SCZ_SNW_STRING_clustered_GO default node')
#Deleting duplicate gLayCluster column
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
#N_nodes is only generated for 'valid' clusters, so good column to filter by
invertNodeSelection()
deleteSelectedNodes()
#Inverting selection and deleting nodes that don't have GO results
snw_node <- getTableColumns("node")
deleteNetwork("SCZ_SNW_STRING_clustered_GO")
#Deleting the SNW again, was only imported to get node table
snw_node_aop <- snw_node[snw_node$Ensembl %in% aopmerged_node$Ensembl,]
#Selecting rows from snw_node_aop that have the same genes that are also found in the AOP network
remove_duplicates <- function(pathway_string) {
pathway_string %>%
str_split(";|, ") %>%     # Split the string by commas or semicolons
unlist() %>%              # Unlist the resulting list
unique() %>%              # Remove duplicates
paste(collapse = ", ")    # Collapse the unique elements back into a single string
}
#When merging WikiPathways node and edge networks, it's possible that there are semi-colon separated duplicates in PathwayID
#This function splits strings and removes duplicates for a more consistent and clean look
snw_node_aop$PathwayID <- sapply(snw_node_aop$PathwayID, remove_duplicates)
snw_node_aop_valid <- select(snw_node_aop,Ensembl, fromPublication,fromWikiPathways,fromDisGeNET,gLayCluster,snpID,CNVassociated,PathwayID)
#Getting relevant columns for network construction
snw_node_aop_valid <- separate_rows(snw_node_aop_valid,PathwayID,sep=", ")
#Separating PathwayID rows to have one or multiple PathwayIDs per gene; one PathwayID per row
sparqlquery("WikiPathways","pathwaymap.txt","pathwaymap")
#Querying WikiPathways for all Pathway IDs and Pathway titles for mapping
pathwaymap$PathwayTitle <- sub("@en$","",pathwaymap$PathwayTitle)
pathwaymap$PathwayTitle <- gsub('"','',pathwaymap$PathwayTitle)
#Cleaning up mapping file by removing quotation marks and "@en" appendix of all rows
length(snw_node_aop_valid$Ensembl)
sum(unique(snw_node_aop_valid$Ensembl))
count(unique(snw_node_aop_valid$Ensembl))
length(unique(snw_node_aop_valid$Ensembl))
#Cleaning up mapping file by removing quotation marks and "@en" appendix of all rows
snw_node_aop_valid2 <- merge(snw_node_aop_valid,pathwaymap,by="PathwayID",all.x=TRUE)
length(unique(snw_node_aop_valid2$Ensembl))
#Cleaning up mapping file by removing quotation marks and "@en" appendix of all rows
snw_node_aop_valid <- merge(snw_node_aop_valid,pathwaymap,by="PathwayID",all.x=TRUE)
#Adding PathwayTitle to the df to map pathway IDs to titles
snw_node_aop_valid[is.na(snw_node_aop_valid)] <- ""
View(snw_node_aop_valid)
#Replacing NA with empty for nicer look in Cytoscape
snw_node_aop_valid <- snw_node_aop_valid %>%
rename(Ensembl_source = Ensembl,
PathwayID_target = PathwayID)
#Renaming source and target cols for import
snw_node_aop_valid$Ensembl <- snw_node_aop_valid$Ensembl_source
snw_node_aop_valid$PathwayID <- snw_node_aop_valid$PathwayID_target
#Duplicating source and target cols for import
snw_node_aop_valid <- snw_node_aop_valid[,c("Ensembl_source","Ensembl","fromPublication","fromDisGeNET","fromWikiPathways","gLayCluster","snpID","CNVassociated","PathwayID_target","PathwayID","PathwayTitle")]
#Reordering columns
write.table(snw_node_aop_valid, file=paste0(other_savepath,"AOP-Wiki/snw_node_aop.tsv"), sep="\t", quote=FALSE, row.names=FALSE)
#Writing to file for Cytoscape import
commandsRun(sprintf('network import file columnTypeList=s,sa,sa,sa,sa,sa,sa,sa,t,ta,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,"AOP-Wiki/snw_node_aop.tsv")))
count(unique(snw_node_aop_valid$PathwayTitle))
length(unique(snw_node_aop_valid$PathwayTitle))
View(snw_node_aop_valid)
#Reordering columns
snw_node_aop_valid <- replace(snw_node_aop_valid, is.na(snw_node_aop_valid), "")
write.table(snw_node_aop_valid, file=paste0(other_savepath,"AOP-Wiki/snw_node_aop.tsv"), sep="\t", quote=FALSE, row.names=FALSE)
#Writing to file for Cytoscape import
commandsRun(sprintf('network import file columnTypeList=s,sa,sa,sa,sa,sa,sa,sa,t,ta,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,"AOP-Wiki/snw_node_aop.tsv")))
#Reordering columns
snw_node_aop_valid <- replace(snw_node_aop_valid, is.na(snw_node_aop_valid), "")
snw_node_aop_valid$PathwayID[1]
is.na(snw_node_aop_valid$PathwayID[1])
#Reordering columns
snw_node_aop_valid <- lapply(snw_node_aop_valid, function(x) gsub("NA","",x))
#At some point during processing, literal 'NA' is added to the df which is incorrectly interpreted during Cytoscape import
#We simply replace all occurrences of 'NA' with an empty string
write.table(snw_node_aop_valid, file=paste0(other_savepath,"AOP-Wiki/snw_node_aop.tsv"), sep="\t", quote=FALSE, row.names=FALSE)
#Writing to file for Cytoscape import
commandsRun(sprintf('network import file columnTypeList=s,sa,sa,sa,sa,sa,sa,sa,t,ta,ta delimiters=\\t file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,"AOP-Wiki/snw_node_aop.tsv")))
#Importing network to Cytoscape
Sys.sleep(1)
renameNetwork("Genes from AOP network with SNW attributes")
snw_node_aop_valid_node <- getTableColumns("node")
#Reading node table as R object
snw_node_aop_valid_node <- snw_node_aop_valid_node %>%
rowwise() %>%
mutate(label=paste(na.omit(c_across(all_of(c("PathwayTitle")))), collapse=""))
#Adding 'label' column for pathway nodes in preparation for merge with gene-AOP network
snw_node_aop_valid_node <- snw_node_aop_valid_node %>%
rowwise() %>%
mutate(type = case_when(
str_detect(PathwayID, "\\S") ~ "Pathway",
str_detect(Ensembl, "\\S") ~ "gene",
TRUE ~ NA_character_
))
#Adding 'type' column in preparation for merge with gene-AOP network
loadTableData(snw_node_aop_valid_node,data.key.column='name',table.key.column = 'name',table='node')
#Loading modified node table back to network
snw_node_aop_cluster <- select(snw_node_aop, Ensembl, CNVassociated, gLayCluster, GO_Pvals,GO_Terms,N_nodes,Nodes,Publication_source,DisGeNET_source,WikiPathways_source,WikiPathways_CNV,WikiPathways_noCNV)
#Getting relevant columns for gene-cluster associations
summary_terms <- read.delim(file=paste0(getwd(),"/Data/summary_go_terms.txt"),sep="\t",header=TRUE,quote="")
#Loading summary GO terms
snw_node_aop_cluster <- merge(snw_node_aop_cluster,summary_terms,by="gLayCluster")
#Adding summary terms per cluster
snw_node_aop_cluster[is.na(snw_node_aop_cluster)] <- ""
#Replacing NA with empty for nicer look in Cytoscape
snw_node_aop_cluster <- snw_node_aop_cluster %>%
rename(Ensembl_source = Ensembl,
gLayCluster_target = gLayCluster)
#Renaming source and target columns for import
snw_node_aop_cluster$Ensembl <- snw_node_aop_cluster$Ensembl_source
snw_node_aop_cluster$gLayCluster <- snw_node_aop_cluster$gLayCluster
#Duplicating source and target columns for import
snw_node_aop_cluster <- select(snw_node_aop_cluster, Ensembl,Ensembl_source, CNVassociated, gLayCluster,gLayCluster_target,N_nodes,Publication_source,DisGeNET_source,WikiPathways_source,WikiPathways_CNV,WikiPathways_noCNV,summary_term)
snw_node_aop_cluster <- snw_node_aop_cluster[,c("Ensembl_source","Ensembl","CNVassociated","gLayCluster_target","gLayCluster","N_nodes","Publication_source","DisGeNET_source","WikiPathways_source","WikiPathways_CNV","WikiPathways_noCNV","summary_term")]
#Reordering columns
write.table(snw_node_aop_cluster, file=paste0(other_savepath,"AOP-Wiki/snw_node_aop_cluster.tsv"), sep="\t", quote=FALSE, row.names=FALSE)
#Writing to file for Cytoscape import
commandsRun(sprintf('network import file columnTypeList="s,sa,sa,t,ta,ta,ta,ta,ta,ta,ta,ta,ta" delimiters=\\t decimalSeparator="." file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1',paste0(other_savepath,"AOP-Wiki/snw_node_aop_cluster.tsv")))
#Importing network to Cytoscape
Sys.sleep(1)
renameNetwork("Genes from AOP network with clusters")
snw_node_aop_cluster_node <- getTableColumns("node")
#Reading node table as R object
snw_node_aop_cluster_node <- snw_node_aop_cluster_node %>%
rowwise() %>%
mutate(label=paste(na.omit(c_across(all_of(c("summary_term")))), collapse=""))
#Adding 'label' column for pathway nodes in preparation for merge with gene-AOP network
snw_node_aop_cluster_node <- snw_node_aop_cluster_node %>%
rowwise() %>%
mutate(type = case_when(
str_detect(gLayCluster, "\\S") ~ "Cluster",
str_detect(Ensembl, "\\S") ~ "gene",
TRUE ~ NA_character_
))
#Adding 'type' column in preparation for merge with gene-AOP network
loadTableData(snw_node_aop_cluster_node,data.key.column='name',table.key.column = 'name',table='node')
#Loading modified node table back to network
altmergeNetworks(sources=c("Genes from AOP network with clusters","Genes from AOP network with SNW attributes"),
title="Genes from AOP network with pathways and clusters",
operation="union",
nodeKeys=c("name","name"))
altmergeNetworks(sources=c("gene-KE-AOP-AO merged network_all","Genes from AOP network with pathways and clusters"),
title="gene-KE-AOP-AO merged network with pathways",
operation="union",
nodeKeys=c("Ensembl","name"))
#Merging gene-KE-AOP-AO network with gene-pathway network
deleteTableColumn("shared.name")
createVisualStyle("AOP_vis")
setVisualStyle("AOP_vis")
#Creating and setting a new visual style for the AOP network
setNodeLabelMapping(
table.column="label",
style.name="AOP_vis"
)
#Setting node labels using dedicated node label column
setNodeColorMapping(
table.column = "type",
mapping.type="d",
table.column.values = c("AO","AOP","KE","gene","Pathway","Cluster"),
colors=c("#FB6a4A","#FEB24C","#FA9FB5","#74C476","#1DEFF2","#1D91C0"),
style.name="AOP_vis"
)
#Setting node colors using dedicated type column
setNodeShapeDefault(
new.shape="ROUND_RECTANGLE",
style.name="AOP_vis"
)
setNodeFontSizeDefault (
new.size = "25",
style.name = "AOP_vis"
)
setEdgeSourceArrowShapeDefault(
new.shape = "DELTA",
style.name="AOP_vis"
)
setEdgeColorDefault(
new.color="#BCBCBC",
style.name="AOP_vis"
)
commandsRun('analyzer analyze directed=true selectedOnly=false')
#Running analyzer for topoligcal information
setNodeSizeMapping(
table.column = "Indegree",
sizes=c(50,250),
mapping.type='c',
style.name="AOP_vis"
)
#Setting node size relative to indegree (in this graph: edges going from bottom to top)
fitContent()
?createColumnFilter
#Setting node colors using dedicated type column
createColumnFilter(
filter.name = 'KEisMIEin',
column = "KEisMIEin",
criterion = 0,
predicate= "GREATER_THAN"
)
#Setting node colors using dedicated type column
createColumnFilter(
filter.name = 'KEisMIEin',
column = "KEisMIEin",
criterion = 0,
predicate= "GREATER_THAN"
)
#Setting node colors using dedicated type column
createColumnFilter(
filter.name = 'KEisMIEin',
column = "KEisMIEin",
criterion = 0,
predicate= "GREATER_THAN",
anyMatch= TRUE,
apply = TRUE
)
#Setting node colors using dedicated type column
createColumnFilter(
filter.name = "KE-MIE",
column = "KEisMIEin",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Setting node colors using dedicated type column
createColumnFilter(
filter.name = "KE-MIE",
column = "KEisMIEin",
criterion = h,
predicate = "DOES_NOT_CONTAIN",
anyMatch = TRUE,
apply = TRUE
)
#Setting node colors using dedicated type column
createColumnFilter(
filter.name = "KE-MIE",
column = "KEisMIEin",
criterion = "h",
predicate = "DOES_NOT_CONTAIN",
anyMatch = TRUE,
apply = TRUE
)
#Setting node colors using dedicated type column
createColumnFilter(
filter.name = "KE-MIE",
column = "KEisMIEin",
criterion = "h",
predicate = "CONTAINS",
anyMatch = TRUE,
apply = TRUE
)
