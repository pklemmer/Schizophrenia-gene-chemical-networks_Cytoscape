#List of 120 genes implicated in Trubetskoy et al., doi: 10.1038/s41586-022-04434-5
commandsRun("table rename column columnName=Ensembl.ID newColumnName=Ensembl table=Trubetskoy.txt default node")
#Renaming the Ensembl.ID column from the dataset to Ensembl for coherence with networks from other sources
commandsRun("table rename column columnName=Index.SNP newColumnName=snpID table=Trubetskoy.txt default node")
createNodeSource("fromPublication","10.1038/s41586-022-04434-5")
#Adding literature as  source to all imported nodes and adding the doi of the corresponding paper
renameNetwork("Trubetskoy risk genes")
#Renaming the newly imported network
metadata.add("Publications")
metadata.add("Trubetskoy et al. doi: 10.1038/s41586-022-04434-5")
metadata.add("")
# networklist.dup <- getNetworkList()
# dup.filter <- function(input,suffix) {
#   filtered_list <- input[substr(input, nchar(input) - 1,nchar(input))==suffix]}
# duplicates <- dup.filter(networklist.dup,"_1")
#   #Getting duplicate networks (Cytoscape marks duplicate networks with a "_1" suffix to the network name)
# delete.dupes <- function(nw) {
#  setCurrentNetwork(nw)
#   deleteNetwork()
# }
# lapply(duplicates,delete.dupes)
#Selecting and deleting duplicate networks
networklist <- getNetworkList()
setCurrentNetwork(networklist[[1]])
for(i in 1:length(networklist)) {
current <- getNetworkName()
altmergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union",inNetworkMerge = TRUE,nodeKeys=c("Ensembl","Ensembl"))
}
#Looping through the network list to merge all currently open networks with each other, creating one large unified network
renameNetwork("Schizophrenia supernetwork")
networklist <- getNetworkList()
snw_scz <- getNetworkName()
#Getting the name of the unified network to preserve it from deletion
lapply(networklist[networklist != snw_scz],deleteNetwork)
#Deleting all networks besides newly generated unified network
exportNetwork(filename=paste0(nw_savepath,"SCZ_SNW"),"CX", network = snw_scz, overwriteFile=TRUE)
#Exporting the supernetwork as cx file
#wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
#sczcnv <- sapply(wpids, function(k) paste0("WP",k))
#Manually adding relevant SCZ CNV pathways from WikiPathways
#keyword.wp <- "Schizophrenia"
#getPathways.wp(keyword.wp)
#lapply(c(Schizophrenia_wpids,sczcnv), import)
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
#metadata.add(paste("WikiPathways keywords:",keyword.wp))
#metadata.add(paste("WikiPathways manually by ID:",paste(wpids,collapse =", ")))
#metadata.add(paste("WikiPathways queried species:",paste(queryspecies.wp,collapse = ", ")))
#Adding the keyword and species used to filter the WikiPathways query to the metadata file
#metadata.add("")
## FILTERING NETWORK ------------------------------------------------------------------------------------------------------------------
# createColumnFilter(filter.name="type.label",column="Type","Label","IS",apply=FALSE)
# createColumnFilter(filter.name="type.anchor",column="Type","Anchor","IS",apply=FALSE)
# createColumnFilter(filter.name="type.group",column="Type","Group","IS",apply=FALSE)
# createColumnFilter(filter.name="disease.name",column="diseaseName","Schizophrenia","IS")
# createCompositeFilter(filter.name="type.label.anchor.group",c("type.label","type.anchor","type.group","disease.name"),"ANY")
#deleteSelectedNodes()
#Creating filters and deleting columns in the node table that are not relevant to the supernetwork (leftovers from import sources)
#renameNetwork("SCZ_SNW_filtered")
#snw_scz_filtered <- getNetworkName()
#exportNetwork(filename=paste0(nw_savepath,"SCZ_SNW_filtered"),"CX", network = snw_scz_filtered, overwriteFile=TRUE)
#Exporting the filtered supernetwork as cx file and tagging it with the time and date made to match with metadata file
## STRING --------------------------------------------------------------------------------------------------------------------------
commandsRun('string stringify colDisplayName=name column=Ensembl compoundQuery=true cutoff=0.9 includeNotMapped=true  networkType="full STRING network" species="Homo sapiens" networkNoGui=current')
# commandsRun('string expand additionalNodes=1000 network=current nodeTypes="Homo sapiens" selectivityAlpha=0.9')
#   #STRINGifying and expanding the network with a 0.9 confidence cutoff (curated information)
# createNodeSource("fromSTRING")
#   #Tagging the newly added nodes as having been sourced from STRING
# mapTableColumn("stringdb::canonical name","Human","Uniprot-TrEMBL","Ensembl",force.single=TRUE)
#   #Mapping stringdb canonical names (Uniprot-TrEMBL identifiers) to Ensembl gene identifiers
#   #This step generates a second Ensembl column ('Ensembl (1)') with ENSG identifiers for the STRING-imported nodes
# renameTableColumn("Ensembl (1)","Ensembldup")
#   #Renaming the duplicate Ensembl column for easier handling
# renameNetwork("SCZ_SNW_filtered_STRING")
# snw_scz_filtered_string <- getNetworkName()
# stringified_nodetable <- paste0(nw_savepath,sprintf("%s node table.csv",snw_scz_filtered_string))
#   #Saving the file path to the node table for easier reading
# commandsRun(sprintf('table export options=CSV outputFile=%1$s table="%2$s default  node"',stringified_nodetable,snw_scz_filtered_string))
#   #Exporting the node table as .csv file to the current session's "Network" folder
# read_stringified_nodetable <- read.csv(stringified_nodetable)
#   #saving the node table as object
# read_stringified_nodetable$Ensembl <- ifelse(read_stringified_nodetable$Ensembl == read_stringified_nodetable$Ensembldup, as.character(read_stringified_nodetable$Ensembl),
#                                ifelse(is.na(read_stringified_nodetable$Ensembl) | read_stringified_nodetable$Ensembl =="",as.character(read_stringified_nodetable$Ensembldup),
#                                       ifelse(is.na(read_stringified_nodetable$Ensembldup) | read_stringified_nodetable$Ensembldup=="",as.character(read_stringified_nodetable$Ensembl),"No Match")))
#   #As the identifier mapping from STRING ENSP to ENSG identifiers generates a second Ensembl column, they are merged into the originial Ensembl column if the contents of the cell match or either is blank
# read_stringified_nodetable = subset(read_stringified_nodetable,select= -Ensembldup)
#   #Removing the duplicate Ensembl column from the table
# write.csv(read_stringified_nodetable, file=stringified_nodetable)
#   #Overwriting the previously exported table with the version containing the merged Ensembl column
# renameTableColumn("@id","X.id")
#   #Renaming the '@id' column in the Cytoscape table to avoid issues when reimporting the .csv (@id is automatically converted to X.id in the CSV)
# loadTableData(read_stringified_nodetable,data.key.column="X.id",table.key.column="X.id")
#   #Reimporting the .csv with the merged Ensembl column to the network as to have ENSG identifiers for almost all nodes
mapTableColumn("Ensembl","Human","Ensembl","HGNC")
#   #Generating a new column 'HGNC' from Ensembl identifiers - easier and less error-prone than merging various name columns from different import sources
renameTableColumn("HGNC","Name2")
#Renaming the new 'HGNC' column to 'Name2', which is now to be used as default name column. ('shared name' and 'name' columns are immutable and cannot be deleted or renamed)
marked_cols <- as.list(getTableColumnNames()[!(getTableColumnNames() %in% c("selected","name.copy" ,"SUID","shared name","name","fromDisGeNET","fromWikiPathways","Ensembl","fromPublication","Publication.doi","fromSTRING","CNVassociated","PathwayID","NodeID","NodeIDType","snpID","Name2","DisGeNETname"))])
lapply(marked_cols, function(column) {
deleteTableColumn(column=column)
})
#Filtering columns
renameNetwork("SCZ_SNW_STRING")
scz_snw_string <- getNetworkName()
exportNetwork(filename=paste0(nw_savepath,"SCZ_SNW__STRING"),"CX",network=scz_snw_string,overwriteFile=TRUE)
#Exporting the filtered, stringified supernetwork as cx file and tagging it with the time and data to match with the metadata file
## CLUSTERING ----------------------------------------------------------------------------------------------------------------------
createColumnFilter(filter.name="delete.noensembl", column="Ensembl","ENSG","DOES_NOT_CONTAIN")
deleteSelectedNodes()
#Filtering out nodes that do not have an ENSG Ensembl identifier mapped to them
# marked_cols <- as.list(getTableColumnNames()[!(getTableColumnNames() %in% c("selected","name.copy" ,"SUID","shared name","name","Name2","fromDisGeNET","fromWikiPathways","Ensembl","fromPublication","Publication.doi","fromSTRING","CNVassociated"))])
# lapply(marked_cols, function(column) {
#   deleteTableColumn(column=column)
# })
#Deleting all the columns besides immutable columns, Ensembl, name, and source columns
metadata.add("GLay Clustering")
metadata.add(capture.output(commandsRun('cluster glay clusterAttribute=__glayCluster createGroups=false network=current restoreEdges=true showUI=true undirectedEdges=true')))
#Clustering the network using the GLay community cluster from the clusterMaker Cytoscape app and recording outcome to metadata
renameNetwork("SCZ_SNW_filtered_STRING_clustered")
renameTableColumn('__glayCluster','gLayCluster')
#Renaming the newly generated gLayCluster column as the original name with two underscores is not recognized during gene ontology
snw_scz_filtered_string_clustered <- getNetworkName()
clustered_nodetable <- paste0(nw_savepath,sprintf("/%s node table.csv",snw_scz_filtered_string_clustered))
#Saving the file path to the node table for easier reading (note the double space between node and table)
commandsRun(sprintf('table export options=CSV outputFile=%1$s table="%2$s default  node"',clustered_nodetable,snw_scz_filtered_string_clustered))
#Exporting the node table as .csv file to the current session's "Network" folder
exportNetwork(filename=paste0(nw_savepath,"SCZ_SNW_filtered_STRING_clustered"),"CX",network=snw_scz_filtered_string_clustered,overwriteFile=TRUE)
#Exporting the filtered, stringified, clustered supernetwork as cx file and tagging it with the time and data to match with the metadata file
read_clustered_nodetable <- read.csv(clustered_nodetable)
#Reading the exported csv
split_df <- split(read_clustered_nodetable$Ensembl,read_clustered_nodetable$gLayCluster)
#Splitting the node table by cluster
nodecount <- sapply(split_df, length)
#Counting how many nodes are in each cluster
countmatrix <- matrix(seq(1,length(nodecount)), ncol=1)
countmatrix <- cbind(countmatrix,as.numeric(nodecount))
#Construcing a matrix showing how many nodes are in each cluster
invalidclusters <- as.list(countmatrix[countmatrix[, 2] < 5, 1])
#Getting which clusters have fewer than 5 nodes associated with them
valid_clustered_nodetable <- read_clustered_nodetable[!read_clustered_nodetable$gLayCluster %in% invalidclusters, ]
#Generating a new df containing only nodes associated with clusters that had 5 or more nodes
split_tbl <- split(valid_clustered_nodetable, valid_clustered_nodetable$gLayCluster)
sourcecount <- function(cluster) {
wpcount <- sum(split_tbl[[cluster]][["fromWikiPathways"]] == 1, na.rm = TRUE)
dgcount <- sum(split_tbl[[cluster]][["fromDisGeNET"]] == 1, na.rm = TRUE)
litcount <- sum(split_tbl[[cluster]][["fromPublication"]] == 1, na.rm = TRUE)
stringcount <- sum(split_tbl[[cluster]][["fromSTRINGnode"]] == 1, na.rm = TRUE)
result_df <- data.frame(
gLayCluster = split_tbl[[cluster]][["gLayCluster"]][1],
WikiPathways_source = wpcount,
DisGeNET_source = dgcount,
Publication_source = litcount,
STRING_source = stringcount
)
}
sources_count <- do.call(rbind, lapply(seq_along(split_tbl),sourcecount))
#For each cluster, counting how many nodes are associated with which sources
cnvassociatedcount <- function(cluster) {
cnvcount <- sum(split_tbl[[cluster]][["CNVassociated"]] == 1,na.rm=TRUE)
nodecount <- length(split_tbl[[cluster]][["Ensembl"]])
result_df <- data.frame(
gLayCluster = split_tbl[[cluster]][["gLayCluster"]][1],
N_CNVassociated_nodes = cnvcount,
proportion_CNVassociated_nodes = round((cnvcount / nodecount)*100)
)
}
cnvassociated_count <- do.call(rbind,lapply(seq_along(split_tbl),cnvassociatedcount))
#For each cluster, count how many nodes originally come from CNV-associated pathways which pathways they come from
## GO ANALYSIS ------------------------------------------------------------------------------------------------------------------------
split_df <- split(valid_clustered_nodetable$Ensembl,valid_clustered_nodetable$gLayCluster)
split_list <- lapply(split_df, as.vector)
#Splitting the node table by cluster number, i.e. lists of Ensembl IDs are created per cluster
go <- function(cluster) {
gost(
query = cluster,
organism = "hsapiens",
ordered_query = FALSE,
multi_query = TRUE,
significant = TRUE,
exclude_iea = FALSE,
measure_underrepresentation = FALSE,
evcodes = FALSE,
user_threshold = 0.05,
correction_method = "g_SCS",
domain_scope ="annotated",
custom_bg = NULL,
numeric_ns = "",
sources = NULL,
as_short_link = FALSE,
highlight = TRUE
)
}
go_list <- lapply(split_list,go)
#Iterating the gost GO function over all clusters
saveRDS(go_list, file=paste0(nw_savepath,"/go_list.rds"))
#Saving the entire generated GO analysis as R object locally
get_top_terms <- function(cluster) {
terms <- toString(go_list[[cluster]][["result"]][["term_name"]][1:5])
#Extracting the top 5 term names associated with each cluster
pval <- toString(go_list[[cluster]][["result"]][["p_values"]][1:5])
#Extracting the p-values for the corresponding top 5 term names
nodes <- paste(go_list[[cluster]][["meta"]][["query_metadata"]][["queries"]][["query_1"]],collapse=",")
nnodes <- str_count(toString(go_list[[cluster]][["meta"]][["query_metadata"]][["queries"]][["query_1"]]),"\\S+")
#Extracing the number of nodes/genes contained in each cluster
result_df <- data.frame(
gLayCluster = cluster,
GO_Terms = terms,
GO_Pvals = pval,
Nodes = nodes,
N_nodes = nnodes
)
}
topterms_df <- do.call(rbind, lapply(names(go_list),get_top_terms))
#Getting top 5 term names and corresponding p-values for each cluster and storing in topterms_df
topterms_df <- cbind(topterms_df,sources_count,cnvassociated_count)
#joining the cluster table and the table detailing the amount of sources per cluster
write.table(topterms_df, file=paste0(getwd(),"/Data/GO-clusters-vis.tsv"), sep = "\t",row.names=FALSE,quote=FALSE)
#Writing the table to file for Cytoscape import during visualisation
loadTableData(topterms_df,data.key.column="gLayCluster",table.key.column="gLayCluster")
#Loading the generated top terms and p-values back to the supernetwork; every gene belonging to cluster x is now associated with the top terms of cluster x
deleteTableColumn('gLayCluster.1')
#Deleting duplicate gLayCluster column that appears after importing top terms data back to network
renameNetwork(title=paste0(getNetworkName(),"_GO"))
snw_scz_filtered_string_clustered_go <- getNetworkName()
#Renaming and saving the network name to indicate addition of GO information
compare_term_id_lists <- function(list1, list2) {
common_elements <- intersect(list1, list2)
return(length(common_elements))
}
#Setting up a function to get intersections between cluster term IDs
match_df <- data.frame(Cluster1 = character(),
Cluster2 = character(),
Matches = numeric(),
stringsAsFactors = FALSE)
#Setting up a df to store output in
for (i in 1:(length(go_list) - 1)) {
for (j in (i + 1):length(go_list)) {
term_id_i <- go_list[[i]][["result"]][["term_id"]]
term_id_j <- go_list[[j]][["result"]][["term_id"]]
matches <- compare_term_id_lists(term_id_i, term_id_j)
match_df <- rbind(match_df, data.frame(Cluster1 = names(go_list)[i],
Cluster2 = names(go_list)[j],
Matches = matches))
#Iterating over go_list to compare GO term IDs between every cluster and store number of overlaps
}
}
colnames(match_df) <- c("source","target","GO_term_matches")
#Renaming columns
write.table(match_df, file=paste0(getwd(),"/Data/match_df.tsv"), sep = "\t",row.names=FALSE,quote=FALSE)
exportNetwork(filename=paste0(nw_savepath,"SCZ_SNW_filtered_STRING_clustered_GO"),"CX",network=snw_scz_filtered_string_clustered_go,overwriteFile=TRUE)
#Exporting the filtered, stringified, clustered supernetwork after GO as cx file and tagging it with the time and data to match with the metadata file
commandsRun(sprintf("network import file columnTypeList='s,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa' file=%s firstRowAsColumnNames=true delimiters=\\t rootNetworkList=-- Create new network collection -- startLoadRow=1", paste0(getwd(),"/Data/GO-clusters-vis.tsv")))
#Importing the previoulsy generated table 'GO-clusters-vis' back to Cytoscape as new network
#Essential to use .tsv and importing as such to avoid conflicts generated by .csv - commas separating terms in a string are interpreted as different columns by Cytoscape
Sys.sleep(1)
renameNetwork("GO_Visualisation_SCZ_SNW")
loadTableData(
data = read.table(file=paste0(getwd(),"/Data/summary_go_terms.txt"),header=TRUE, sep ="\t"),
data.key.column = "gLayCluster",
table.key.column = "gLayCluster"
)
#Loading an additional column into the network containing manually created summaries of GO terms based on biological knowledge
commandsRun(sprintf("network import file columnTypeList='s,t,ea' file=%s firstRowAsColumnNames=true delimiters=\\t startLoadRow=1", paste0(getwd(),"/Data/match_df.tsv")))
#Loading edge information (i.e. intersections between GO terms for each cluster)
createVisualStyle(style.name = 'GO_vis')
#Creating a new visual style that is subsequently customized
setVisualStyle("GO_vis")
#Applying a basic visual style to the network
setNodeSizeMapping(
table.column = "N_nodes",
sizes = c(50,200),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting the node size proportional to the number of nodes making up a cluster, e.g. a cluster containing more nodes is bigger
setNodeCustomPieChart(
columns = c("DisGeNET_source","Publication_source","WikiPathways_source","STRING_source"),
colors = paletteColorBrewerPaired(value.count = 8),
style.name= "GO_vis"
)
#Turning nodes into pie charts showing which sources make up the proportions of the nodes in them
setNodeShapeDefault("ellipse",
style.name= "GO_vis")
setNodeFillOpacityDefault(
new.opacity = 0,
style.name= "GO_vis"
)
#Removing node background
setNodeBorderWidthDefault(
new.width=0,
style.name= "GO_vis"
)
setNodeLabelMapping(
table.column = "summary_term",
style.name= "GO_vis"
)
#Changing node label to the processes/terms the nodes represent
setNodeFontSizeDefault(
new.size = 20,
style.name= "GO_vis"
)
#Setting node font size
setNodeLabelPositionDefault(
new.nodeAnchor = "S",
new.graphicAnchor = "N",
new.justification = "c",
new.xOffset = "0",
new.yOffset = "0",
style.name= "GO_vis"
)
#Moving label
setEdgeLineWidthMapping(
table.column = "GO_term_matches",
table.column.values = c(0,861),
widths = c(0,50),
mapping.type = "c",
style.name= "GO_vis"
)
##PIE CHART VISUALISATION -----------------------------------------------------------------------------------------------------------------------
commandsRun(sprintf("network import file columnTypeList='s,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa' file=%s firstRowAsColumnNames=true delimiters=\\t rootNetworkList=-- Create new network collection -- startLoadRow=1", paste0(getwd(),"/Data/GO-clusters-vis.tsv")))
Sys.sleep(1)
renameNetwork("GO_Visualisation_SCZ_SNW")
loadTableData(
data = read.table(file=paste0(getwd(),"/Data/summary_go_terms.txt"),header=TRUE, sep ="\t"),
data.key.column = "gLayCluster",
table.key.column = "gLayCluster"
)
#Loading an additional column into the network containing manually created summaries of GO terms based on biological knowledge
commandsRun(sprintf("network import file columnTypeList='s,t,ea' file=%s firstRowAsColumnNames=true delimiters=\\t startLoadRow=1", paste0(getwd(),"/Data/match_df.tsv")))
#Loading edge information (i.e. intersections between GO terms for each cluster)
createVisualStyle(style.name = 'GO_vis')
#Creating a new visual style that is subsequently customized
setVisualStyle("GO_vis")
#Applying a basic visual style to the network
setNodeSizeMapping(
table.column = "N_nodes",
sizes = c(50,200),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting the node size proportional to the number of nodes making up a cluster, e.g. a cluster containing more nodes is bigger
setNodeCustomPieChart(
columns = c("DisGeNET_source","Publication_source","WikiPathways_source","STRING_source"),
colors = paletteColorBrewerPaired(value.count = 8),
style.name= "GO_vis"
)
#Turning nodes into pie charts showing which sources make up the proportions of the nodes in them
setNodeShapeDefault("ellipse",
style.name= "GO_vis")
setNodeFillOpacityDefault(
new.opacity = 0,
style.name= "GO_vis"
)
#Removing node background
setNodeBorderWidthDefault(
new.width=0,
style.name= "GO_vis"
)
setNodeLabelMapping(
table.column = "summary_term",
style.name= "GO_vis"
)
#Changing node label to the processes/terms the nodes represent
setNodeFontSizeDefault(
new.size = 20,
style.name= "GO_vis"
)
#Setting node font size
setNodeLabelPositionDefault(
new.nodeAnchor = "S",
new.graphicAnchor = "N",
new.justification = "c",
new.xOffset = "0",
new.yOffset = "0",
style.name= "GO_vis"
)
#Moving label
setEdgeLineWidthMapping(
table.column = "GO_term_matches",
table.column.values = c(0,861),
widths = c(0,50),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting edge width proportional to number of shared GO terms
setEdgeOpacityDefault(
new.opacity = 70,
style.name= "GO_vis"
)
#Decreasing edge opacity
setEdgeColorDefault('#DD3497',
style.name= "GO_vis")
#Changing edge color
commandsRun('layout force-directed defaultEdgeWeight=0.5 defaultNodeMass=3 defaultSpringCoefficient=1e-4 edgeAttribute="GO_term_matches" defaultSpringLength=300 isDeterministic=true maxWeightCutoff=1.79769E308 minWeightCutoff=0E0 numIterations=200 type=Heuristic')
layoutNetwork('force-directed')
#Adding network layout
#scaleLayout(axis="Both Axes", scaleFactor = 0.95)
#Not working as requires Cytoscape v.3.10.2 which does not seem available yet?
renameNetwork("Supernetwork functional analysis")
deleteNetwork(network="GO_Visualisation_SCZ_SNW")
go_vis_nw <- getNetworkName()
exportNetwork(filename=paste0(nw_savepath,"GO_Visualisation_SCZ_SNW"),"CX",network=go_vis_nw,overwriteFile=TRUE)
fitContent()
fitContent()
?setNodeBorderColorMapping
commandsRun(sprintf("network import file columnTypeList='s,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa' file=%s firstRowAsColumnNames=true delimiters=\\t rootNetworkList=-- Create new network collection -- startLoadRow=1", paste0(getwd(),"/Data/GO-clusters-vis.tsv")))
#Importing the previoulsy generated table 'GO-clusters-vis' back to Cytoscape as new network
#Essential to use .tsv and importing as such to avoid conflicts generated by .csv - commas separating terms in a string are interpreted as different columns by Cytoscape
Sys.sleep(1)
renameNetwork("GO_Visualisation_SCZ_SNW")
loadTableData(
data = read.table(file=paste0(getwd(),"/Data/summary_go_terms.txt"),header=TRUE, sep ="\t"),
data.key.column = "gLayCluster",
table.key.column = "gLayCluster"
)
#Loading an additional column into the network containing manually created summaries of GO terms based on biological knowledge
commandsRun(sprintf("network import file columnTypeList='s,t,ea' file=%s firstRowAsColumnNames=true delimiters=\\t startLoadRow=1", paste0(getwd(),"/Data/match_df.tsv")))
#Loading edge information (i.e. intersections between GO terms for each cluster)
createVisualStyle(style.name = 'GO_vis')
#Creating a new visual style that is subsequently customized
setVisualStyle("GO_vis")
#Applying a basic visual style to the network
setNodeSizeMapping(
table.column = "N_nodes",
sizes = c(50,200),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting the node size proportional to the number of nodes making up a cluster, e.g. a cluster containing more nodes is bigger
setNodeCustomPieChart(
columns = c("DisGeNET_source","Publication_source","WikiPathways_source","STRING_source"),
colors = paletteColorBrewerPaired(value.count = 8),
style.name= "GO_vis"
)
#Turning nodes into pie charts showing which sources make up the proportions of the nodes in them
setNodeShapeDefault("ellipse",
style.name= "GO_vis")
setNodeFillOpacityDefault(
new.opacity = 0,
style.name= "GO_vis"
)
#Removing node background
setNodeBorderWidthDefault(
new.width=10,
style.name= "GO_vis"
)
setNodeBorderColorMapping(
table.column = "proportion_CNVassociated_nodes",
colors = c("#FFFFFF","#FF0000"),
mapping.type = "c",
style.name = "GO_vis"
)
setNodeBorderColorMapping(
table.column = "proportion_CNVassociated_nodes",
table.column.values = NULL,
colors = c("#FFFFFF","#FF0000"),
mapping.type = "c",
default.color = "#000000",
style.name = "GO_vis"
)
setNodeBorderColorMapping(
table.column = "proportion_CNVassociated_nodes",
table.column.values = c(0,100),
colors = c("#FFFFFF","#FF0000"),
mapping.type = "c",
default.color = "#000000",
style.name = "GO_vis"
)
setNodeLabelMapping(
table.column = "summary_term",
style.name= "GO_vis"
)
#Changing node label to the processes/terms the nodes represent
setNodeFontSizeDefault(
new.size = 20,
style.name= "GO_vis"
)
#Setting node font size
setNodeLabelPositionDefault(
new.nodeAnchor = "S",
new.graphicAnchor = "N",
new.justification = "c",
new.xOffset = "0",
new.yOffset = "0",
style.name= "GO_vis"
)
#Moving label
setEdgeLineWidthMapping(
table.column = "GO_term_matches",
table.column.values = c(0,861),
widths = c(0,50),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting edge width proportional to number of shared GO terms
setEdgeOpacityDefault(
new.opacity = 70,
style.name= "GO_vis"
)
#Decreasing edge opacity
setEdgeColorDefault('#DD3497',
style.name= "GO_vis")
#Changing edge color
commandsRun('layout force-directed defaultEdgeWeight=0.5 defaultNodeMass=3 defaultSpringCoefficient=1e-4 edgeAttribute="GO_term_matches" defaultSpringLength=300 isDeterministic=true maxWeightCutoff=1.79769E308 minWeightCutoff=0E0 numIterations=200 type=Heuristic')
layoutNetwork('force-directed')
#Adding network layout
#scaleLayout(axis="Both Axes", scaleFactor = 0.95)
#Not working as requires Cytoscape v.3.10.2 which does not seem available yet?
renameNetwork("Supernetwork functional analysis")
deleteNetwork(network="GO_Visualisation_SCZ_SNW")
go_vis_nw <- getNetworkName()
exportNetwork(filename=paste0(nw_savepath,"GO_Visualisation_SCZ_SNW"),"CX",network=go_vis_nw,overwriteFile=TRUE)
fitContent()
