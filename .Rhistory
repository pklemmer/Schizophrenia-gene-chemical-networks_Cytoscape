if (!file.exists(dest)) {
dir.create(dest)
}
file <- "chembl_23_hsa_20180126.zip"
curl_download(url, destfile=file.path(dest,file))
unzip(zipfile=file.path(dest,file),exdir=dest)
}
#Setting up directory creation, file download and unzip for chembl linkset from CyTargetLinker website
linkset_url <- "https://ndownloader.figshare.com/files/21623691?private_link=6cf358aaaaf5adeecce9"
linkset_dir <- paste0(getwd(),"/Data/CyTargetLinker")
if (!file.exists(file.path(linkset_dir, "chembl_23_hsa_20180126.xgmml"))) {
getlinkset(linkset_url,linkset_dir)
print("Linkset downloaded and unzipped.")
file.remove(paste0(getwd(),"/Data/CyTargetLinker/chembl_23_hsa_20180126.zip"))
#Deleting the zip file after extracting the desired xgmml file from it
} else {
print("Linkset already exists.")
}
#Downloading and unzipping if necessary
chembl_path <- paste0(getwd(),"/Data/CyTargetLinker/chembl_23_hsa_20180126.xgmml")
#Defining path to chembl linkset for easy access
commandsRun(sprintf('cytargetlinker extend direction=SOURCES idAttribute=Ensembl  linkSetFiles=%s network=current',chembl_path))
#Extending the pathway-gene-AOP network with chemicals from the linkset
mapped_chembls <- getTableColumns("node","CTL.ChEMBL")
mapped_chembls <- na.omit(mapped_chembls)
#Getting mapped chemicals and removing NA from df for further processing
# metabolitedb_dir <- paste0(getwd(),"/BridgeDb/metabolites_20240416.bridge")
# getmetabolitemap <- function(dir = metabolitedb_dir, confirmation = "Metabolite BridgeDb mapping file not detected. Download metabolite BridgeDb mapping file (2.65 GB)? (yes/no): ") {
#   if(file.exists(dir)) {
#     message("File already present at ", dir, " No files downloaded.")
#   } else {
#     confirm <- readline(prompt = confirmation)
#     if (tolower(confirm) == "yes") {
#       bridgedb_hs <- getDatabase("Homo sapiens",location=paste0(getwd(),"/BridgeDb"))
#       message("BridgeDb mapping file downloaded to ",dir)
#     } else {
#       message("File download cancelled.")
#     }
#   }
# }
# getmetabolitemap()
metabolite_bridge_dir <- paste0(getwd(),"/BridgeDb/metabolites_20240416.bridge")
metabolite_mapper <- loadDatabase(metabolite_bridge_dir)
metabolite_input <- data.frame(
source = rep("Cl", length(mapped_chembls[, 1])),
identifier = mapped_chembls[, 1]
)
#Making a new df to be used as input for bridgedb
chembl_map <- maps(metabolite_mapper,metabolite_input,"Ce")
#Mapping from ChEMBL to ChEBI
chembl_map <- chembl_map %>%
select(identifier,mapping) %>%
filter(grepl("CHEBI", mapping, fixed=TRUE)) %>%
rename(ChEMBLid = identifier,
ChEBIid = mapping)
chebimap <- read.delim(paste0(getwd(),"/Data/CyTargetLinker/chebimap.tsv"), sep = "\t")
#Loading .tsv containing ChEBI IDs with associated ontology IDs and names
chebimap <- chebimap %>%
rename(ChEBIid = chemical,
ChEBIrole = role,
ChEBIrolename = rolename) %>%
#Renaming cols
mutate(ChEBIid = str_replace(ChEBIid, ".*/",""),
ChEBIrole = str_replace(ChEBIrole, ".*/","")) %>%
#Removing URL to get ChEBI IDs
mutate(ChEBIid = str_replace(ChEBIid, "_",":"),
ChEBIrole = str_replace(ChEBIrole,"_",":"))
#Replacing underscores with colons
chembl_chebi <- merge(chembl_map, chebimap, by="ChEBIid",all.x=TRUE)
#Mapping ChEBI ontology terms to ChEBI IDs available from network mapping
chembl_chebi <- chembl_chebi %>%
group_by(ChEBIid,ChEMBLid) %>%
summarise(ChEBIrole = paste(ChEBIrole, collapse = "; "),
ChEBIrolename = paste(ChEBIrolename, collapse = "; "))
chembl_chebi <- chembl_chebi %>%
mutate_all(~str_replace_all(.,"NA",""))
#Replacing literal 'NA' with empty string
chembl_map <- read.delim(paste0(getwd(),"/Data/chembl_name.tsv"),sep="\t")
#Loading a file containing ChEMBL IDs mapped to compound names retrieved through the WikiData SPARQL endpoint
chembl_chebi <- merge(chembl_chebi, chembl_map, by = "ChEMBLid",all=TRUE)
#Adding compound names to the df
chembl_chebi$type <- "ChEBI node"
chembl_chebi$label <- chembl_chebi$compound_name
#Adding type and label attributes for visualisation
loadTableData(chembl_chebi, data.key.column = "ChEMBLid", "node",table.key.column = "CTL.ChEMBL")
#loading data back to network
chebi_node <- getTableColumns("node",c("SUID","CTL.ChEMBL","ChEBIid"))
#Getting SUID, ChEMBL, and ChEBI columns of all nodes to filter
chemblnochebi <- chebi_node %>%
filter(!is.na(CTL.ChEMBL) & is.na(ChEBIid))
#Filtering for nodes that have a ChEMBL ID but no ChEBI ID
#Desired to remove all CTL-added nodes that couldn't be mapped to a ChEBI ID
selectNodes(nodes = chemblnochebi$SUID, by.col = "SUID")
#Selecting these nodes in Cytoscape
deleteSelectedNodes()
#Deleting selected nodes
#This process could also be done by using Cytoscape filters (createcolumnFilter), but is much slower
#Removing ChEMBL nodes added by CyTargetLinker that do not have ChEBI IDs
deleteTableColumn("CTL.ChEMBL")
renameNetwork("gene-KE-AOP network with pathways and chemicals")
exportNetwork(filename=paste0(nw_savepath,"gene-AOP merged network with pathways and chemicals"), type="CX", overwriteFile = TRUE)
end_section("ChEBI extension")
## ChEBI ROLE SUBSETTING --------------------------------------------------------------------------------------------------------------------------------
start_section("ChEBI role subsetting")
rolecount <- table(chembl_chebi$ChEBIrolename)
#Counting how frequently which ChEBI roles can be mapped to a chemical in the network
rolecount <- as.data.frame(rolecount)
rolecount <- rolecount[order(-rolecount$Freq),]
#Getting distinct roles and how frequently they occur in the network
#Can be used to select roles of interest based on frequency
filter_chebi <- function(keyword) {
chems <- chembl_chebi %>%
separate_rows(ChEBIrolename, sep = "; ") %>%
filter(grepl(keyword,ChEBIrolename)) %>%
pull(ChEBIid) %>%
as.list() %>%
selectNodes( ,by.col="ChEBIid")
#Defining a simple function to filter ChEBI nodes by associated role name
#Getting nodes matching the given ChEBI role
chems_genes <- selectFirstNeighbors(direction="outgoing")
#Getting first neighbors of ChEBI nodes, which will be gene nodes
clearSelection()
genes <- setdiff(chems_genes$nodes, chems$nodes)
#Getting the SUIDs of the gene nodes associated with a given ChEBI role
#Done by getting the intersection between ChEBI nodes and the selection of both ChEBI and gene nodes
#This is because gene nodes are selected as being first neighbors, so the set of selected nodes will contain both the ChEBI and gene nodes
selectNodes(genes)
#Selecting gene nodes associated with given ChEBI role
genes_pws <- selectFirstNeighbors(direction="outgoing")
#Getting outgoing first neighbors of gene nodes which are pathway and cluster nodes
pws <- setdiff(genes_pws$nodes,genes)
#Again getting the intersection of gene and pathway/cluster nodes due to neighbor selection including both the source and neighbor nodes
clearSelection()
selectNodes(genes)
allngbrs <- selectFirstNeighbors(direction="incoming")
#Selecting incoming first neighbors of gene nodes
#This will select all chemical nodes rather than the chemical nodes with the relevant ChEBI role
suidtype <- getTableColumns("node",columns=c("SUID","type"))
kengbrs <- setdiff(allngbrs$nodes, suidtype[suidtype$type == "ChEBI node","SUID"])
#Therefore, KE nodes are filtered out using the 'type' attribute
kengbrs <- setdiff(kengbrs, genes)
#Filtering out gene nodes
clearSelection()
selectNodes(kengbrs)
aop_kes <- selectFirstNeighbors(direction="incoming")
#Selecting AOP nodes related to KE nodes
aopngbrs <- setdiff(aop_kes$nodes, kengbrs)
#Filtering out KE nodes
clearSelection()
selectNodes(aopngbrs)
aop_aos <- selectFirstNeighbors(direction="incoming")
#Selecting AO nodes related to AOP nodes
aongbrs <- setdiff(aop_aos$nodes, aopngbrs)
clearSelection()
connectednodes <- c(chems, genes, pws, kengbrs,aopngbrs, aongbrs)
selectNodes(connectednodes)
createSubnetwork(nodes = connectednodes,subnetwork.name=paste0("Role ", keyword, " subnetwork "))
Sys.sleep(0.5)
setCurrentNetwork("gene-KE-AOP network with pathways and chemicals")
setCurrentView("gene-KE-AOP network with pathways and chemicals")
clearSelection()
}
filter_chebi("environmental contaminant")
filter_chebi("xenobiotic")
end_section("ChEBI role subsetting")
createVisualStyle("AOP_vis")
setVisualStyle("AOP_vis")
#Creating and setting a new visual style for the AOP network
setNodeLabelMapping(
table.column="label",
style.name="AOP_vis"
)
#Setting node labels using dedicated node label column
setNodeColorMapping(
table.column = "type",
mapping.type="d",
table.column.values = c("AO","AOP","KE","gene","Pathway","Cluster","ChEBI node"),
colors=c("#FB6a4A","#FEB24C","#FA9FB5","#74C476","#1DEFF2","#1D91C0","#bd34eb"),
style.name="AOP_vis"
)
#Setting node colors using dedicated type column
createColumnFilter(
filter.name = "KE-MIE",
column = "KEisMIEin",
criterion = "h",
predicate = "CONTAINS",
anyMatch = TRUE,
apply = TRUE
)
#Selecting which KEs are tagged as MIEs
kemienode <- getSelectedNodes()
setNodeBorderColorBypass(
node.names = kemienode,
new.colors = "#3030f0"
)
setNodeBorderWidthBypass(
node.names = kemienode,
new.sizes = 20
)
setNodeShapeDefault(
new.shape="ROUND_RECTANGLE",
style.name="AOP_vis"
)
setNodeFontSizeDefault (
new.size = "25",
style.name = "AOP_vis"
)
setEdgeSourceArrowShapeDefault(
new.shape = "DELTA",
style.name="AOP_vis"
)
setEdgeColorDefault(
new.color="#BCBCBC",
style.name="AOP_vis"
)
setEdgeColorMapping(
table.column = "isMIEedge",
table.column.values = c(0,1),
colors = c("#BCBCBC", "#3030f0"),
style.name= "AOP_vis"
)
setEdgeLineWidthMapping(
table.column = "isMIEedge",
table.column.values = c(0,1),
widths = c(1,3),
style.name = "AOP_vis"
)
commandsRun('analyzer analyze directed=true selectedOnly=false')
#Running analyzer for topoligcal information
setNodeSizeMapping(
table.column = "Indegree",
sizes=c(50,250),
mapping.type='c',
style.name="AOP_vis"
)
#Setting node size relative to indegree (in this graph: edges going from bottom to top)
fitContent()
start_section("ChEBI role subsetting")
rolecount <- table(chembl_chebi$ChEBIrolename)
#Counting how frequently which ChEBI roles can be mapped to a chemical in the network
rolecount <- as.data.frame(rolecount)
rolecount <- rolecount[order(-rolecount$Freq),]
#Getting distinct roles and how frequently they occur in the network
#Can be used to select roles of interest based on frequency
filter_chebi <- function(keyword) {
chems <- chembl_chebi %>%
separate_rows(ChEBIrolename, sep = "; ") %>%
filter(grepl(keyword,ChEBIrolename)) %>%
pull(ChEBIid) %>%
as.list() %>%
selectNodes( ,by.col="ChEBIid")
#Defining a simple function to filter ChEBI nodes by associated role name
#Getting nodes matching the given ChEBI role
chems_genes <- selectFirstNeighbors(direction="outgoing")
#Getting first neighbors of ChEBI nodes, which will be gene nodes
clearSelection()
genes <- setdiff(chems_genes$nodes, chems$nodes)
#Getting the SUIDs of the gene nodes associated with a given ChEBI role
#Done by getting the intersection between ChEBI nodes and the selection of both ChEBI and gene nodes
#This is because gene nodes are selected as being first neighbors, so the set of selected nodes will contain both the ChEBI and gene nodes
selectNodes(genes)
#Selecting gene nodes associated with given ChEBI role
genes_pws <- selectFirstNeighbors(direction="outgoing")
#Getting outgoing first neighbors of gene nodes which are pathway and cluster nodes
pws <- setdiff(genes_pws$nodes,genes)
#Again getting the intersection of gene and pathway/cluster nodes due to neighbor selection including both the source and neighbor nodes
clearSelection()
selectNodes(genes)
allngbrs <- selectFirstNeighbors(direction="incoming")
#Selecting incoming first neighbors of gene nodes
#This will select all chemical nodes rather than the chemical nodes with the relevant ChEBI role
suidtype <- getTableColumns("node",columns=c("SUID","type"))
kengbrs <- setdiff(allngbrs$nodes, suidtype[suidtype$type == "ChEBI node","SUID"])
#Therefore, KE nodes are filtered out using the 'type' attribute
kengbrs <- setdiff(kengbrs, genes)
#Filtering out gene nodes
clearSelection()
selectNodes(kengbrs)
aop_kes <- selectFirstNeighbors(direction="incoming")
#Selecting AOP nodes related to KE nodes
aopngbrs <- setdiff(aop_kes$nodes, kengbrs)
#Filtering out KE nodes
clearSelection()
selectNodes(aopngbrs)
aop_aos <- selectFirstNeighbors(direction="incoming")
#Selecting AO nodes related to AOP nodes
aongbrs <- setdiff(aop_aos$nodes, aopngbrs)
clearSelection()
connectednodes <- c(chems, genes, pws, kengbrs,aopngbrs, aongbrs)
selectNodes(connectednodes)
createSubnetwork(nodes = connectednodes,subnetwork.name=paste0("Role ", keyword, " subnetwork "))
Sys.sleep(0.5)
setCurrentNetwork("gene-KE-AOP network with pathways and chemicals")
setCurrentView("gene-KE-AOP network with pathways and chemicals")
clearSelection()
}
filter_chebi("environmental contaminant")
filter_chebi("xenobiotic")
end_section("ChEBI role subsetting")
View(rolecount)
View(chembl_chebi)
rolecount <- table(chembl_chebi$ChEBIrolename)
#Counting how frequently which ChEBI roles can be mapped to a chemical in the network
rolecount <- as.data.frame(rolecount)
View(rolecount)
rolecount <- chembl_chebi$rolename
rolecount
rolecount <- chembl_chebi$ChEBIrolename
rolecount <- chembl_chebi$ChEBIrolename %>%
separate_rows(sep="; ") %>%
table() %>%
as.data.frame()
rolecount <- chembl_chebi$ChEBIrolename
rolecount
class(rolecount)
rolecount <- data.frame(value=unlist(rolecount))
View(rolecount)
rolecount <- roulecount %>%
group_by(role) %>%
summarize(count = n())
rolecount <- rolecount %>%
group_by(role) %>%
summarize(count = n())
rolecount <- data.frame(role=unlist(rolecount))
rolecount <- chembl_chebi$ChEBIrolename
rolecount <- data.frame(role=unlist(rolecount))
rolecount <- rolecount %>%
group_by(role) %>%
summarize(count = n())
View(rolecount)
rolecount <- chembl_chebi$ChEBIrolename
rolecount <- chembl_chebi$ChEBIrolename
rolecount <- strsplit(rolecount, "; ")
rolecount <- data.frame(role=unlist(rolecount))
rolecount <- rolecount %>%
group_by(role) %>%
summarize(count = n())
View(rolecount)
rolecount <- chembl_chebi$ChEBIrolename %>%
strsplit(, "; ") %>%
data.frame(role=unlist()) %>%
group_by(role) %>%
summarize(count = n())
?strsplit
rolecount <- chembl_chebi$ChEBIrolename %>%
strsplit(,split= "; ") %>%
data.frame(role=unlist()) %>%
group_by(role) %>%
summarize(count = n())
rolecount <- chembl_chebi$ChEBIrolename %>%
strsplit(,split= "; ") %>%
data.frame(role=unlist()) %>%
group_by(role) %>%
summarize(count = n())
rolecount <- chembl_chebi$ChEBIrolename
rolecount <- strsplit(rolecount, ";")
rolecount <- data.frame(role=unlist(rolecount))
rolecount <- rolecount %>%
group_by(role) %>%
summarize(count = n())
View(rolecount)
#Counting how frequently which ChEBI roles can be mapped to a chemical in the network
rolecount <- as.data.frame(rolecount)
rolecount <- rolecount[order(-rolecount$Freq),]
rolecount <- chembl_chebi$ChEBIrolename
rolecount <- strsplit(rolecount, ";")
rolecount <- data.frame(role=unlist(rolecount))
rolecount <- rolecount %>%
group_by(role) %>%
summarize(count = n())
#Counting how frequently which ChEBI roles can be mapped to a chemical in the network
rolecount <- rolecount[order(-rolecount$count),]
View(rolecount)
rolecount <- chembl_chebi$ChEBIrolename
rolecount <- strsplit(rolecount, "; ")
rolecount <- data.frame(role=unlist(rolecount))
rolecount <- rolecount %>%
group_by(role) %>%
summarize(count = n())
#Counting how frequently which ChEBI roles can be mapped to a chemical in the network
rolecount <- rolecount[order(-rolecount$count),]
View(rolecount)
rolecount <- chembl_chebi$ChEBIrolename %>%
strsplit("; ") %>%
unlist() %>%
data.frame(role = .) %>%
group_by(role) %>%
summarize(count = n()) %>%
arrange(desc(count))
View(rolecount)
filter_chebi("neurotoxin")
chems <- chembl_chebi %>%
separate_rows(ChEBIrolename, sep = "; ") %>%
filter(grepl("neurotoxin",ChEBIrolename)) %>%
pull(ChEBIid) %>%
as.list() %>%
selectNodes( ,by.col="ChEBIid")
View(chems)
#Getting nodes matching the given ChEBI role
chems_genes <- selectFirstNeighbors(direction="outgoing")
#Getting first neighbors of ChEBI nodes, which will be gene nodes
clearSelection()
genes <- setdiff(chems_genes$nodes, chems$nodes)
chems_list <- chems$nodes
filter_chebi <- function(keyword) {
chems <- chembl_chebi %>%
separate_rows(ChEBIrolename, sep = "; ") %>%
filter(grepl(keyword,ChEBIrolename)) %>%
pull(ChEBIid) %>%
as.list() %>%
selectNodes( ,by.col="ChEBIid")
chems_list <- chems$nodes
#Defining a simple function to filter ChEBI nodes by associated role name
#Getting nodes matching the given ChEBI role
chems_genes <- selectFirstNeighbors(direction="outgoing")
#Getting first neighbors of ChEBI nodes, which will be gene nodes
clearSelection()
genes <- setdiff(chems_genes$nodes, chems$nodes)
#Getting the SUIDs of the gene nodes associated with a given ChEBI role
#Done by getting the intersection between ChEBI nodes and the selection of both ChEBI and gene nodes
#This is because gene nodes are selected as being first neighbors, so the set of selected nodes will contain both the ChEBI and gene nodes
selectNodes(genes)
#Selecting gene nodes associated with given ChEBI role
genes_pws <- selectFirstNeighbors(direction="outgoing")
#Getting outgoing first neighbors of gene nodes which are pathway and cluster nodes
pws <- setdiff(genes_pws$nodes,genes)
#Again getting the intersection of gene and pathway/cluster nodes due to neighbor selection including both the source and neighbor nodes
clearSelection()
selectNodes(genes)
allngbrs <- selectFirstNeighbors(direction="incoming")
#Selecting incoming first neighbors of gene nodes
#This will select all chemical nodes rather than the chemical nodes with the relevant ChEBI role
suidtype <- getTableColumns("node",columns=c("SUID","type"))
kengbrs <- setdiff(allngbrs$nodes, suidtype[suidtype$type == "ChEBI node","SUID"])
#Therefore, KE nodes are filtered out using the 'type' attribute
kengbrs <- setdiff(kengbrs, genes)
#Filtering out gene nodes
clearSelection()
selectNodes(kengbrs)
aop_kes <- selectFirstNeighbors(direction="incoming")
#Selecting AOP nodes related to KE nodes
aopngbrs <- setdiff(aop_kes$nodes, kengbrs)
#Filtering out KE nodes
clearSelection()
selectNodes(aopngbrs)
aop_aos <- selectFirstNeighbors(direction="incoming")
#Selecting AO nodes related to AOP nodes
aongbrs <- setdiff(aop_aos$nodes, aopngbrs)
clearSelection()
connectednodes <- c(chems, genes, pws, kengbrs,aopngbrs, aongbrs)
selectNodes(connectednodes)
createSubnetwork(nodes = connectednodes,subnetwork.name=paste0("Role ", keyword, " subnetwork "))
Sys.sleep(0.5)
setCurrentNetwork("gene-KE-AOP network with pathways and chemicals")
setCurrentView("gene-KE-AOP network with pathways and chemicals")
clearSelection()
}
filter_chebi("neurotoxin")
filter_chebi <- function(keyword) {
chems <- chembl_chebi %>%
separate_rows(ChEBIrolename, sep = "; ") %>%
filter(grepl(keyword,ChEBIrolename)) %>%
pull(ChEBIid) %>%
as.list() %>%
selectNodes( ,by.col="ChEBIid")
chems_list <- chems$nodes
#Defining a simple function to filter ChEBI nodes by associated role name
#Getting nodes matching the given ChEBI role
chems_genes <- selectFirstNeighbors(direction="outgoing")
#Getting first neighbors of ChEBI nodes, which will be gene nodes
clearSelection()
genes <- setdiff(chems_genes$nodes, chems$nodes)
#Getting the SUIDs of the gene nodes associated with a given ChEBI role
#Done by getting the intersection between ChEBI nodes and the selection of both ChEBI and gene nodes
#This is because gene nodes are selected as being first neighbors, so the set of selected nodes will contain both the ChEBI and gene nodes
selectNodes(genes)
#Selecting gene nodes associated with given ChEBI role
genes_pws <- selectFirstNeighbors(direction="outgoing")
#Getting outgoing first neighbors of gene nodes which are pathway and cluster nodes
pws <- setdiff(genes_pws$nodes,genes)
#Again getting the intersection of gene and pathway/cluster nodes due to neighbor selection including both the source and neighbor nodes
clearSelection()
selectNodes(genes)
allngbrs <- selectFirstNeighbors(direction="incoming")
#Selecting incoming first neighbors of gene nodes
#This will select all chemical nodes rather than the chemical nodes with the relevant ChEBI role
suidtype <- getTableColumns("node",columns=c("SUID","type"))
kengbrs <- setdiff(allngbrs$nodes, suidtype[suidtype$type == "ChEBI node","SUID"])
#Therefore, KE nodes are filtered out using the 'type' attribute
kengbrs <- setdiff(kengbrs, genes)
#Filtering out gene nodes
clearSelection()
selectNodes(kengbrs)
aop_kes <- selectFirstNeighbors(direction="incoming")
#Selecting AOP nodes related to KE nodes
aopngbrs <- setdiff(aop_kes$nodes, kengbrs)
#Filtering out KE nodes
clearSelection()
selectNodes(aopngbrs)
aop_aos <- selectFirstNeighbors(direction="incoming")
#Selecting AO nodes related to AOP nodes
aongbrs <- setdiff(aop_aos$nodes, aopngbrs)
clearSelection()
connectednodes <- c(chems_list, genes, pws, kengbrs,aopngbrs, aongbrs)
selectNodes(connectednodes)
createSubnetwork(nodes = connectednodes,subnetwork.name=paste0("Role ", keyword, " subnetwork "))
Sys.sleep(0.5)
setCurrentNetwork("gene-KE-AOP network with pathways and chemicals")
setCurrentView("gene-KE-AOP network with pathways and chemicals")
clearSelection()
}
filter_chebi("neurotoxin")
