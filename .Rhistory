mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infoname <- as.character(getTableColumns("node", "name"))
infoXrefId  <- as.character(getTableColumns("node", "XrefId"))
infoXrefDatasource <- as.character(getTableColumns("node","XrefDatasource"))
list(name = paste(infoname,collapse = ", "))
list(XrefId = paste(infoXrefId,collapse = ", "))
list(XrefDatasource = paste(infoXrefDatasource,collapse = ", "))
}
df_results <- apply(intersect_df, 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
name <- sapply(df_results, function(x) x$name)
View(name)
class(name)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
name <- apply(df_results, function(x) x$name)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
name <- lapply(df_results, function(x) x$name)
View(name)
intersect_df$name <- name
View(intersect_df)
df_results <- apply(intersect_df[1,], 1, intersect)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
name <- lapply(df_results, function(x) x$name)
intersect_df$name <- name
View(intersect_df)
df_results <- apply(intersect_df[1,], 1, intersect)
View(df_results)
class(df_results)
df_results <- apply(intersect_df, 1, intersect)
class(df_results)
qq <- as.character(getTableColumns("node","XrefDatasource"))
qq
c
c
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infoname <- as.character(getTableColumns("node", "name"))
infoXrefId  <- as.character(getTableColumns("node", "XrefId"))
infoXrefDatasource <- as.character(getTableColumns("node","XrefDatasource"))
list(name = paste(infoname,collapse = ", "))
list(XrefId = paste(infoXrefId,collapse = ", "))
list(XrefDatasource = paste(infoXrefDatasource,collapse = ", "))
}
df_results <- apply(intersect_df, 1, intersect)
XrefId <- sapply(df_results, function(x) x$XrefId)
intersect_df$XrefId <- XrefId
XrefDatasource <- sapply(df_results, function(x) x$XrefDatasource)
intersect_df$XrefDatasource <- XrefDatasource
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
name <- lapply(df_results, function(x) x$name)
intersect_df$name <- name
View(intersect_df)
class(df_results)
df_results <- data.frame(apply(intersect_df, 1, intersect))
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infoname <- as.character(getTableColumns("node", "name"))
infoXrefId  <- as.character(getTableColumns("node", "XrefId"))
infoXrefDatasource <- as.character(getTableColumns("node","XrefDatasource"))
list(name = paste(infoname,collapse = ", "))
list(XrefId = paste(infoXrefId,collapse = ", "))
list(XrefDatasource = paste(infoXrefDatasource,collapse = ", "))
}
df_results <- data.frame(apply(intersect_df, 1, intersect))
View(df_results)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
name <- lapply(df_results, function(x) x$name)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
name <- lapply(df_results, function(x) x$name)
nn <- as.character(getTableColumns("node","name"))
nn
?apply
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
name <- vector("character", nrow(intersect_df))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
namev <- vector("character", nrow(intersect_df))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
name <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infoname <- as.character(getTableColumns("node", "name"))
infoXrefId  <- as.character(getTableColumns("node", "XrefId"))
infoXrefDatasource <- as.character(getTableColumns("node","XrefDatasource"))
name <- list(name = paste(infoname,collapse = ", "))
list(XrefId = paste(infoXrefId,collapse = ", "))
list(XrefDatasource = paste(infoXrefDatasource,collapse = ", "))
}
df_results <- apply(intersect_df, 1, intersect)
View(df_results)
#Applying the function to the intersect_df, i.e. every SCZ pathway is merged with every addiction pathway
name <- lapply(df_results, function(x) x$name)
intersect_df$name <- name
View(intersect_df)
View(name)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
name <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infoname <- as.character(getTableColumns("node", "name"))
infoXrefId  <- as.character(getTableColumns("node", "XrefId"))
infoXrefDatasource <- as.character(getTableColumns("node","XrefDatasource"))
name <- list(name = paste(infoname,collapse = ", "))
list(XrefId = paste(infoXrefId,collapse = ", "))
list(XrefDatasource = paste(infoXrefDatasource,collapse = ", "))
}
df_results <- apply(intersect_df, 1, intersect)
getIntersections <- as.character(getAllNodes())
class(getIntersections)
getIntersections
qq <- getTableColumns("node","XrefDatasource")
class(qq)
qq
info <- getTableColumns("node", c("name","XrefId","XrefDatasource"))
info
info$name
class(info$name)
class(info)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
name <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
names <- infos[,"name"]
XrefId <- infos[,"XrefId"]
XrefDatasource <- infos[,"Xrefdatasource"]
}
df_results <- apply(intersect_df, 1, intersect)
df_results <- apply(intersect_df, 1, intersect)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
names <- infos[,"name"]
XrefId <- infos[,"XrefId"]
XrefDatasource <- infos[,"XrefDatasource"]
}
df_results <- apply(intersect_df, 1, intersect)
info <- getTableColumns("node", c("name","XrefId","XrefDatasource"))
info[,"name"]
info
info <- getTableColumns("node", c("name","XrefId","XrefDatasource"))
info[,"name"]
df_results <- apply(intersect_df, 1, intersect)
info <- getTableColumns("node", c("name","XrefId","XrefDatasource"))
info
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
name <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
infos <- infos[complete.cases(infos),]
names <- infos[,"name"]
XrefId <- infos[,"XrefId"]
XrefDatasource <- infos[,"XrefDatasource"]
}
df_results <- apply(intersect_df, 1, intersect)
result_list <- list()
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
name <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
}
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
name <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
}
result_list <- list()
for (i in 1:nrow(intersect_df)) {
result_list[[i]] <- infos(intersect_df[i,1])
}
for (i in 1:nrow(intersect_df)) {
result_list[[i]] <- intersect(intersect_df[i,1])
}
result_list <- list()
for (i in 1:nrow(intersect_df)) {
merger
result_list[[i]] <- intersect(intersect_df[i,1])
}
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
merger <- mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
}
result_list <- list()
for (i in 1:nrow(intersect_df)) {
merger
result_list[[i]] <- intersect(intersect_df[i,1])
}
merger <- mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
for (i in 1:nrow(intersect_df)) {
merger
result_list[[i]] <- intersect(intersect_df[i,1])
}
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
name <- vector("character", nrow(intersect_df))
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
return(infos)
}
intersect_list <- apply(intersect_df, 1, intersect)
result_df <- bind_rows(intersect_list)
View(result_df)
intersect_df <- cbind(intersect_df, result_df)
intersect_list <- lapply(seq_len(nrow(intersect_df)),function(j) stack(intersect(intersect_df[i,])))
result_df <- bind_rows(intersect_list)
intersect_df <- cbind(intersect_df, result_df)
View(intersect_df)
View(result_df)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
infoname <- infos$name
infoId <- info$XrefId
infoDs <- info$XrefDatasource
return(infos)
}
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
infoname <- infos$name
infoId <- info$XrefId
infoDs <- info$XrefDatasource
return(infos)
}
intersect_list <- apply(intersect_df, 1, intersect)
result_df <- bind_rows(infoname, infoId, infoDs)
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
infoname <- infos$name
infoId <- infos$XrefId
infoDs <- infos$XrefDatasource
return(infos)
}
intersect_list <- apply(intersect_df, 1, intersect)
result_df <- bind_rows(infoname, infoId, infoDs)
intersect_df <- cbind(intersect_df, result_df)
View(intersect_df)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
infoname <- infos[["name"]]
infoId <- infos[["XrefId"]]
infoDs <- infos[["XrefDatasource"]]
return(infos)
}
intersect_list <- apply(intersect_df, 1, intersect)
result_df <- bind_rows(infoname, infoId, infoDs)
result_df <- bind_rows(infoname, infoDs)
result_df <- bind_rows(infoname)
View(result_df)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- getTableColumns("node",c("name", "XrefId", "XrefDatasource"))
infoname <- as.list(infos[["name"]])
infoId <- as.list(infos[["XrefId"]])
infoDs <- as.list(infos[["XrefDatasource"]])
return(infos)
}
intersect_list <- apply(intersect_df, 1, intersect)
result_df <- bind_rows(infoname, infoId, infoDs)
info <- getTableColumns("node", c("name","XrefId","XrefDatasource"))
View(info)
info <- as.list(getTableColumns("node", c("name","XrefId","XrefDatasource")))
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- as.list(getTableColumns("node",c("name", "XrefId", "XrefDatasource")))
infoname <- ainfos[["name"]]
infoId <- infos[["XrefId"]]
infoDs <- infos[["XrefDatasource"]]
return(infos)
}
intersect_list <- apply(intersect_df, 1, intersect)
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- as.list(getTableColumns("node",c("name", "XrefId", "XrefDatasource")))
infoname <- infos[["name"]]
infoId <- infos[["XrefId"]]
infoDs <- infos[["XrefDatasource"]]
return(infos)
}
intersect_list <- apply(intersect_df, 1, intersect)
result_df <- bind_rows(infoname, infoId, infoDs)
View(info)
result_df <- bind_rows(infoname)
intersect_df <- cbind(intersect_df, result_df)
View(intersect_df)
View(result_df)
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
namelist <- list()
idlist <- list()
dslist <- list()
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- as.list(getTableColumns("node",c("name", "XrefId", "XrefDatasource")))
namelist <- paste(infos[["name"]])
idlist <- paste(infos[["XrefId"]])
dslist <- paste(infos[["XrefDatasource"]])
return(infos)
}
intersect_list <- apply(intersect_df, 1, intersect)
result_df <- bind_rows(namelist,idlist,dslist)
View(result_df)
namelist
getIntersections <- as.character(getAllNodes())
class(getIntersections)
info <- as.character(getTableColumns("node", c("name","XrefId","XrefDatasource")))
class(info)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- as.character(getTableColumns("node",c("name", "XrefId", "XrefDatasource")))
list(names = paste(infos[["names"]], collapse = ", "))
list(ids = paste(infos[["XrefId"]], collapse = ", "))
list(sources = paste(infos[["XrefDatasource"]], collapse = ", "))
}
intersect_list <- apply(intersect_df, 1, intersect)
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- as.character(getTableColumns("node",c("name", "XrefId", "XrefDatasource")))
list(names = paste(infos[,"names"], collapse = ", "))
list(ids = paste(infos[,"XrefId"], collapse = ", "))
list(sources = paste(infos[,"XrefDatasource"], collapse = ", "))
}
intersect_list <- apply(intersect_df, 1, intersect)
intersect_list <- apply(intersect_df, 1, intersect)
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- as.character(getTableColumns("node",c("name", "XrefId", "XrefDatasource")))
tryCatch({
list(names = paste(infos[,"names"], collapse = ", "))
list(ids = paste(infos[,"XrefId"], collapse = ", "))
list(sources = paste(infos[,"XrefDatasource"], collapse = ", ")) })
}
intersect_list <- apply(intersect_df, 1, intersect)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- as.character(getTableColumns("node",c("name", "XrefId", "XrefDatasource")))
tryCatch({
list(names = paste(infos[,"names"], collapse = ", "))
list(ids = paste(infos[,"XrefId"], collapse = ", "))
list(sources = paste(infos[,"XrefDatasource"], collapse = ", ")) },
error = function(e) {
cat("Error occurred:", conditionMessage(e), "/n")
names <- NA
ids <- NA
sources <- NA
})
}
intersect_list <- apply(intersect_df, 1, intersect)
result_df <- bind_rows(namelist,idlist,dslist)
result_df <- bind_rows(names,ids,sources)
names <- sapply(intersect_list, function(x) x$names)
names <- sapply(intersect_list, function(x) x$names)
intersect_df <- expand.grid(scz_pathways.names, adc_pathways.names)
intersect_df <- as.data.frame(lapply(intersect_df, as.character))
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- as.character(getTableColumns("node",c("name", "XrefId", "XrefDatasource")))
tryCatch({
list(names = paste(infos[,"names"], collapse = ", "))
list(ids = paste(infos[,"XrefId"], collapse = ", "))
list(sources = paste(infos[,"XrefDatasource"], collapse = ", ")) },
error = function(e) {
cat("Error occurred:", conditionMessage(e), "/n")
names <- "NA"
ids <- "NA"
sources <- "NA"
})
}
intersect_list <- apply(intersect_df, 1, intersect)
names <- sapply(intersect_list, function(x) x$names)
names <- sapply(intersect_list, function(x) x[names])
names <- sapply(intersect_list, function(x) x["names"])
View(names)
#Matching every SCZ pathway against every addiction pathway to detect all interactions and forcing entries to be characters (required for mergeNetwork)
intersect <- function(row) {
col1 <- row[1]
col2 <- row[2]
mergeNetworks(c(col1,col2),(paste(col1,col2, sep =  " - ")),"intersection")
#Merging networks with 'intersect' parameter
infos <- as.character(getTableColumns("node",c("name", "XrefId", "XrefDatasource")))
tryCatch({
list(names = paste(infos[,"names"], collapse = ", "))
list(ids = paste(infos[,"XrefId"], collapse = ", "))
list(sources = paste(infos[,"XrefDatasource"], collapse = ", ")) },
error = function(e) {
cat("Error occurred:", conditionMessage(e), "/n")
names <- NA
ids <- NA
sources <- NA
})
}
intersect_list <- apply(intersect_df, 1, intersect)
names <- sapply(intersect_list, function(x) x["names"])
