<<<<<<< Updated upstream
library(knitr)
knitr:::input_dir()
#Setting working directory
cytoscapePing()
cytoscapeVersionInfo
#Pinging Cytoscape to check if it is properly running, and checking what version of Cytoscape is loaded
installApp('WikiPathways')
installApp('CyTargetLinker')
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
#Pinging Cytoscape to check if it is properly running, and checking what version of Cytoscape is loaded
installApp('WikiPathways')
installApp('CyTargetLinker')
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
commandsRun(paste0('wikipathways import-as-network id=',gbm.pathways[1]))
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
park.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
park.wpid <- park.pathways[[1]]$id
park.wpid <- park.pathways[[1]][id]
park.wpid <- park.pathways[[1]]$id
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
park.wpid <- park.pathways["id"]
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
commandsRun(paste0('wikipathways import-as-network id=',park.wpid)
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
commandsRun(paste0('wikipathways import-as-network id=',park.wpid, sep = "="))
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[2]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[1]]["id"]
lapply(park.pathways, function(x) commandsRun(paste('wikipathways import-as-network id=', x$id, sep = '')))
lapply(park.pathways, function(x) commandsRun(paste('wikipathways import-as-network id=', x["id"], sep = '')))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
park.pathways <- findPathwaysByText("Parkinsonian")
View(park.pathways)
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
commandsRun(paste0('wikipathways import-as-network id=',"park.wpid"))
commandsRun(paste0('wikipathways import-as-network id=',"WP4945"))
#Importing the relevant Parkinsonian motor deficit pathway as network
hsa <- file.path(getwd(), "LinkSets", "wikipathways-20220511-hsa-WP.xgmml")
hsa_react <- file.path(getwd(), "LinkSets", "wikipathways-20220511-hsa-REACTOME.xgmml")
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Setting working directory
cytoscapePing()
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
library(ggrepel)
citation(ggrepel)
citation("ggrepel")
library(svglite)
citation("svglite")
library(readr)
citation("readr")
library(gdata)
citation("gdata")
library(reshape)
citation("reshape")
?ggplot2
library(Rcy3)
library(RCy3)
citation("RCy3")
?svglite
library(stats)
citation("stats")
?stats
RStudio.Version()
View(mergeNetworks)
View("mergeNetworks")
View(mergeNetworks())
#Installing packages
library(RCy3)
View(mergeNetworks())
View(mergeNetworks())
#Installing packages
library(RCy3)
library(rWikiPathways)
library(dplyr)
cytoscapePing()
View(mergeNetworks())
install.packages("renv")
go_list <- readRDS("~/GitHub/SCZ-CNV/GO Output/go_list.rds")
View(go_list)
setwd("~/GitHub/SCZ-CNV")
#Setting working directory
rm(list=ls())
#Cleaning up workspace
packages <- c("dplyr","httr","stringr","gprofiler2")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
#Different structure for rWikiPathways and RCy3 packages as these are not installed directly but via the BiocManager package
invisible(lapply(c(packages,"rWikiPathways","RCy3"), require, character.only = TRUE))
#Loading libraries
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
dir.create("Outputs")
dir.create(sprintf("Outputs/Session-%s",datetime))
dir.create(sprintf("Outputs/Session-%s/Networks",datetime))
#Creating directories for outputs generated by this script to be saved in; new "Session" folder created each time the script is ran (contains generated networks, metadata, and sessionInfo)
nw_savepath <- sprintf("%1$s/Outputs/Session-%2$s/Networks/",getwd(),datetime)
file.create(sprintf("Outputs/Session-%s/metadata.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Outputs/Session-%s/metadata.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
metadata.add("")
#Adding the timezone, date, and time to the metadata
invisible(file.create(sprintf("Outputs/Session-%s/sessioninfo-%s.txt",datetime,datetime)))
writeLines(capture.output(sessionInfo()),sprintf("Outputs/Session-%s/sessioninfo-%s.txt",datetime,datetime))
#Generating and adding a sessionInfo file to the current session output folder
cytoscapePing()
cytoscapeVersionInfo()
#Checking if Cytoscape is running and version info
metadata.add(capture.output(cytoscapeVersionInfo()))
checkinstall.app <- function(app) {
status_string <- getAppStatus(app)
#Getting install status of app
words <- strsplit(status_string, " ")[[1]]
last_word <- tail(words, 1)
#getAppStatus returns a character string instead of a logical value, so the last word (usually either "Installed" or "Uninstalled") from the output is checked
if (last_word == "Installed") {
print(sprintf("App %s is already installed.",app))
} else {
installApp(app)
print(sprintf("Installed app %s.",app))
}
}
#Function to check whether required Cytoscape apps are installed and installing them if not
applist <- c("Wikipathways", "DisGeNET-app", "CyTargetLinker","stringApp","BridgeDb","clusterMaker2")
#WikiPathways v.3.3.10
#DisGeNET-app v.7.3.0
#CyTargetLinker v. 4.1.0
#stringApp v. 2.0.2
#BridgeDb v.1.2.0
#clusterMaker2 v.2.3.4
lapply(applist,checkinstall.app)
#Checking and installing (if required) necessary Cytoscape apps
lapply(applist,getAppInformation)
metadata.add("Required Cytoscape apps and versions:")
invisible(metadata.add(print(lapply(applist,getAppInformation))))
metadata.add("")
# FUNCTION DICTIONARY-------------------------------------------------------------------------------------------------------------------
.defaultBaseUrl <- 'http://127.0.0.1:1234/v1'
#Defining the default base URL found in the RCy3 source as R object for altmergeNetworks
altmergeNetworks <- function(               sources = NULL,
title = NULL,
operation = "union",
nodeKeys = NULL,
nodeMergeMap = NULL,
nodesOnly = FALSE,
edgeKeys = NULL,
edgeMergeMap = NULL,
networkMergeMap = NULL,
inNetworkMerge = TRUE,
base.url = .defaultBaseUrl) {
cmd.string <- 'network merge' # a good start
# sources must be suppled
if(is.null(sources)) {
message("Missing sources!")
return(NULL)
} else {
sources.str <- paste(sources, collapse = ",")
cmd.string <- paste0(cmd.string,' sources="',sources.str,'"')
}
=======
usethis::edit_r_profile(
usethis::edit_r_profile()
usethis::edit_r_profile()
usethis::edit_r_environ()
get_csid(substance)
?cs_check_key()
?cs_check_key()
get_csid(substance)
substance <- ActiveSubstances[,2]
get_csid(substance)
install.packages("webchem")
install.packages("usethis")
packages <- c("readxl", "usethis", "webchem")
lapply(packages, library, character.only = TRUE)
install.packages("usethis")
usethis::edit_r_environ()
substance <- ActiveSubstances[,2]
get_csid(substance)
View(susbtance)
View(substance0
View(substance)
View(substance)
class(substance)
substance <- c(ActiveSubstances[,2])
get_csid(substance)
View(substance)
class(substance)
lapply(get_csid(substance))
lapply(FUN=get_csid(substance))
lapply(FUN=get_csid())
get_csid((4Z-9Z)-7,9-Dodecadien-1-ol)
get_csid("(4Z-9Z)-7,9-Dodecadien-1-ol")
get_csid("
1-Naphthylacetic acid (1-NAA)")
for(row in 1:nrow(substance){csid <-get_csid(substance)}
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
substance <- c(ActiveSubstances[,2])
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
class(substance)
for(row in 1:nrow(substance)){csid <-get_csid(substance)}
for(row in 1:nrow("substance")){csid <-get_csid(substance)}
for(row in 1:nrow(ActiveSubstances[,2])){csid <-get_csid(substance)}
csid_list <- vector("numeric", nrow(ActiveSubstances))
View(csid)
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
View(ActiveSubstances)
substance <- c(ActiveSubstances[,2])
csid_list <- vector("numeric", nrow(ActiveSubstances))
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(substance)
csid_list[row] <- csid
}
View(substance)
View(csid_list)
install.packages("webchem")
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(ActiveSubstances[,2])
csid_list[row] <- csid
}
View(csid_list)
csid <-get_csid(ActiveSubstances[row,"Substance"])
csid_list[row] <- csid
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(ActiveSubstances[row,"Substance"])
csid_list[row] <- csid
}
#View(csid_list)
View(csid)
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
}
View(csid)
View(ActiveSubstances[row,"Substance"])
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances[,2]))  {
csid <-get_csid(c(ActiveSubstances[row,"Substance"]))
}
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
View(substance)
class(substance)
class9packages)
class(packages)
class(ActiveSubstances)
class(df_smiles)
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
class(ActiveSubstances)
View(ActiveSubstances)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances[,2]))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
for(row in 1:nrow(ActiveSubstance))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
for(row in 1:nrow(ActiveSubstances))  {
substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(substance)
}
View(csid)
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances)
}
View(csid)
get_csid(Azoxystrobin)
ping_service("cs")
ping_service("cs_web")
cs_check_key()
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances, match = "ask")
ping_service("cs")
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ping_service("cs")
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances[,2], match = "ask")
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
csid <-get_csid(ActiveSubstances[,2], match = "ask")
}
View(csid)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[,2], match = "ask")
}
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
install.packages("webchem")
packages <- c("readxl", "webchem")
lapply(packages, library, character.only = TRUE)
ActiveSubstances <- read_excel("C:/Users/klemm/Downloads/ActiveSubstances.xls")
ActiveSubstances <- data.frame(lapply(ActiveSubstances, as.character), stringsAsFactors = FALSE)
View(ActiveSubstances)
for(row in 1:nrow(ActiveSubstances))  {
#substance <- c(ActiveSubstances[row, "Substance"])
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
}
View(cid)
cid_list <- vector("numeric",nrow(ActiveSubstances))
for(row in 1:nrow(ActiveSubstances))  {
cid <-get_cid(ActiveSubstances[row,2], verbose=TRUE)
cid_list[row] <- cid
}
View(cid_list)
cid_list[[26]]
clear
library(readr)
pc_eup <- read_csv("C:/PubChem_compound_list_ElW0fZMu9pLBvH6l_N03iWB0JxQ494ui8YeQ7uqWgu_qj74.csv")
View(pc_eup)
#Installing packages
library(RCy3)
library(rWikiPathways)
library(knitr)
knitr:::input_dir()
#Setting working directory
cytoscapePing()
cytoscapeVersionInfo
#Pinging Cytoscape to check if it is properly running, and checking what version of Cytoscape is loaded
installApp('WikiPathways')
installApp('CyTargetLinker')
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
#Pinging Cytoscape to check if it is properly running, and checking what version of Cytoscape is loaded
installApp('WikiPathways')
installApp('CyTargetLinker')
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
gbm.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
commandsRun(paste0('wikipathways import-as-network id=',gbm.pathways[1]))
commandsRun(paste0('wikipathways import-as-network id=',human.gbm.wpids[1]))
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
park.pathways <- findPathwaysByText("Parkinsonian")
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
park.wpid <- park.pathways[[1]]$id
park.wpid <- park.pathways[[1]][id]
park.wpid <- park.pathways[[1]]$id
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
park.wpid <- park.pathways["id"]
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.pathways[1]))
commandsRun(paste0('wikipathways import-as-network id=',park.wpid)
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
commandsRun(paste0('wikipathways import-as-network id=',park.wpid, sep = "="))
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[1]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[2]]["id"]
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
park.wpid <- park.pathways[[1]]["id"]
lapply(park.pathways, function(x) commandsRun(paste('wikipathways import-as-network id=', x$id, sep = '')))
lapply(park.pathways, function(x) commandsRun(paste('wikipathways import-as-network id=', x["id"], sep = '')))
#Installing the WikiPathways and CyTargetLinker apps in Cytoscape
park.pathways <- findPathwaysByText("Parkinsonian")
View(park.pathways)
commandsRun(paste0('wikipathways import-as-network id=',park.wpid))
commandsRun(paste0('wikipathways import-as-network id=',"park.wpid"))
commandsRun(paste0('wikipathways import-as-network id=',"WP4945"))
#Importing the relevant Parkinsonian motor deficit pathway as network
hsa <- file.path(getwd(), "LinkSets", "wikipathways-20220511-hsa-WP.xgmml")
hsa_react <- file.path(getwd(), "LinkSets", "wikipathways-20220511-hsa-REACTOME.xgmml")
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
commandsRun(CTLextend.cmd)
#Setting working directory
cytoscapePing()
commandsRun(CTLextend.cmd)
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefID" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
library(ggrepel)
citation(ggrepel)
citation("ggrepel")
library(svglite)
citation("svglite")
library(readr)
citation("readr")
library(gdata)
citation("gdata")
library(reshape)
citation("reshape")
?ggplot2
library(Rcy3)
library(RCy3)
citation("RCy3")
?svglite
library(stats)
citation("stats")
?stats
RStudio.Version()
View(mergeNetworks)
View("mergeNetworks")
View(mergeNetworks())
#Installing packages
library(RCy3)
View(mergeNetworks())
View(mergeNetworks())
#Installing packages
library(RCy3)
library(rWikiPathways)
library(dplyr)
cytoscapePing()
View(mergeNetworks())
install.packages("renv")
go_list <- readRDS("~/GitHub/SCZ-CNV/GO Output/go_list.rds")
View(go_list)
setwd("~/GitHub/SCZ-CNV")
#Setting working directory
rm(list=ls())
#Cleaning up workspace
packages <- c("dplyr","httr","stringr","gprofiler2")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
#Different structure for rWikiPathways and RCy3 packages as these are not installed directly but via the BiocManager package
invisible(lapply(c(packages,"rWikiPathways","RCy3"), require, character.only = TRUE))
#Loading libraries
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
dir.create("Outputs")
dir.create(sprintf("Outputs/Session-%s",datetime))
dir.create(sprintf("Outputs/Session-%s/Networks",datetime))
#Creating directories for outputs generated by this script to be saved in; new "Session" folder created each time the script is ran (contains generated networks, metadata, and sessionInfo)
nw_savepath <- sprintf("%1$s/Outputs/Session-%2$s/Networks/",getwd(),datetime)
file.create(sprintf("Outputs/Session-%s/metadata.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Outputs/Session-%s/metadata.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
metadata.add("")
#Adding the timezone, date, and time to the metadata
invisible(file.create(sprintf("Outputs/Session-%s/sessioninfo-%s.txt",datetime,datetime)))
writeLines(capture.output(sessionInfo()),sprintf("Outputs/Session-%s/sessioninfo-%s.txt",datetime,datetime))
#Generating and adding a sessionInfo file to the current session output folder
cytoscapePing()
cytoscapeVersionInfo()
#Checking if Cytoscape is running and version info
metadata.add(capture.output(cytoscapeVersionInfo()))
checkinstall.app <- function(app) {
status_string <- getAppStatus(app)
#Getting install status of app
words <- strsplit(status_string, " ")[[1]]
last_word <- tail(words, 1)
#getAppStatus returns a character string instead of a logical value, so the last word (usually either "Installed" or "Uninstalled") from the output is checked
if (last_word == "Installed") {
print(sprintf("App %s is already installed.",app))
} else {
installApp(app)
print(sprintf("Installed app %s.",app))
}
}
#Function to check whether required Cytoscape apps are installed and installing them if not
applist <- c("Wikipathways", "DisGeNET-app", "CyTargetLinker","stringApp","BridgeDb","clusterMaker2")
#WikiPathways v.3.3.10
#DisGeNET-app v.7.3.0
#Note that for DisGeNET-app to properly function, users must do the following after first install of the app:
#In the Cytoscape GUI: Apps -> DisGeNET -> Start DisGeNET and wait for the database to be downloaded and unpacked
# Optionally also change the folder the DisGeNET database is downloaded to
#CyTargetLinker v. 4.1.0
#stringApp v. 2.0.3
#BridgeDb v.1.2.0
#clusterMaker2 v.2.3.4
#yFiles Layout Algorithms v.1.1.3 (core app, no express need to install)
lapply(applist,checkinstall.app)
#Checking and installing (if required) necessary Cytoscape apps
lapply(applist,getAppInformation)
metadata.add("Required Cytoscape apps and versions:")
invisible(metadata.add(print(lapply(applist,getAppInformation))))
metadata.add("")
# FUNCTION DICTIONARY-------------------------------------------------------------------------------------------------------------------
.defaultBaseUrl <- 'http://127.0.0.1:1234/v1'
#Defining the default base URL found in the RCy3 source as R object for altmergeNetworks
altmergeNetworks <- function(               sources = NULL,
title = NULL,
operation = "union",
nodeKeys = NULL,
nodeMergeMap = NULL,
nodesOnly = FALSE,
edgeKeys = NULL,
edgeMergeMap = NULL,
networkMergeMap = NULL,
inNetworkMerge = TRUE,
base.url = .defaultBaseUrl) {
cmd.string <- 'network merge' # a good start
# sources must be suppled
if(is.null(sources)) {
message("Missing sources!")
return(NULL)
} else {
sources.str <- paste(sources, collapse = ",")
cmd.string <- paste0(cmd.string,' sources="',sources.str,'"')
}
>>>>>>> Stashed changes
# defaults
cmd.string <- paste0(cmd.string,' operation=',operation)
cmd.string <- paste0(cmd.string,' nodesOnly=',nodesOnly)
cmd.string <- paste0(cmd.string,' inNetworkMerge=',inNetworkMerge)
# optional args
if(!is.null(title))
cmd.string <- paste0(cmd.string,' netName="',title,'"')
if(!is.null(nodeKeys))
cmd.string <- paste0(cmd.string,' nodeKeys="',paste(nodeKeys, collapse = ","),'"')
if(!is.null(edgeKeys))
cmd.string <- paste0(cmd.string,' edgeKeys="',paste(edgeKeys, collapse = ","),'"')
if(!is.null(nodeMergeMap)){
nodeMergeMap.str <- paste(nodeMergeMap, collapse = ",")
nodeMergeMap.str <- gsub("c\\(", "{", nodeMergeMap.str)
nodeMergeMap.str <- gsub("\\)", "}", nodeMergeMap.str)
cmd.string <- paste0(cmd.string,' nodeMergeMap="',nodeMergeMap.str,'"')
}
if(!is.null(edgeMergeMap)){
edgeMergeMap.str <- paste(edgeMergeMap, collapse = ",")
edgeMergeMap.str <- gsub("c\\(", "{", edgeMergeMap.str)
edgeMergeMap.str <- gsub("\\)", "}", edgeMergeMap.str)
cmd.string <- paste0(cmd.string,' edgeMergeMap="',edgeMergeMap.str,'"')
}
if(!is.null(networkMergeMap)){
networkMergeMap.str <- paste(networkMergeMap, collapse = ",")
networkMergeMap.str <- gsub("c\\(", "{", networkMergeMap.str)
networkMergeMap.str <- gsub("\\)", "}", networkMergeMap.str)
cmd.string <- paste0(cmd.string,' networkMergeMap="',networkMergeMap.str,'"')
}
res.data <- commandsPOST(cmd.string, base.url = base.url)
if(!is.null(res.data$SUID))
return(res.data$SUID)
else
return(res.data)
}
#Normally, RCy3's 'mergeNetworks' function would be used to unify imported networks into one supernetwork
#This function does however not work on the latest RCy3 release (v.2.22.1), but does work when running the script on RCy3 v.2.14.2
#RCy3 2.14.2 requires R v.4.1.3, requiring the entire script to run on an old version of R for one function that is used once
#Here, we redefine the function using the source code from RCy3 v.2.14.2 and simply use this alternate function to merge networks
queryspecies.wp <- c("Homo sapiens","Rattus norvegicus","Mus musculus")
getPathways.wp <- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% queryspecies.wp)
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
#Function to query WikiPathways using keyword and to extract WP IDs for the import function
createNodeSource <- function(source,doi=NULL) {
if (source == "WikiPathways") {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication.doi table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=STRINGnode table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
if ( source == "STRINGnode") {
commandsRun(sprintf('table set values columnName=%1$s handleEquations=false rowList="selected:true" table=%2$s value=1',source,nodetable))
}
else {
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Publication.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
#Function to create new column in node table specifying origin of network/node
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource("WikiPathways")
#Filling the 'WikiPathways' column with 1 to indicate the source
}
#Importing pathways from WikiPathways by pathway ID
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
disgeneturl<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (disgeneturl)
}
net <- "gene-disease-net"
disgenetRestUrl(netType = net)
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
disgeneturl<-disgenetRestUrl(netType)
restCall<-POST(disgeneturl, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
#Specifying parameters of the GDA network to be imported
<<<<<<< Updated upstream
# SCHIZOPHRENIA =======================================================================================================================
## IMPORTING AND MERGING ---------------------------------------------------------------------------------------------------------------
genedisparams.scz.df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
disgeneturl <- c()
#Preparing container for DisGeNET URL to be saved for addition to metadata file
apply(genedisparams.scz.df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
disgeneturl <<- disgenetRestUrl(net)
#Fetching the DisGeNET URL used to make this call
geneDisResult <- disgenetRestCall(net,gdp)
#Executing the DisGeNET query
createNodeSource("DisGeNET")
#Adding information about data source to each node
mapTableColumn("geneName","Human","HGNC","Ensembl")
#Mapping the HGNC gene name from the geneName column in the node table to Ensembl identifiers
mapTableColumn("geneName","Human","Entrez Gene","Ensembl")
#Mapping Entrez Gene IDs to Ensembl IDs
})
#Importing networks from DisGeNET
metadata.add(paste("DisGeNET URL:",disgeneturl))
metadata.add(paste("DisGeNET net type:",net))
metadata.add("")
#Adding the DisGeNET URL and net type used to add networks to the metadata file
=======
>>>>>>> Stashed changes
wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
sczcnv <- sapply(wpids, function(k) paste0("WP",k))
#Manually adding relevant SCZ CNV pathways from WikiPathways
keyword.wp <- "Schizophrenia"
getPathways.wp(keyword.wp)
lapply(c(Schizophrenia_wpids,sczcnv), import)
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways keywords:",keyword.wp))
metadata.add(paste("WikiPathways manually by ID:",paste(wpids,collapse =", ")))
metadata.add(paste("WikiPathways queried species:",paste(queryspecies.wp,collapse = ", ")))
#Adding the keyword and species used to filter the WikiPathways query to the metadata file
metadata.add("")
<<<<<<< Updated upstream
findPathwaysByText("Schizophrenia")
findPathwaysByText("Cancer")
?findPathwaysByText
setCurrentNetwork(snw_scz_filtered_string_clustered_go)
snw_scz_filtered_string_clustered_go <- getNetworkName()
setCurrentNetwork(snw_scz_filtered_string_clustered_go)
createColumnFilter(
filter.name = "has_GO_result",
column = "N_nodes",
criterion = 0,
predicate = "GREATER_THAN",
anyMatch = TRUE,
apply = TRUE
)
#Selecting nodes included in a 'valid' cluster, i.e. clusters with 5 or more nodes (GO analysis only performed for these)
#N_nodes is only generated for 'valid' clusters, so good column to filter by
invertNodeSelection()
deleteSelectedNodes()
#Inverting the selection and deleting these nodes: now, the network contains only the nodes that make up the clusters fed into the GO analysis
#Nodes not associated to a large enough cluster/GO term are likely not involved in any significant SCZ-contributing way
#The idea is to link GO terms (formed by clusters/genes)
#These changes to the visualization are essentially only visible when Cytoscape is set to always render details
#The network is big and not really organized besides clusters, the pie chart visualization that follows gives a much better impression
createVisualStyle("SNW_vis")
#Creating a new visual style that is subsequently customized
setVisualStyle("SNW_vis")
#Applying the new visual style
clusters <- as.character(unique(getTableColumns("node","gLayCluster"))$gLayCluster)
#gLayCluster column has many repeats of the clusters but a list of unique clusters is needed for table.column.values
clustercolors <- as.list(paletteColorRandom(length(clusters)))
#Generating a set of random colors based on the number of clusters in the SNW
#Make this constant, generate 100 colors or so once
#Then just select first N where N=Nclusters, so it stays flexible when more/fewer clusters are generated
#Much easier for legend too
setNodeColorMapping(table.column = "gLayCluster",
table.column.values=clusters,
colors=clustercolors,
mapping.type="d",
default.color="#FF5555",
style.name = "SNW_vis"
)
#table.column values must be defined like this as the gLayCluster column has many repeats of cluster numbers
#Random colors are generated per cluster based on the number of different clusters in the SNW
setEdgeLineWidthDefault(new.width = 0.5,
style.name = "SNW_vis")
#Reducing edge width to decrease hairball effect
setNodeLabelMapping(table.column = "Name2",
style.name="SNW_vis")
#Changing node labels to show HGNC name
commandsRun(sprintf("network import file columnTypeList='s,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa,sa' file=%s firstRowAsColumnNames=true delimiters=\\t rootNetworkList=-- Create new network collection -- startLoadRow=1", paste0(getwd(),"/CSVs/GO-clusters-vis.tsv")))
#Importing the previoulsy generated table 'GO-clusters-vis' back to Cytoscape as new network
#Essential to use .tsv and importing as such to avoid conflicts generated by .csv - commas separating terms in a string are interpreted as different columns by Cytoscape
Sys.sleep(1)
renameNetwork("GO_Visualisation_SCZ_SNW")
loadTableData(
data = read.table(file=paste0(getwd(),"/CSVs/summary_go_terms.txt"),header=TRUE, sep ="\t"),
data.key.column = "gLayCluster",
table.key.column = "gLayCluster"
)
#Loading an additional column into the network containing manually created summaries of GO terms based on biological knowledge
commandsRun(sprintf("network import file columnTypeList='s,t,ea' file=%s firstRowAsColumnNames=true delimiters=\\t startLoadRow=1", paste0(getwd(),"/CSVs/match_df.tsv")))
#Loading edge information (i.e. intersections between GO terms for each cluster)
createVisualStyle(style.name = 'GO_vis')
#Creating a new visual style that is subsequently customized
setVisualStyle("GO_vis")
#Applying a basic visual style to the network
setNodeSizeMapping(
table.column = "N_nodes",
sizes = c(50,200),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting the node size proportional to the number of nodes making up a cluster, e.g. a cluster containing more nodes is bigger
setNodeCustomPieChart(
columns = c("DisGeNET_source","Publication_source","WikiPathways_source","STRING_source"),
colors = paletteColorBrewerPaired(value.count = 8),
style.name= "GO_vis"
)
#Turning nodes into pie charts showing which sources make up the proportions of the nodes in them
setNodeShapeDefault("ellipse",
style.name= "GO_vis")
setNodeFillOpacityDefault(
new.opacity = 0,
style.name= "GO_vis"
)
#Removing node background
setNodeBorderWidthDefault(
new.width=0,
style.name= "GO_vis"
)
setNodeLabelMapping(
table.column = "summary_term",
style.name= "GO_vis"
)
#Changing node label to the processes/terms the nodes represent
setNodeFontSizeDefault(
new.size = 16.5,
style.name= "GO_vis"
)
#Setting node font size
setNodeLabelPositionDefault(
new.nodeAnchor = "S",
new.graphicAnchor = "N",
new.justification = "c",
new.xOffset = "0",
new.yOffset = "0",
style.name= "GO_vis"
)
#Moving label
setEdgeLineWidthMapping(
table.column = "GO_term_matches",
table.column.values = c(0,861),
widths = c(0,50),
mapping.type = "c",
style.name= "GO_vis"
)
#Setting edge width proportional to number of shared GO terms
setEdgeOpacityDefault(
new.opacity = 70,
style.name= "GO_vis"
)
#Decreasing edge opacity
setEdgeColorDefault('#DD3497',
style.name= "GO_vis")
#Changing edge color
commandsRun('layout force-directed defaultEdgeWeight=0.5 defaultNodeMass=3 defaultSpringCoefficient=1e-4 edgeAttribute="GO_term_matches" defaultSpringLength=300 isDeterministic=true maxWeightCutoff=1.79769E308 minWeightCutoff=0E0 numIterations=200 type=Heuristic')
layoutNetwork('force-directed')
#Adding network layout
#scaleLayout(axis="Both Axes", scaleFactor = 0.95)
#Not working as requires Cytoscape v.3.10.2 which does not seem available yet?
renameNetwork("Supernetwork functional analysis")
deleteNetwork(network="GO_Visualisation_SCZ_SNW")
go_vis_nw <- getNetworkName()
exportNetwork(filename=paste0(nw_savepath,"GO_Visualisation_SCZ_SNW"),"CX",network=go_vis_nw,overwriteFile=TRUE)
fitContent()
exportImage(filename = paste0(getwd(),"/Visualisations/SNW_functional_analysis"),type="SVG", overwriteFile=TRUE, zoom="200")
#Exporting the visualisation as network and as svg
#Changing edge color
commandsRun('layout force-directed defaultEdgeWeight=0.5 defaultNodeMass=3 defaultSpringCoefficient=1e-4 edgeAttribute="GO_term_matches" defaultSpringLength=300 isDeterministic=true maxWeightCutoff=1.79769E308 minWeightCutoff=0E0 numIterations=200 type=Heuristic')
layoutNetwork('force-directed')
exportImage(filename = paste0(getwd(),"/Visualisations/SNW_functional_analysis"),type="SVG", overwriteFile=TRUE, zoom="200")
#Changing node label to the processes/terms the nodes represent
setNodeFontSizeDefault(
new.size = 18,
style.name= "GO_vis"
)
#Changing node label to the processes/terms the nodes represent
setNodeFontSizeDefault(
new.size = 20,
style.name= "GO_vis"
)
exportImage(filename = paste0(getwd(),"/Visualisations/SNW_functional_analysis"),type="SVG", overwriteFile=TRUE, zoom="200")
fitContent()
exportImage(filename = paste0(getwd(),"/Visualisations/SNW_functional_analysis"),type="SVG", overwriteFile=TRUE, zoom="200")
=======
>>>>>>> Stashed changes
