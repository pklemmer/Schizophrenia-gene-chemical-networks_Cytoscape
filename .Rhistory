else
tablebody <- html %>%
html_element("body") %>%
html_element("div") %>%
html_element("table")
#Navigating to the table output by the SPARQL query
assign(output, html_table(tablebody), envir=.GlobalEnv)
#Getting the output as tibble
}
#Function to send a SPARQL query defined in a local text file to the endpoint and extract to desired dataframe
#Will not work if query includes comments ('# this is a comment') due to HTML conversion
createNodeSource <- function(source,doi=NULL) {
if (source == "WikiPathways") {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=fromWikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromDisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromPublication table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication.doi table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromSTRING table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
if ( source == "STRINGnode") {
commandsRun(sprintf('table set values columnName=%1$s handleEquations=false rowList="selected:true" table=%2$s value=1',source,nodetable))
}
else {
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Publication.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
#Function to create new column in node table specifying origin of network/node
# disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
#   if(is.null(netType)){
#     print("Network type not specified.")
#   }else{
#     disgeneturl<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
#   }
#   return (disgeneturl)
# }
# net <- "gene-disease-net"
# disgenetRestUrl(netType = net)
#   #Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
# disgenetRestCall<-function(netType,netParams){
#   disgeneturl<-disgenetRestUrl(netType)
#   restCall<-POST(disgeneturl, body = netParams, encode = "json")
#   result<-content(restCall,"parsed")
#   return(result)
# }
#   #Object that executes REST calls to DisGeNET module in Cytoscape
# geneDisParams <- function(source,dis,min) {list(
#   source = source,
#   assocType = "Any",
#   diseaseClass = "Any",
#   diseaseSearch = dis,
#   geneSearch = " ",
#   initialScoreValue = min,
#   finalScoreValue = "1.0"
# )}
#   #Specifying parameters of the GDA network to be imported
# SCHIZOPHRENIA =======================================================================================================================
## IMPORTING AND MERGING ---------------------------------------------------------------------------------------------------------------
start_section("Importing and merging")
sparqlquery("wp","metadataquery.txt","WikiPathways-SPARQL-metadata")
#Getting the metadata of the endpoint used for the WikiPathways SPARQL queries
metadata.add("WikiPathways SPARQL endpoint metadata")
metadata.add(`WikiPathways-SPARQL-metadata`)
#Adding the fetched metadata to the metadata file for the session
#It is technically possible that the metadata would describe an earlier version of the RDF if it is updated while the script runs but this is unlikely
sparqlquery("wp","pathwayquery.txt","wp_pathwaylist")
#Getting a list of pathways corresponding to a keyword as per defined in the query
writeLines(wp_pathwaylist[["PWID"]], con="Data/WikiPathways/Pathwaylists/automaticpathways.txt")
#Saving the output pathway list to file
manualpathways <- readLines("Data/WikiPathways/Pathwaylists/manualpathways.txt")
#Reading a file containing a list of manually selected pathways
allpathways <- c(wp_pathwaylist[["PWID"]],manualpathways)
#Joining the list of manually and automatically selected pathways together
allpathways_URL <- paste0("<",allpathways,">")
#Adding <> around all entries for easier use in SPARQL queries
#URLs need to be surrounded by <> to be recognised as such
writeLines(allpathways_URL, con="Data/WikiPathways/Pathwaylists/allpathways.txt")
#Writing list of all pathways in SPARQL URL format to file
sparqlquery("DisGeNET","disgenet-query.txt","gda")
#Querying the DisGeNET SPARQL endpoint for genes associated to schizophrenia from curated sources
gda$disgenet_curated <- str_extract(gda$source, "(?<=/)[^/]*$")
gda$Entrez_gene <- str_extract(gda$gene, "(?<=/)[^/]*$")
gda$HGNC_symbol <- str_extract(gda$symbol, "(?<=/)[^/]*$")
gda <- subset(gda, select=c(disgenet_curated,Entrez_gene,HGNC_symbol,gdascore))
#cleaning data
gda <- gda %>%
group_by(Entrez_gene) %>%
summarise(disgenet_curated = paste(disgenet_curated, collapse = "; "),
HGNC_symbol = paste(HGNC_symbol, collapse ="; "),
gdascore = paste(gdascore, collapse="; "))
#Concatenating to avoid duplicate gene rows if they are confirmed by multiple sources
mapper <- loadDatabase(bridgedb_dir)
#Loading bridgedb database
input <- data.frame(
source = rep("H", length(gda[, 3])),
identifier = gda[, 3]
)
#Making a new df to be used as input for bridgedb
#Map HGNC symbol
input <- input %>%
rename(source=source,
identifier=HGNC_symbol)
#Renaming cols for maps function compability
gda_map <- maps(mapper,input,"En")
#Mapping from HGNC to Ensembl
gda <- merge(gda,gda_map,by.x="HGNC_symbol",by.y="identifier")
#Merging the GDA and mapping tables
gda <- subset(gda, select=c(HGNC_symbol,mapping,Entrez_gene,disgenet_curated,gdascore))
gda <- gda %>%
rename(Ensembl_source=mapping)
gda$Ensembl <- gda$Ensembl_source
#Creating a duplicated Ensembl column for Cytoscape import
#Cleaning and renaming df
write.table(gda,file=paste0(getwd(),"/Data/DisGeNET/gda.tsv"),quote=FALSE,sep="\t",row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=sa,s,sa,sa,sa,sa delimiters=\\t file=%s firstRowAsColumnNames=true startLoadRow=1',paste0(getwd(),"/Data/DisGeNET/gda.tsv")))
Sys.sleep(0.5)
renameNetwork("DisGeNET network")
createNodeSource("DisGeNET")
createNodeSource <- function(source,doi=NULL) {
if (source == "DisGeNET") {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=fromWikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromDisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromPublication table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication.doi table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromSTRING table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
if ( source == "STRINGnode") {
commandsRun(sprintf('table set values columnName=%1$s handleEquations=false rowList="selected:true" table=%2$s value=1',source,nodetable))
}
else {
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Publication.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
createNodeSource <- function(source,doi=NULL) {
if (source == "DisGeNET") {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=fromWikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromDisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromPublication table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication.doi table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromSTRING table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
if ( source == "STRINGnode") {
commandsRun(sprintf('table set values columnName=%1$s handleEquations=false rowList="selected:true" table=%2$s value=1',source,nodetable))
}
else {
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Publication.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
sparqlquery("DisGeNET","disgenet-query.txt","gda")
#Querying the DisGeNET SPARQL endpoint for genes associated to schizophrenia from curated sources
gda$disgenet_curated <- str_extract(gda$source, "(?<=/)[^/]*$")
gda$Entrez_gene <- str_extract(gda$gene, "(?<=/)[^/]*$")
gda$HGNC_symbol <- str_extract(gda$symbol, "(?<=/)[^/]*$")
gda <- subset(gda, select=c(disgenet_curated,Entrez_gene,HGNC_symbol,gdascore))
#cleaning data
gda <- gda %>%
group_by(Entrez_gene) %>%
summarise(disgenet_curated = paste(disgenet_curated, collapse = "; "),
HGNC_symbol = paste(HGNC_symbol, collapse ="; "),
gdascore = paste(gdascore, collapse="; "))
#Concatenating to avoid duplicate gene rows if they are confirmed by multiple sources
mapper <- loadDatabase(bridgedb_dir)
#Loading bridgedb database
input <- data.frame(
source = rep("H", length(gda[, 3])),
identifier = gda[, 3]
)
#Making a new df to be used as input for bridgedb
#Map HGNC symbol
input <- input %>%
rename(source=source,
identifier=HGNC_symbol)
#Renaming cols for maps function compability
gda_map <- maps(mapper,input,"En")
#Mapping from HGNC to Ensembl
gda <- merge(gda,gda_map,by.x="HGNC_symbol",by.y="identifier")
#Merging the GDA and mapping tables
gda <- subset(gda, select=c(HGNC_symbol,mapping,Entrez_gene,disgenet_curated,gdascore))
gda <- gda %>%
rename(Ensembl_source=mapping)
gda$Ensembl <- gda$Ensembl_source
#Creating a duplicated Ensembl column for Cytoscape import
#Cleaning and renaming df
write.table(gda,file=paste0(getwd(),"/Data/DisGeNET/gda.tsv"),quote=FALSE,sep="\t",row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=sa,s,sa,sa,sa,sa delimiters=\\t file=%s firstRowAsColumnNames=true startLoadRow=1',paste0(getwd(),"/Data/DisGeNET/gda.tsv")))
Sys.sleep(0.5)
renameNetwork("DisGeNET network")
createNodeSource("DisGeNET")
createNodeSource <- function(source,doi=NULL) {
if (source == "DisGeNET") {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=fromWikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromDisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromPublication table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication.doi table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromSTRING table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
if ( source == "STRINGnode") {
commandsRun(sprintf('table set values columnName=%1$s handleEquations=false rowList="selected:true" table=%2$s value=1',source,nodetable))
}
else {
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Publication.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
sparqlquery("DisGeNET","disgenet-query.txt","gda")
#Querying the DisGeNET SPARQL endpoint for genes associated to schizophrenia from curated sources
gda$disgenet_curated <- str_extract(gda$source, "(?<=/)[^/]*$")
gda$Entrez_gene <- str_extract(gda$gene, "(?<=/)[^/]*$")
gda$HGNC_symbol <- str_extract(gda$symbol, "(?<=/)[^/]*$")
gda <- subset(gda, select=c(disgenet_curated,Entrez_gene,HGNC_symbol,gdascore))
#cleaning data
gda <- gda %>%
group_by(Entrez_gene) %>%
summarise(disgenet_curated = paste(disgenet_curated, collapse = "; "),
HGNC_symbol = paste(HGNC_symbol, collapse ="; "),
gdascore = paste(gdascore, collapse="; "))
#Concatenating to avoid duplicate gene rows if they are confirmed by multiple sources
mapper <- loadDatabase(bridgedb_dir)
#Loading bridgedb database
input <- data.frame(
source = rep("H", length(gda[, 3])),
identifier = gda[, 3]
)
#Making a new df to be used as input for bridgedb
#Map HGNC symbol
input <- input %>%
rename(source=source,
identifier=HGNC_symbol)
#Renaming cols for maps function compability
gda_map <- maps(mapper,input,"En")
#Mapping from HGNC to Ensembl
gda <- merge(gda,gda_map,by.x="HGNC_symbol",by.y="identifier")
#Merging the GDA and mapping tables
gda <- subset(gda, select=c(HGNC_symbol,mapping,Entrez_gene,disgenet_curated,gdascore))
gda <- gda %>%
rename(Ensembl_source=mapping)
gda$Ensembl <- gda$Ensembl_source
#Creating a duplicated Ensembl column for Cytoscape import
#Cleaning and renaming df
write.table(gda,file=paste0(getwd(),"/Data/DisGeNET/gda.tsv"),quote=FALSE,sep="\t",row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=sa,s,sa,sa,sa,sa delimiters=\\t file=%s firstRowAsColumnNames=true startLoadRow=1',paste0(getwd(),"/Data/DisGeNET/gda.tsv")))
Sys.sleep(0.5)
renameNetwork("DisGeNET network")
createNodeSource("DisGeNET")
createNodeSource("fromDisGeNET")
sparqlquery("wp","pathwayquery.txt","wp_pathwaylist")
#Getting a list of pathways corresponding to a keyword as per defined in the query
writeLines(wp_pathwaylist[["PWID"]], con="Data/WikiPathways/Pathwaylists/automaticpathways.txt")
#Saving the output pathway list to file
manualpathways <- readLines("Data/WikiPathways/Pathwaylists/manualpathways.txt")
#Reading a file containing a list of manually selected pathways
allpathways <- c(wp_pathwaylist[["PWID"]],manualpathways)
#Joining the list of manually and automatically selected pathways together
allpathways_URL <- paste0("<",allpathways,">")
#Adding <> around all entries for easier use in SPARQL queries
#URLs need to be surrounded by <> to be recognised as such
writeLines(allpathways_URL, con="Data/WikiPathways/Pathwaylists/allpathways.txt")
#Writing list of all pathways in SPARQL URL format to file
sparqlquery("DisGeNET","disgenet-query.txt","gda")
#Querying the DisGeNET SPARQL endpoint for genes associated to schizophrenia from curated sources
gda$disgenet_curated <- str_extract(gda$source, "(?<=/)[^/]*$")
gda$Entrez_gene <- str_extract(gda$gene, "(?<=/)[^/]*$")
gda$HGNC_symbol <- str_extract(gda$symbol, "(?<=/)[^/]*$")
gda <- subset(gda, select=c(disgenet_curated,Entrez_gene,HGNC_symbol,gdascore))
#cleaning data
gda <- gda %>%
group_by(Entrez_gene) %>%
summarise(disgenet_curated = paste(disgenet_curated, collapse = "; "),
HGNC_symbol = paste(HGNC_symbol, collapse ="; "),
gdascore = paste(gdascore, collapse="; "))
#Concatenating to avoid duplicate gene rows if they are confirmed by multiple sources
mapper <- loadDatabase(bridgedb_dir)
#Loading bridgedb database
input <- data.frame(
source = rep("H", length(gda[, 3])),
identifier = gda[, 3]
)
#Making a new df to be used as input for bridgedb
#Map HGNC symbol
input <- input %>%
rename(source=source,
identifier=HGNC_symbol)
#Renaming cols for maps function compability
gda_map <- maps(mapper,input,"En")
#Mapping from HGNC to Ensembl
gda <- merge(gda,gda_map,by.x="HGNC_symbol",by.y="identifier")
#Merging the GDA and mapping tables
gda <- subset(gda, select=c(HGNC_symbol,mapping,Entrez_gene,disgenet_curated,gdascore))
gda <- gda %>%
rename(Ensembl_source=mapping)
gda$Ensembl <- gda$Ensembl_source
#Creating a duplicated Ensembl column for Cytoscape import
#Cleaning and renaming df
write.table(gda,file=paste0(getwd(),"/Data/DisGeNET/gda.tsv"),quote=FALSE,sep="\t",row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=sa,s,sa,sa,sa,sa delimiters=\\t file=%s firstRowAsColumnNames=true startLoadRow=1',paste0(getwd(),"/Data/DisGeNET/gda.tsv")))
Sys.sleep(0.5)
renameNetwork("DisGeNET network")
createNodeSource("fromDisGeNET")
createNodeSource <- function(source,doi=NULL) {
if (source == "DisGeNET") {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=fromWikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromDisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromPublication table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication.doi table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromSTRING table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
if ( source == "STRINGnode") {
commandsRun(sprintf('table set values columnName=%1$s handleEquations=false rowList="selected:true" table=%2$s value=1',source,nodetable))
}
else {
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Publication.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
createNodeSource("fromDisGeNET")
createNodeSource <- function(source,doi=NULL) {
if (source == "DisGeNET") {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=fromWikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromDisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromPublication table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication.doi table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromSTRING table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
if ( source == "STRINGnode") {
commandsRun(sprintf('table set values columnName=%1$s handleEquations=false rowList="selected:true" table=%2$s value=1',source,nodetable))
}
else {
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Publication.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
createNodeSource("fromDisGeNET")
sparqlquery("DisGeNET","disgenet-query.txt","gda")
#Querying the DisGeNET SPARQL endpoint for genes associated to schizophrenia from curated sources
gda$disgenet_curated <- str_extract(gda$source, "(?<=/)[^/]*$")
gda$Entrez_gene <- str_extract(gda$gene, "(?<=/)[^/]*$")
gda$HGNC_symbol <- str_extract(gda$symbol, "(?<=/)[^/]*$")
gda <- subset(gda, select=c(disgenet_curated,Entrez_gene,HGNC_symbol,gdascore))
#cleaning data
gda <- gda %>%
group_by(Entrez_gene) %>%
summarise(disgenet_curated = paste(disgenet_curated, collapse = "; "),
HGNC_symbol = paste(HGNC_symbol, collapse ="; "),
gdascore = paste(gdascore, collapse="; "))
#Concatenating to avoid duplicate gene rows if they are confirmed by multiple sources
mapper <- loadDatabase(bridgedb_dir)
#Loading bridgedb database
input <- data.frame(
source = rep("H", length(gda[, 3])),
identifier = gda[, 3]
)
#Making a new df to be used as input for bridgedb
#Map HGNC symbol
input <- input %>%
rename(source=source,
identifier=HGNC_symbol)
#Renaming cols for maps function compability
gda_map <- maps(mapper,input,"En")
#Mapping from HGNC to Ensembl
gda <- merge(gda,gda_map,by.x="HGNC_symbol",by.y="identifier")
#Merging the GDA and mapping tables
gda <- subset(gda, select=c(HGNC_symbol,mapping,Entrez_gene,disgenet_curated,gdascore))
gda <- gda %>%
rename(Ensembl_source=mapping)
gda$Ensembl <- gda$Ensembl_source
#Creating a duplicated Ensembl column for Cytoscape import
#Cleaning and renaming df
write.table(gda,file=paste0(getwd(),"/Data/DisGeNET/gda.tsv"),quote=FALSE,sep="\t",row.names=FALSE)
commandsRun(sprintf('network import file columnTypeList=sa,s,sa,sa,sa,sa delimiters=\\t file=%s firstRowAsColumnNames=true startLoadRow=1',paste0(getwd(),"/Data/DisGeNET/gda.tsv")))
Sys.sleep(0.5)
renameNetwork("DisGeNET network")
createNodeSource("fromDisGeNET")
createNodeSource <- function(source,doi=NULL) {
if (source == "fromDisGeNET") {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=fromWikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromDisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromPublication table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication.doi table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromSTRING table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
if ( source == "STRINGnode") {
commandsRun(sprintf('table set values columnName=%1$s handleEquations=false rowList="selected:true" table=%2$s value=1',source,nodetable))
}
else {
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Publication.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
createNodeSource("fromDisGeNET")
createNodeSource <- function(source,doi=NULL) {
if (source == "fromDisGeNET") {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
}
#Networks imported from WikiPathways have a type in the node table designations, as they have 2 spaces between "default" and "node" instead of one
#This check determines which node table name format is to be applied depending on the source (WikiPathways or other)
else {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
}
commandsRun(sprintf("table create column columnName=fromWikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromDisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromPublication table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Publication.doi table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=fromSTRING table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
if ( source == "STRINGnode") {
commandsRun(sprintf('table set values columnName=%1$s handleEquations=false rowList="selected:true" table=%2$s value=1',source,nodetable))
}
else {
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
if (!is.null(doi)) {
commandsRun(sprintf("table set values columnName=Publication.doi handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,doi))
#Adding doi for literature used if provided
}
}
createNodeSource("fromDisGeNET")
