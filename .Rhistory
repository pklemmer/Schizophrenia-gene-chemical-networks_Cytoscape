url<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (url)
}
disgenetRestUrl(netType = "gene-disease-net")
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
url<-disgenetRestUrl(netType)
restCall<-POST(url, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
genedisparams_df <- read.table("CSVs/disgenetparams.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
View(genedisparams_df)
genedisparams-scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
genedisparams_scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
genedisparams_scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
#dplyr 1.1.2; httr 1.4.7;jsonlite 1.8.4; BiocManager 1.30.22; rWikiPathways 1.14.0; RCy3 2.14.2
#Cytoscape 3.10.1
setwd("~/GitHub/SCZ-CNV")
packages <- c("dplyr","httr","jsonlite")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
invisible(lapply(c("dplyr","httr","jsonlite","rWikiPathways","RCy3"), require, character.only = TRUE))
cytoscapePing()
cytoscapeVersionInfo()
#Checking if Cytoscape is running and version info
installApp('WikiPathways')
#v. 3.3.10
installApp('DisGeNET-app')
getpathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% c("Homo sapiens","Rattus norvegicus","Mus musculus"))
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
}
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
url<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (url)
}
disgenetRestUrl(netType = "gene-disease-net")
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
url<-disgenetRestUrl(netType)
restCall<-POST(url, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
genedisparams_scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_scz_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
getpathways.wp("Schizophrenia")
wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
sczcnv <- sapply(wpids, function(k) paste0("WP",k))
lapply(c(Schizophrenia_wpids,sczcnv), import)
networklist.dup <- getNetworkList()
dup.filter <- function(input,suffix) {
filtered_list <- input[substr(input, nchar(input) - 1,nchar(input))==suffix]
}
duplicates <- dup.filter(networklist.dup,"_1")
#Getting duplicate networks (Cytoscape marks duplicate networks with a "_1" suffix to the network name)
delete.dupes <- function(nw) {
setCurrentNetwork(nw)
deleteNetwork()
}
lapply(duplicates,delete.dupes)
networklist <- getNetworkList()
setCurrentNetwork(networklist[[1]])
for(i in 1:length(networklist)) {
current <- getNetworkName()
mergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union")
}
bignw_scz <- getNetworkName()
?deleteAllnetworks()
?deleteAllNetworks()
?deleteNetwork()
#Looping through the network list to merge all currently open networks with each other, creating one large unified network
networklist <- getNetworkList()
bignw_scz <- getNetworkName()
#Looping through the network list to merge all currently open networks with each other, creating one large unified network
networklist <- getNetworkList()
bignw_scz <- getNetworkName()
deleteNetwork(networklist[networklist != bignw_scz])
?lapply
#Looping through the network list to merge all currently open networks with each other, creating one large unified network
networklist <- getNetworkList()
bignw_scz <- getNetworkName()
lapply(networklist[networklist != bignw_scz],deleteNetwork)
hsa <- file.path(getwd(), "Linksets", "wikipathways-20220511-hsa-WP.xgmml")
hsa_react <- file.path(getwd(), "Linksets", "wikipathways-20220511-hsa-REACTOME.xgmml")
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefId" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
bignw_scz_ext <- getNetworkName()
layout("force-directed")
layout()
layoutNetwork()
genedisparams_adc_df <- read.table("CSVs/disgenetparams-adc.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_adc_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
getpathways.wp("Dopamine")
getpathways.wp("Addiction")
lapply(c(Dopamine_wpids,Addiction_wpids), import)
networklist.dup <- getNetworkList()
dup.filter <- function(input,suffix) {
filtered_list <- input[substr(input, nchar(input) - 1,nchar(input))==suffix]
}
duplicates <- dup.filter(networklist.dup,"_1")
#Getting duplicate networks (Cytoscape marks duplicate networks with a "_1" suffix to the network name)
delete.dupes <- function(nw) {
setCurrentNetwork(nw)
deleteNetwork()
}
lapply(duplicates,delete.dupes)
preserve <- c(bignw_scz, bignW_scz_ext)
preserve <- c(bignw_scz, bignw_scz_ext)
networklist <- getNetworkList()[getNetworkList != preserve]
networklist <- getNetworkList()
networklist <- networklist[networklist != preserve]
#Getting all networks besides the big SCZ networks
setCurrentNetwork(networklist[[1]])
for(i in 1:length(networklist)) {
current <- getNetworkName()
mergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union")
}
networklist <- getNetworkList()
networklist <- networklist[networklist != preserve]
preserve <- c(bignw_scz, bignw_scz_ext,bignw_adc)
bignw_adc <- getNetworkName()
preserve <- c(bignw_scz, bignw_scz_ext,bignw_adc)
#Getting the name of the unified network to preserve it from deletion
lapply(networklist[networklist != preserve],deleteNetwork)
genedisparams_adc_df <- read.table("CSVs/disgenetparams-adc.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_adc_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
getpathways.wp("Dopamine")
getpathways.wp("Addiction")
lapply(c(Dopamine_wpids,Addiction_wpids), import)
networklist.dup <- getNetworkList()
dup.filter <- function(input,suffix) {
filtered_list <- input[substr(input, nchar(input) - 1,nchar(input))==suffix]
}
duplicates <- dup.filter(networklist.dup,"_1")
#Getting duplicate networks (Cytoscape marks duplicate networks with a "_1" suffix to the network name)
delete.dupes <- function(nw) {
setCurrentNetwork(nw)
deleteNetwork()
}
lapply(duplicates,delete.dupes)
networklist <- getNetworkList()
networklist <- networklist[networklist != preserve]
preserve <- c(bignw_scz, bignw_scz_ext)
networklist <- networklist[networklist != preserve]
networklist <- networklist[!networklist %in% preserve]
#Getting all networks besides the big SCZ networks
setCurrentNetwork(networklist[[1]])
for(i in 1:length(networklist)) {
current <- getNetworkName()
mergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union")
}
#Getting all networks besides the big SCZ networks
setCurrentNetwork(networklist[[1]])
#Getting all networks besides the big SCZ networks
setCurrentNetwork(networklist[[2]])
for(i in 1:length(networklist)) {
current <- getNetworkName()
mergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union")
}
networklist <- getNetworkList()
networklist <- networklist[!networklist %in% preserve]
View(networklist)
networklist
networklist <- getNetworkList()
networklist <- networklist[!networklist %in% preserve]
#Getting all networks besides the big SCZ networks
setCurrentNetwork(networklist[[2]])
for(i in 1:length(networklist)) tryCatch({
current <- getNetworkName()
mergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union")
}, error = function(e) {
cat("An error occured")
cat("Error message")
cat("Call stack")
})
networklist <- getNetworkList()
bignw_adc <- getNetworkName()
preserve <- c(bignw_scz, bignw_scz_ext,bignw_adc)
#Getting the name of the unified network to preserve it from deletion
lapply(networklist[!networklist %in% preserve],deleteNetwork)
hsa <- file.path(getwd(), "Linksets", "wikipathways-20220511-hsa-WP.xgmml")
hsa_react <- file.path(getwd(), "Linksets", "wikipathways-20220511-hsa-REACTOME.xgmml")
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefId" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
#Extending the network with previously loaded linksets
layoutNetwork()
#Adding basic network layout
bignw_adc_ext <- getNetworkName()
preserve <- c(bignw_scz, bignw_scz_ext,bignw_adc,bignw_adc_ext)
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
#dplyr 1.1.2; httr 1.4.7;jsonlite 1.8.4; BiocManager 1.30.22; rWikiPathways 1.14.0; RCy3 2.14.2
#Cytoscape 3.10.1
setwd("~/GitHub/SCZ-CNV")
packages <- c("dplyr","httr","jsonlite")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
invisible(lapply(c("dplyr","httr","jsonlite","rWikiPathways","RCy3"), require, character.only = TRUE))
packages <- c("dplyr","httr","jsonlite","STRINGdb")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
invisible(lapply(c(packages,"rWikiPathways","RCy3"), require, character.only = TRUE))
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
#dplyr 1.1.2; httr 1.4.7;jsonlite 1.8.4; BiocManager 1.30.22; rWikiPathways 1.14.0; RCy3 2.14.2
#Cytoscape 3.10.1
setwd("~/GitHub/SCZ-CNV")
packages <- c("dplyr","httr","jsonlite")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
invisible(lapply(c(packages,"rWikiPathways","RCy3"), require, character.only = TRUE))
## STRINGIFY --------------------------------------------------------------------------------------------------------------------------
commandsRun("string stringify colDisplayName=name column=name compoundQuery=true cutoff=0.9 includeNotMapped=false networkNoGui=CURRENT networkType='full STRING network' species= Homo sapiens")
# SETUP -----------------------------------------------------------------------------------------------------------------------
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
#dplyr 1.1.2; httr 1.4.7;jsonlite 1.8.4; BiocManager 1.30.22; rWikiPathways 1.14.0; RCy3 2.14.2
#Cytoscape 3.10.1
setwd("~/GitHub/SCZ-CNV")
packages <- c("dplyr","httr","jsonlite")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
invisible(lapply(c(packages,"rWikiPathways","RCy3"), require, character.only = TRUE))
## STRINGIFY --------------------------------------------------------------------------------------------------------------------------
commandsRun("string stringify colDisplayName=name column=name compoundQuery=true cutoff=0.9 includeNotMapped=false networkNoGui=CURRENT networkType='full STRING network' species= Homo sapiens")
?renameNetowrk
?renamenNetwork
?renameNetwork
renameNetwork("Schizophrenia Supernetwork")
renameNetwork("Schizophrenia supernetwork")
commandsRun("string stringify colDisplayName=name column=name compoundQuery=true cutoff=0.9 includeNotMapped=false networkNoGui=CURRENT networkType='full STRING network' species= Homo sapiens")
commandsRun("string stringify colDisplayName=name column=name compoundQuery=false cutoff=0.9 includeNotMapped=false networkNoGui=CURRENT networkType='full STRING network' species= Homo sapiens")
commandsRun("string stringify colDisplayName=name column=name compoundQuery=false cutoff=0.5 includeNotMapped=false networkNoGui=CURRENT networkType='full STRING network' species= Homo sapiens")
commandsRun("string stringify column=name compoundQuery=false cutoff=0.5 includeNotMapped=false networkNoGui=CURRENT networkType='full STRING network' species= Homo sapiens")
commandsRun("string stringify column=name compoundQuery=false cutoff=0.4 includeNotMapped=false networkNoGui=current networkType='full STRING network' species='Homo sapiens'")
## STRINGIFY --------------------------------------------------------------------------------------------------------------------------
setCurrentNetwork(snw_scz)
commandsRun("string stringify column=name compoundQuery=false cutoff=0.4 includeNotMapped=false networkNoGui=current networkType='full STRING network' species='Homo sapiens'")
# SETUP -----------------------------------------------------------------------------------------------------------------------
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
#dplyr 1.1.2; httr 1.4.7;jsonlite 1.8.4; BiocManager 1.30.22; rWikiPathways 1.14.0; RCy3 2.14.2
#Cytoscape 3.10.1
setwd("~/GitHub/SCZ-CNV")
packages <- c("dplyr","httr","jsonlite")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
invisible(lapply(c(packages,"rWikiPathways","RCy3"), require, character.only = TRUE))
cytoscapePing()
cytoscapeVersionInfo()
getpathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% c("Homo sapiens","Rattus norvegicus","Mus musculus"))
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name - species default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=NodeSource table=%s type=string",nodetable))
#Creating a new column named "NodeSource" in which the source of the node is stored
commandsRun(sprintf("table set values columnName=NodeSource handleEquations=false rowList=all table=%1$s value=%2$s",nodetable,source))
#Filling the new "NodeSource" column with the source
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
}
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
url<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (url)
}
disgenetRestUrl(netType = "gene-disease-net")
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
url<-disgenetRestUrl(netType)
restCall<-POST(url, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
genedisparams_scz_df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
genedisparams_adc_df <- read.table("CSVs/disgenetparams-adc.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
apply(genedisparams_adc_df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
geneDisResult <- disgenetRestCall("gene-disease-net",gdp)
createNodeSource("DisGeNET")
})
getpathways.wp("Dopamine")
getpathways.wp("Addiction")
lapply(c(Dopamine_wpids,Addiction_wpids), import)
networklist.dup <- getNetworkList()
dup.filter <- function(input,suffix) {
filtered_list <- input[substr(input, nchar(input) - 1,nchar(input))==suffix]
}
duplicates <- dup.filter(networklist.dup,"_1")
#Getting duplicate networks (Cytoscape marks duplicate networks with a "_1" suffix to the network name)
delete.dupes <- function(nw) {
setCurrentNetwork(nw)
deleteNetwork()
}
lapply(duplicates,delete.dupes)
networklist <- getNetworkList()
#Getting all networks besides the big SCZ networks
setCurrentNetwork(networklist[[2]])
for(i in 1:length(networklist)) tryCatch({
current <- getNetworkName()
mergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union")
}, error = function(e) {
cat("An error occured:\n")
cat("Error message: ", conditionMessage(e),"\n")
cat("Call stack:\n")
print(sys/calls())
})
