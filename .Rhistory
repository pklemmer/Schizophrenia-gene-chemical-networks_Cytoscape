?lapply
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(lapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(c(sysdatetime,Sys.timezone()))
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
?apply
?sapply
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
metadata.add(c(sysdatetime,Sys.timezone()))
metadata.add(c(sysdatetime,Sys.timezone()))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(info, sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(c(sysdatetime,Sys.timezone()))
?write
?Sys.time
metadata.add(c(sysdatetime,Sys.timezone()))
metadata.add(c(datetime,Sys.timezone()))
# METADATA ============================================================================================================================
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
file.create(sprintf("Metadata/metadata_%s.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(c(datetime,Sys.timezone()))
class(Sys.time())
# METADATA ============================================================================================================================
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
file.create(sprintf("Metadata/metadata_%s.txt",sysdatetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",sysdatetime),append=TRUE, sep = "\n")
}
# METADATA ============================================================================================================================
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
file.create(sprintf("Metadata/metadata_%s.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(c(datetime,Sys.timezone()))
metadata.add(c(sysdatetime,Sys.timezone()))
View(sysdatetime)
print(sysdatetime)
metadata.add(c(print(sysdatetime),Sys.timezone()))
metadata.add(c(return(sysdatetime),Sys.timezone()))
as.character(sysdatetime)
as.character(c(sysdatetime,Sys.timezone()))
as.character(Sys.timezone)
as.character(Sys.timezone())
sapply(c(sysdatetime,Sys.timezone()),as.character)
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
# METADATA ============================================================================================================================
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
file.create(sprintf("Metadata/metadata_%s.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
deleteAllNetworks()
genedisparams.scz.df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
disgeneturl <- c()
#Preparing container for DisGeNET URL to be saved for addition to metadata file
apply(genedisparams.scz.df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
disgeneturl <<- disgenetRestUrl(net)
#Fetching the DisGeNET URL used to make this call
geneDisResult <- disgenetRestCall(net,gdp)
#Executing the DisGeNET query
createNodeSource("DisGeNET")
#Adding information about data source to each node
mapToEnsembl("geneName","HGNC")
#Mapping the HGNC gene name from the geneName column in the node table to Ensembl identifiers
})
#Importing networks from DisGeNET
metadata.add(c(paste("DisGeNET URL: ",disgeneturl)),net)
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
disgeneturl<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (disgeneturl)
}
net <- "gene-disease-net"
disgenetRestUrl(netType = net)
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
disgeneturl<-disgenetRestUrl(netType)
restCall<-POST(disgeneturl, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
#Importing networks from DisGeNET
metadata.add(paste("DisGeNET URL: ",disgeneturl))
metadata.add(net)
#Importing networks from DisGeNET
metadata.add(paste("DisGeNET URL: ",disgeneturl))
metadata.add(paste("DisGeNET net type: ",net)
metadata.add(paste("DisGeNET net type: ",net))
metadata.add(paste("DisGeNET net type: ",net))
deleteAllNetworks()
# METADATA ============================================================================================================================
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
file.create(sprintf("Metadata/metadata_%s.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
genedisparams.scz.df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
disgeneturl <- c()
#Preparing container for DisGeNET URL to be saved for addition to metadata file
apply(genedisparams.scz.df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
disgeneturl <<- disgenetRestUrl(net)
#Fetching the DisGeNET URL used to make this call
geneDisResult <- disgenetRestCall(net,gdp)
#Executing the DisGeNET query
createNodeSource("DisGeNET")
#Adding information about data source to each node
mapToEnsembl("geneName","HGNC")
#Mapping the HGNC gene name from the geneName column in the node table to Ensembl identifiers
})
#Importing networks from DisGeNET
metadata.add(paste("DisGeNET URL: ",disgeneturl))
metadata.add(paste("DisGeNET net type: ",net))
# METADATA ============================================================================================================================
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
file.create(sprintf("Metadata/metadata_%s.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
genedisparams.scz.df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
disgeneturl <- c()
#Preparing container for DisGeNET URL to be saved for addition to metadata file
apply(genedisparams.scz.df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
disgeneturl <<- disgenetRestUrl(net)
#Fetching the DisGeNET URL used to make this call
geneDisResult <- disgenetRestCall(net,gdp)
#Executing the DisGeNET query
createNodeSource("DisGeNET")
#Adding information about data source to each node
mapToEnsembl("geneName","HGNC")
#Mapping the HGNC gene name from the geneName column in the node table to Ensembl identifiers
})
#Importing networks from DisGeNET
metadata.add(paste("DisGeNET URL:",disgeneturl))
metadata.add(paste("DisGeNET net type:",net))
?rWikiPathways
?rWikipathwats
?rWikipathways
getPathways.wp<- function(i) {
queryspecies.wp <- c("Homo sapiens","Rattus norvegicus","Mus musculus")
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% queryspecies.wp)
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
View(queryspecies.wp)
# FUNCTION DICTIONARY-------------------------------------------------------------------------------------------------------------------
queryspecies.wp <- c("Homo sapiens","Rattus norvegicus","Mus musculus")
getPathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% queryspecies.wp)
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
getPathways.wp("Schizophrenia")
wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
sczcnv <- sapply(wpids, function(k) paste0("WP",k))
getPathways.wp("Schizophrenia")
lapply(c(Schizophrenia_wpids,sczcnv), import)
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways Queried species:",queryspecies.wp))
?paste
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(cat("WikiPathways Queried species:",paste(queryspecies.wp,collapse = ", "),"\n"))
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways Queried species:",queryspecies.wp,collapse = ", "))
View(queryspecies.wp)
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways Queried species:",as.character(queryspecies.wp)))
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways Queried species:",as.string(queryspecies.wp)))
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways Queried species:",as.array(queryspecies.wp)))
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways Queried species:",paste(queryspecies.wp,collapse = ", ")))
#Adding the species used to filter the WikiPathways query to the metadata file
metadata.add(paste("WikiPathways keyword:",keyword.wp))
keyword.wp <- "Schizophrenia"
#Adding the species used to filter the WikiPathways query to the metadata file
metadata.add(paste("WikiPathways keyword:",keyword.wp))
# METADATA ============================================================================================================================
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
file.create(sprintf("Metadata/metadata_%s.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
metadata.add("")
#Importing networks from DisGeNET
metadata.add(paste("DisGeNET URL:",disgeneturl))
metadata.add(paste("DisGeNET net type:",net))
metadata.add("")
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways keywords:",keyword.wp))
metadata.add(paste("Manually added WikiPathways by ID:",wpids))
metadata.add(paste("WikiPathways Queried species:",paste(queryspecies.wp,collapse = ", ")))
# METADATA ============================================================================================================================
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
file.create(sprintf("Metadata/metadata_%s.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
metadata.add("")
#Importing networks from DisGeNET
metadata.add(paste("DisGeNET URL:",disgeneturl))
metadata.add(paste("DisGeNET net type:",net))
metadata.add("")
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways keywords:",keyword.wp))
metadata.add(paste("WikiPathways manually by ID:",paste(wpids,collapse =", ")))
metadata.add(paste("WikiPathways Queried species:",paste(queryspecies.wp,collapse = ", ")))
deleteAllNetworks()
# SETUP -----------------------------------------------------------------------------------------------------------------------
setwd("~/GitHub/SCZ-CNV")
sessionInfo()
#Requires R 4.1.3 and Rtools 4.0
#dplyr 1.1.2; httr 1.4.7;jsonlite 1.8.4; BiocManager 1.30.22; rWikiPathways 1.14.0; RCy3 2.14.2
#Cytoscape 3.10.1
file.create("sessioninfo.txt")
writeLines(capture.output(sessionInfo()),"sessionInfo.txt")
packages <- c("dplyr","httr","jsonlite")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
if(!"rWikiPathways" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("rWikiPathways")
}
if(!"RCy3" %in% installed.packages()){
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("RCy3")
}
#Checking if required packages are installed and installing if not
invisible(lapply(c(packages,"rWikiPathways","RCy3"), require, character.only = TRUE))
cytoscapePing()
cytoscapeVersionInfo()
# FUNCTION DICTIONARY-------------------------------------------------------------------------------------------------------------------
queryspecies.wp <- c("Homo sapiens","Rattus norvegicus","Mus musculus")
getPathways.wp<- function(i) {
pw <- findPathwaysByText(i)
pw <- pw %>%
dplyr::filter(species %in% queryspecies.wp)
#Filtering by species
pw.ids <- paste0(i, "_wpids")
assign(pw.ids, as.character(pw$id),envir = .GlobalEnv)
#Extracting WP IDs
}
createNodeSource <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name default node] (note the single space between "default" and "node")
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=PharmGKB table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Literature table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
createNodeSource.wp <- function(source) {
networkname <- getNetworkName()
nodetable <- paste0(networkname," default  node")
#Getting the name of the node table of the previously imported network with following nomenclature [Network name default  node] (note the two spaces between "default" and "node")
commandsRun(sprintf("table create column columnName=WikiPathways table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=DisGeNET table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=PharmGKB table=%s type=string",nodetable))
commandsRun(sprintf("table create column columnName=Literature table=%s type=string",nodetable))
#Creating a new column for each source used for all networks
commandsRun(sprintf("table set values columnName=%1$s handleEquations=false rowList=all table=%2$s value=1",source,nodetable))
#Filling the new column of the corresponding source with 1 to indicate which source the node is imported from
}
mapToEnsembl <- function(col,from) {
mapTableColumn(col,"Human",from,"Ensembl")
}
import <- function(j) {
commandsRun(paste0('wikipathways import-as-network id=', j))
#Pasting WikiPathways IDs into a Cytoscape command line prompt to import as networks
createNodeSource.wp("WikiPathways")
#Filling the 'WikiPathways' column with 1 to indicate the source
}
disgenetRestUrl<-function(netType,host="127.0.0.1",port=1234,version="v7"){
if(is.null(netType)){
print("Network type not specified.")
}else{
disgeneturl<-sprintf("http://%s:%i/disgenet/%s/%s",host,port,version,netType)
}
return (disgeneturl)
}
net <- "gene-disease-net"
disgenetRestUrl(netType = net)
#Defining object for REST to call DisGeNET automation module; defining that we will be using gene-disease associations (GDA)
disgenetRestCall<-function(netType,netParams){
disgeneturl<-disgenetRestUrl(netType)
restCall<-POST(disgeneturl, body = netParams, encode = "json")
result<-content(restCall,"parsed")
return(result)
}
#Object that executes REST calls to DisGeNET module in Cytoscape
geneDisParams <- function(source,dis,min) {list(
source = source,
assocType = "Any",
diseaseClass = "Any",
diseaseSearch = dis,
geneSearch = " ",
initialScoreValue = min,
finalScoreValue = "1.0"
)}
# METADATA ============================================================================================================================
sysdatetime <- Sys.time()
datetime <- format(sysdatetime, format = "%Y-%m-%d_%Hh%M")
file.create(sprintf("Metadata/metadata_%s.txt",datetime))
#Creating a new metadata file with the current date and time as suffix for easier organisation
#Such a metadata file should be generated every time this script is ran to record parameters and versions of functions or databases, including the time avoids files being overwritten if the script is run multiple times a day (can even include seconds if script is ran multiple times per minute)
metadata.add <- function(info) {
write(sapply(info, as.character), sprintf("Metadata/metadata_%s.txt",datetime),append=TRUE, sep = "\n")
}
metadata.add(sysdatetime)
metadata.add(Sys.timezone())
metadata.add("")
genedisparams.scz.df <- read.table("CSVs/disgenetparams-scz.txt",header=TRUE,sep = "\t")
#Loading relevant gene-disease networks from DisGeNET
#Networks of interest manually added into tsv where it is easier to adjust filters
disgeneturl <- c()
#Preparing container for DisGeNET URL to be saved for addition to metadata file
apply(genedisparams.scz.df,1,function(row) {
gdp <- geneDisParams(row["source"],row["dis"],row["min"])
disgeneturl <<- disgenetRestUrl(net)
#Fetching the DisGeNET URL used to make this call
geneDisResult <- disgenetRestCall(net,gdp)
#Executing the DisGeNET query
createNodeSource("DisGeNET")
#Adding information about data source to each node
mapToEnsembl("geneName","HGNC")
#Mapping the HGNC gene name from the geneName column in the node table to Ensembl identifiers
})
#Importing networks from DisGeNET
metadata.add(paste("DisGeNET URL:",disgeneturl))
metadata.add(paste("DisGeNET net type:",net))
metadata.add("")
wpids <- c("4875","5412","4222","4942","5408","5402","5346","5405","5406","5407","4940","4905","5398","5399","4906","4657","4932")
sczcnv <- sapply(wpids, function(k) paste0("WP",k))
keyword.wp <- "Schizophrenia"
getPathways.wp(keyword.wp)
lapply(c(Schizophrenia_wpids,sczcnv), import)
#Importing WP pathways (both manually added and by keyword). Also adds "WikiPathways" as NodeSource column to node table
metadata.add(paste("WikiPathways keywords:",keyword.wp))
metadata.add(paste("WikiPathways manually by ID:",paste(wpids,collapse =", ")))
metadata.add(paste("WikiPathways queried species:",paste(queryspecies.wp,collapse = ", ")))
#Adding the keyword and species used to filter the WikiPathways query to the metadata file
metadata.add("")
commandsRun(sprintf("network import file columnTypeList='sa,sa,source,sa,sa,sa,sa' file=%s firstRowAsColumnNames=true rootNetworkList=-- Create new network collection -- startLoadRow=1", paste0(getwd(),"/CSVs/scz2022-Extended-Data-Table1.txt")))
#Importing network from file
#List of 120 genes implicated in Trubetskoy et al., doi: 10.1038/s41586-022-04434-5
commandsRun("table rename column columnName=Ensembl.ID newColumnName=Ensembl table=scz2022-Extended-Data-Table1.txt default node")
#Renaming the Ensembl.ID column from the dataset to Ensembl for coherence with networks from other sources
createNodeSource("Literature")
#Adding literature as  source to all imported nodes
renameNetwork("Trubetskoy risk genes")
#Renaming the newly imported network
metadata.add("Literature")
metadata.add("Trubetskoy et al. doi: 10.1038/s41586-022-04434-5")
networklist.dup <- getNetworkList()
dup.filter <- function(input,suffix) {
filtered_list <- input[substr(input, nchar(input) - 1,nchar(input))==suffix]
}
duplicates <- dup.filter(networklist.dup,"_1")
#Getting duplicate networks (Cytoscape marks duplicate networks with a "_1" suffix to the network name)
delete.dupes <- function(nw) {
setCurrentNetwork(nw)
deleteNetwork()
}
lapply(duplicates,delete.dupes)
networklist <- getNetworkList()
setCurrentNetwork(networklist[[1]])
for(i in 1:length(networklist)) {
current <- getNetworkName()
mergeNetworks(c(current,networklist[[i]]), paste(current,networklist[[i]]),"union",inNetworkMerge = TRUE,nodeKeys=c("Ensembl","Ensembl"))
}
#Looping through the network list to merge all currently open networks with each other, creating one large unified network
renameNetwork("Schizophrenia supernetwork")
networklist <- getNetworkList()
snw_scz <- getNetworkName()
#Getting the name of the unified network to preserve it from deletion
lapply(networklist[networklist != snw_scz],deleteNetwork)
?RCy3
?exportNetwork
#Deleting all networks besides newly generated unified network
exportNetwork(paste("Sessions/Networks/",paste(snw_scz,datetime)),CX,FALSE)
#Deleting all networks besides newly generated unified network
exportNetwork(paste("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")),CX,FALSE)
#Deleting all networks besides newly generated unified network
exportNetwork(paste("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")),CX, name = snw_scz,FALSE)
#Deleting all networks besides newly generated unified network
exportNetwork(paste("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")),CX, network = snw_scz,FALSE)
#Deleting all networks besides newly generated unified network
exportNetwork(filename=paste("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")),CX, network = snw_scz,FALSE)
View(paste("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")))
View(paste("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")))
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste0('cytargetlinker extend idAttribute="XrefId" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
#Deleting all networks besides newly generated unified network
exportNetwork(filename=paste0("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")),CX, network = snw_scz,FALSE)
View(exportNetwork(filename=paste0("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")),CX, network = snw_scz,FALSE))
View(paste0("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")))
#Deleting all networks besides newly generated unified network
exportNetwork(filename=paste0("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")),"CX", network = snw_scz,FALSE)
#Deleting all networks besides newly generated unified network
exportNetwork(filename=paste0("Sessions/Networks/",paste(snw_scz,datetime, sep = " - ")),"CX", network = snw_scz, overwriteFile=FALSE)
## CTL EXTENSION ----------------------------------------------------------------------------------------------------------------------
setCurrentNetwork(snw_scz)
hsa <- file.path(getwd(), "Linksets", "wikipathways-20220511-hsa-WP.xgmml")
hsa_react <- file.path(getwd(), "Linksets", "wikipathways-20220511-hsa-REACTOME.xgmml")
#Loading the WikiPathways linksets available at https://cytargetlinker.github.io/pages/linksets/wikipathways
CTLextend.cmd = paste('cytargetlinker extend idAttribute="XrefId" linkSetFiles="', hsa, ',', hsa_react, '" network=current direction=TARGETS', sep="")
commandsRun(CTLextend.cmd)
#Extending the network with previously loaded linksets
layoutNetwork()
#Adding basic network layout
snw_scz_ext <- getNetworkName()
exportNetwork(filename=paste0("Sessions/Networks/Schizophrenia",paste(snw_scz_ext,datetime, sep = " - ")),"CX", network = snw_scz_ext, overwriteFile=FALSE)
exportNetwork(filename=paste0("Sessions/Networks/Schizophrenia/",paste(snw_scz_ext,datetime, sep = " - ")),"CX", network = snw_scz_ext, overwriteFile=FALSE)
## STRINGIFY --------------------------------------------------------------------------------------------------------------------------
setCurrentNetwork(snw_scz)
commandsRun("string stringify column=Ensembl includeNotMapped=false networkNoGui=current networkType='full STRING network' species='Homo sapiens'")
commandsRun("string stringify column=Ensembl includeNotMapped=false networkNoGui=current networkType='full STRING network' species='Homo sapiens'")
?commandsRun
commandsGET("string stringify column=Ensembl includeNotMapped=false networkNoGui=current networkType='full STRING network' species='Homo sapiens'")
## STRINGIFY --------------------------------------------------------------------------------------------------------------------------
setCurrentNetwork(snw_scz)
commandsRun("string stringify column=Ensembl includeNotMapped=false  networkType='full STRING network' species='Homo sapiens'networkNoGui=current")
commandsRun("string stringify column=Ensembl includeNotMapped=false  networkType='full STRING network' species='Homo sapiens' networkNoGui=current")
